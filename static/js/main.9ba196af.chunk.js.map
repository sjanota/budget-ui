{"version":3,"sources":["react-auth0-spa.js","apollo.js","lang/pl.js","model/Day.js","model/Month.js","components/context/Month.jsx","util/immutable.js","components/gql/accounts.js","components/gql/envelopes.js","components/gql/monthlyReport.js","components/gql/expenses.js","components/gql/plans.js","components/gql/transfers.js","components/gql/budget.js","components/sbadmin2/components/Combobox/Combobox.tsx","components/sbadmin2/components/IconButton/IconButton.tsx","components/sbadmin2/components/OpenModalButton/OpenModalButton.tsx","components/sbadmin2/context.js","components/sbadmin2/language.js","util/capitalize.js","components/sbadmin2/components/Page/PageHeader.js","components/sbadmin2/components/Page/Page.js","components/sbadmin2/components/Panel/PanelTitle.js","components/sbadmin2/components/Panel/Panel.js","components/sbadmin2/components/SplitButton/SplitButton.tsx","components/sbadmin2/components/Panel/PanelHeader.js","components/sbadmin2/components/Panel/PanelBody.js","components/sbadmin2/components/Table/Table.tsx","components/sbadmin2/components/TablePanel/TablePanel.js","components/sbadmin2/NotFoundPage.js","components/sbadmin2/Sidebar/SidebarCollapsibleLink.js","components/sbadmin2/Sidebar/SidebarSimpleLink.js","components/sbadmin2/Sidebar/SidebarGroup.js","components/sbadmin2/Sidebar/Sidebar.js","components/sbadmin2/SBAdmin2.js","components/sbadmin2/utilities/FormControl.js","components/sbadmin2/bootstrap.js","components/common/CancelButton.js","components/common/SaveButton.js","components/sbadmin2/utilities/FormInModal.js","components/sbadmin2/components/ContextSwitcher/ContextSwitcher.jsx","components/sbadmin2/utilities/Spinner.js","components/common/MonthSwitcher.js","components/common/CreateButton.js","model/Amount.js","components/gql/WithQuery.js","components/sbadmin2/utilities/InlineFormControl.js","components/sbadmin2/utilities/useFormData.js","components/gql/categories.js","components/Expenses/AmountInput.js","components/Expenses/CategoriesInput.js","components/Expenses/ExpenseModal.js","components/Expenses/CreateExpenseButton.js","components/common/ListAction.jsx","components/common/ListActions.jsx","components/common/RefreshButton.js","components/gql/QueryTablePanel.js","components/Expenses/ExpensesTablePanel.js","components/Transfers/TransferModal.js","components/Transfers/CreateTransferButton.js","components/Transfers/TransfersTablePanel.js","components/Accounts/AccountModal.js","components/Accounts/CreateAccountButton.js","components/Accounts/UpdateAccountButton.js","components/Accounts/AccountsTablePanel.js","components/Accounts/CollapsiblePanel.js","components/Accounts/AccountsPage.js","components/sbadmin2/utilities/OptionalFormControl.js","model/propTypes.js","components/Envelopes/EnvelopeModal.js","components/Envelopes/CreateEnvelopeButton.js","components/Envelopes/UpdateEnvelopeButton.js","components/Envelopes/EnvelopesListPanel.js","components/Categories/CategoryModal.js","components/Categories/CreateCategoryButton.js","components/Categories/UpdateCategoryButton.js","components/Categories/CategoriesListPanel.js","components/Envelopes/EnvelopesPage.js","components/Expenses/ExpensesPage.js","components/MonthDashboardPage/StartNextMonthButton.js","components/MonthDashboardPage/CurrentMonth.js","components/sbadmin2/Gauge.js","components/MonthDashboardPage/Gauges.js","components/MonthDashboardPage/MonthProblems.js","components/MonthDashboardPage/MonthDashboardPage.js","components/Plans/PlanModal.js","components/Plans/CreatePlanButton.js","components/Plans/DeletePlanButton.js","components/Plans/UpdatePlanButton.js","components/Plans/PlansPage.js","components/sbadmin2/Topbar/TopbarContext.js","components/sbadmin2/Topbar/Topbar.js","components/sbadmin2/Topbar/TopbarMenu.js","components/sbadmin2/Topbar/TopbarUser.js","components/sbadmin2/Topbar/TopbarContextSwitcher.js","components/TopbarBudgetSwitcher.js","components/Topbar.js","components/Transfers/TransfersPage.js","components/App/sidebarConfig.js","components/App/App.js","serviceWorker.js","index.js","components/Beta.js"],"names":["DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","Auth0Provider","children","onRedirectCallback","returnTo","initOptions","useState","isAuthenticated","setIsAuthenticated","user","setUser","token","setToken","auth0Client","setAuth0","loading","setLoading","popupOpen","setPopupOpen","useEffect","a","async","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","appState","getUser","getTokenSilently","initAuth0","Provider","value","loginWithPopup","params","console","error","getIdTokenClaims","loginWithRedirect","getTokenWithPopup","logout","p","getTokenScopes","claimsString","split","claims","JSON","parse","atob","scope","fragmentMatcher","IntrospectionFragmentMatcher","introspectionQueryResultData","createClient","graphqlApiUrl","process","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","cache","InMemoryCache","errorLink","onError","graphQLErrors","networkError","REACT_APP_ENV","map","message","locations","path","log","link","concat","ApolloClient","ApolloLink","from","connectToDevTools","AuthApolloProvider","client","buttons","create","cancel","save","sidebar","sections","currentMonth","budget","pages","dashboard","expenses","transfers","plans","accounts","envelopes","topbar","budgetLabel","alertsLabel","messagesLabel","planned","incomes","leftToPlan","noProblems","problems","overplanned","underplanned","expensesExceedPlans","envelope","envelopeOverLimit","negativeAccountBalance","account","monthNotEnded","closeMonth","table","columns","balance","name","expensesTableTitle","inTransfersTableTitle","outTransfersTableTitle","modal","createTitle","editTitle","labels","limit","overLimit","categories","description","fromEnvelope","toEnvelope","currentAmount","amount","recurring","fromAccount","toAccount","date","totalAmount","category","months","Day","year","month","day","this","String","padStart","Date","getYear","getMonth","getDate","monthNames","Month","string","Number","MonthContext","useMonth","MonthProvider","selectedMonth","setSelectedMonth","removeFromListByID","list","elementId","idx","findIndex","e","id","slice","length","GET_ACCOUNTS","gql","useGetAccounts","selectedBudget","useBudget","useQuery","variables","budgetID","CREATE_ACCOUNT","UPDATE_ACCOUNT","GET_ENVELOPES","CREATE_ENVELOPE","UPDATE_ENVELOPE","useGetEnvelopes","MONTHLY_REPORT_FRAGMENT","GET_MONTHLY_REPORT","EXPENSE_FRAGMENT","GET_EXPENSES","CREATE_EXPENSE","UPDATE_EXPENSE","useUpdateExpense","useMutation","refetchQueries","query","mutation","rest","input","DELETE_EXPENSE","useDeleteExpense","update","deleteExpense","data","monthlyReport","readQuery","writeQuery","PLAN_FRAGMENT","GET_CURRENT_PLANS","CREATE_PLAN","UPDATE_PLAN","DELETE_PLAN","TRANSFER_FRAGMENT","GET_CURRENT_TRANSFERS","GET_TRANSFERS","CREATE_TRANSFER","UPDATE_TRANSFER","useUpdateTransfer","DELETE_TRANSFER","useDeleteTranfer","deleteTransfer","BudgetContext","GET_BUDGETS","storageKey","BudgetProvider","setSelectedBudget","sessionStorage","setItem","budgets","lastChosenID","getItem","lastChosen","find","b","CLOSE_CURRENT_MONTH","Combobox","disabled","allowedValues","_ref","defaultID","defaultValue","className","required","ariaLabel","variant","prependLabel","valueByID","v","valueByLabel","useCallback","label","show","setShow","filter","setFilter","dropdownRef","useRef","filtered","toLowerCase","onInputChange","target","selected","current","handleClickOutside","event","contains","isClickedInside","addEventListener","removeEventListener","Dropdown","ref","onToggle","isOpen","classnames","Toggle","as","props","FormControl","type","onChange","aria-label","tabIndex","Menu","Item","eventKey","key","onClick","forwardRef","InputGroup","IconButton","icon","borderless","size","prefix","classes","preventDefault","OpenModalButton","Button","button","ModalContent","modalContent","onHide","SBAdmin2Context","SBAdmin2Provider","sidebarToggled","setSidebarToggled","toggleSidebar","useSBAdmin2","DictionaryContext","DictionaryProvider","dictionaries","locale","useDictionary","withDictionary","prop","Component","readPropName","readDict","charAt","toUpperCase","newProps","dictionary","Page","Header","PageHeader","classNames","Panel","SplitButton","Title","PanelTitle","Body","addColumnNames","c","text","dataField","columnNames","bootstrap4","TablePanel","headerButtons","panelClassName","Wrapper","wrapper","wrapperProps","hiddenColumns","filters","wihtouHidden","headerClasses","hidden","some","hc","filteredData","row","every","f","filtersMatch","striped","hover","bordered","defaultProps","NotFoundPage","data-text","to","SidebarCollapsibleLink","parent","faIcon","isActive","routes","oneOfRoutsMatchesLocation","useLocation","active","iconClasses","data-toggle","data-target","aria-expanded","aria-controls","data-parent","Fragment","SidebarSimpleLink","exact","SidebarGroup","group","entries","entry","undefined","Sidebar","renderBrandName","renderBrandIcon","config","toggled","SBAdmin2","sidebarProps","copyright","Topbar","component","inline","Form","Group","Row","Label","column","Input","formData","feedback","wrap","Col","sm","child","Control","default","Feedback","Variant","secondary","primary","danger","success","warning","white","Size","lg","CancelButton","faTrash","SaveButton","faSave","FormInModal","onSave","validated","setValidated","form","handleSave","stopPropagation","isValid","checkValidity","changed","firstInput","getElementsByTagName","focus","onSubmit","closeButton","Footer","ContextSwitcher","displayBg","labelBg","showLabel","labelClasses","Prepend","Text","append","ButtonGroup","Spinner","role","GET_AVAILABLE_REPORTS","MonthSwitcher","availableReports","sort","reverse","m","parsed","CreateButton","faPlus","Amount","number","math","replace","Math","round","kSeparator","fixed","toFixed","parts","join","ErrorMessageList","errorMessage","subErrors","ErrorMessage","result","errors","WithQuery","showError","InlineFormControl","createFormData","model","rerender","getRoot","Object","prototype","hasOwnProperty","call","$model","$init","_originalPush","push","removeAt","splice","arrayFormData","$process","$default","_default","init","simpleFormData","$includeAllValues","keys","reduce","acc","k","compositeFormData","useFormData","setValue","GET_CATEGORIES","CREATE_CATEGORY","UPDATE_CATEGORY","useGetCategories","AmountInput","placeholder","setIsValid","newValue","CategoriesInput","categoryFormData","categoryID","faMinus","ExpenseModal","accountsQuery","accountID","format","first","firstDay","last","lastDay","accountsData","min","max","CreateExpenseButton","createExpense","useCreateExpense","ListAction","ListActions","monthScopedResource","dictionaryName","modalComponent","updateHook","deletehook","updateMutation","deleteMutation","EditInModal","Delete","RefreshButton","faSyncAlt","QueryTablePanel","getData","refetch","Edit","faEdit","Modal","buttonProps","formatter","align","headerAlign","isDummyColumn","style","whiteSpace","width","rowClasses","rowIndex","expandRow","renderer","defaultSorted","order","ExpensesTablePanel","readTitle","createButton","accountFilter","useGetExpenses","d","keyField","readColumnNames","TransferModal","fromAccountID","toAccountID","step","CreateTransferButton","createTransfer","useCreateTransfer","cell","TransfersTablePanel","toAccountFilter","fromAccountFilter","useGetTransfers","AccountModal","CreateAccountButton","createAccount","useCreateAccount","UpdateAccountButton","useUpdateAccount","updateAccount","cursor","AccountsTablePanel","onSelectAcount","selectRow","mode","clickToSelect","hideSelectColumn","onSelect","CollapsibleContext","CollapsiblePanel","initialyShown","toggle","s","AccountsPage","selectedAccount","setSelectedAccount","OptionalFormControl","initEnabled","enabled","setEnabled","toggleEnabled","Check","custom","checked","autoFocus","faChevronUp","faChevronDown","Collapse","in","PropTypes","Account","shape","isRequired","Envelope","totalBalance","EnvelopeModal","CreateEnvelopeButton","onClickRef","createEnvelope","useCreateEnvelope","UpdateEnvelopeButton","useUpdateEnvelope","updateEnvelope","faArchive","EnvelopesListPanel","CategoryModal","envelopeID","CreateCategoryButton","createCategory","useCreateCategory","UpdateCategoryButton","useUpdateCategory","CategoriesListPanel","keyMap","handlers","createEnvelopeFunRef","createCategoryFunRef","EnvelopesPage","createFunRef","ExpensesPage","StartNextMonthButton","warn","useCloseCurrentMonth","closeCurrentMonth","faClipboardCheck","CurrentMonth","severity","Gauge","Gauges","totalPlannedAmount","totalIncomeAmount","totalExpenseAmount","severityVariant","ERROR","WARNING","INFO","severityIcon","MonthProblems","problem","Problem","NoProblems","ProblemMessage","envelopesQuery","envelopesData","__typename","MonthDashboardPage","fetchPolicy","useGetMonthlyReport","PlanModal","recurringAmount","fd","fromEnvelopeID","toEnvelopeID","CreatePlanButton","createPlan","useCreatePlan","DeletePlanButton","plan","deletePlan","useDeletePlan","UpdatePlanButton","useUpdatePlan","updatePlan","sortValue","PlansPage","useGetCurrentPlans","TopbarContextExpanded","renderContext","TopbarContextMinimized","aria-haspopup","aria-labelledby","TopbarContext","minified","renderMenus","renderUser","faIconContextMinified","TopbarMenuCounter","counter","badge","TopbarMenu","TopbarUser","alt","src","picture","TopbarContextSwitcher","TopbarBudgetSwitcher","pictureUrl","TransfersPage","sidebarConfig","pl","Boolean","hostname","match","targetUrl","redirectURI","origin","AuthorizationProvider","REACT_APP_INSECURE_AUTH_DISABLED","domain","client_id","clientId","redirect_uri","audience","Promise","resolve","ReactDOM","render","setScope","then","basename","Consumer","Envelopes","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9ba196af.chunk.js","sourcesContent":["import createAuth0Client from '@auth0/auth0-spa-js';\nimport PropTypes from 'prop-types';\nimport React, { useContext, useEffect, useState } from 'react';\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n  window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext();\nexport const useAuth0 = () => useContext(Auth0Context);\nexport const Auth0Provider = ({\n  children,\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n  returnTo,\n  ...initOptions\n}) => {\n  const [isAuthenticated, setIsAuthenticated] = useState();\n  const [user, setUser] = useState();\n  const [token, setToken] = useState();\n  const [auth0Client, setAuth0] = useState();\n  const [loading, setLoading] = useState(true);\n  const [popupOpen, setPopupOpen] = useState(false);\n\n  useEffect(() => {\n    const initAuth0 = async () => {\n      const auth0FromHook = await createAuth0Client(initOptions);\n      setAuth0(auth0FromHook);\n\n      if (window.location.search.includes('code=')) {\n        const { appState } = await auth0FromHook.handleRedirectCallback();\n        onRedirectCallback(appState);\n      }\n\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\n\n      setIsAuthenticated(isAuthenticated);\n\n      if (isAuthenticated) {\n        const user = await auth0FromHook.getUser();\n        setUser(user);\n\n        const token = await auth0FromHook.getTokenSilently();\n        setToken(token);\n      }\n\n      setLoading(false);\n    };\n    initAuth0();\n    // eslint-disable-next-line\n  }, []);\n\n  const loginWithPopup = async (params = {}) => {\n    setPopupOpen(true);\n    try {\n      await auth0Client.loginWithPopup(params);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setPopupOpen(false);\n    }\n    const user = await auth0Client.getUser();\n    setUser(user);\n    setIsAuthenticated(true);\n  };\n\n  const handleRedirectCallback = async () => {\n    setLoading(true);\n    await auth0Client.handleRedirectCallback();\n    const user = await auth0Client.getUser();\n    setLoading(false);\n    setIsAuthenticated(true);\n    setUser(user);\n  };\n  return (\n    <Auth0Context.Provider\n      value={{\n        token,\n        isAuthenticated,\n        user,\n        loading,\n        popupOpen,\n        loginWithPopup,\n        handleRedirectCallback,\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\n        logout: (...p) => auth0Client.logout({ ...p, returnTo }),\n        getTokenScopes: async (...p) => {\n          const token = await auth0Client.getTokenSilently(...p);\n          const claimsString = token.split('.')[1];\n          const claims = JSON.parse(atob(claimsString));\n          const scope = claims.scope.split(' ');\n          return scope;\n        },\n      }}\n    >\n      {children}\n    </Auth0Context.Provider>\n  );\n};\n\nAuth0Provider.propTypes = {\n  children: PropTypes.node,\n  onRedirectCallback: PropTypes.func,\n  returnTo: PropTypes.string.isRequired,\n};\n","import { ApolloProvider } from '@apollo/react-hooks';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { IntrospectionFragmentMatcher } from 'apollo-cache-inmemory';\nimport ApolloClient from 'apollo-client';\nimport { ApolloLink } from 'apollo-link';\nimport { setContext } from 'apollo-link-context';\nimport { onError } from 'apollo-link-error';\nimport { createHttpLink } from 'apollo-link-http';\nimport { getMainDefinition } from 'apollo-utilities';\nimport PropTypes from 'prop-types';\nimport React, { useEffect } from 'react';\n\nimport introspectionQueryResultData from './fragmentTypes.json';\nimport { useAuth0 } from './react-auth0-spa.js';\n\nconst fragmentMatcher = new IntrospectionFragmentMatcher({\n  introspectionQueryResultData,\n});\n\nexport function isSubscriptionOperation({ query }) {\n  const definition = getMainDefinition(query);\n  return (\n    definition.kind === 'OperationDefinition' &&\n    definition.operation === 'subscription'\n  );\n}\n\nexport function createClient(token) {\n  const graphqlApiUrl = process.env.REACT_APP_GQL_URL;\n  // const graphqlApiUrl = 'http://localhost:8080/query';\n  const httpLink = createHttpLink({ uri: graphqlApiUrl });\n  const authLink = setContext((_, { headers }) => {\n    // get the authentication token from local storage if it exists\n    // return the headers to the context so httpLink can read them\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    };\n  });\n  const cache = new InMemoryCache({ fragmentMatcher });\n\n  const errorLink = onError(({ graphQLErrors, networkError }) => {\n    if (process.env.REACT_APP_ENV !== 'production') {\n      if (graphQLErrors) {\n        graphQLErrors.map(({ message, locations, path }) =>\n          console.log(\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n          )\n        );\n      }\n\n      if (networkError) console.log(`[Network error]: ${networkError}`);\n    }\n  });\n\n  // const link = split(isSubscriptionOperation, wsLink, httpLink);\n  const link = authLink.concat(httpLink);\n\n  return new ApolloClient({\n    uri: graphqlApiUrl,\n    cache,\n    link: ApolloLink.from([errorLink, link]),\n    connectToDevTools: true,\n  });\n}\n\nexport function AuthApolloProvider({ children }) {\n  const { isAuthenticated, loading, loginWithRedirect, token } = useAuth0();\n\n  useEffect(() => {\n    if (loading) {\n      return;\n    }\n    if (!isAuthenticated) {\n      loginWithRedirect({});\n      return;\n    }\n  }, [isAuthenticated, loginWithRedirect, loading]);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!isAuthenticated || !token) {\n    return <div />;\n  }\n\n  return (\n    <ApolloProvider client={createClient(token)}>{children}</ApolloProvider>\n  );\n}\n\nAuthApolloProvider.propTypes = {\n  children: PropTypes.node,\n};\n","export default {\n  buttons: {\n    create: 'Dodaj',\n    cancel: 'Anuluj',\n    save: 'Zapisz',\n  },\n  sidebar: {\n    sections: {\n      currentMonth: 'Bieżący miesiąc',\n      budget: 'Budżet',\n    },\n    pages: {\n      dashboard: 'Podsumowanie',\n      expenses: 'Wydatki',\n      transfers: 'Przelewy',\n      plans: 'Plany',\n      accounts: 'Konta',\n      envelopes: 'Koperty',\n    },\n  },\n  topbar: {\n    budgetLabel: 'Budżet',\n    alertsLabel: 'Powiadomienia',\n    messagesLabel: 'Wiadomości',\n  },\n  dashboard: {\n    planned: 'Zaplanowano',\n    incomes: 'Wpływy',\n    leftToPlan: 'Pozostało do zaplanowania',\n    expenses: 'Wydatki',\n    currentMonth: 'Bieżący miesiąc',\n    noProblems: 'Wszystko w porządku',\n    problems: {\n      title: 'Problemy',\n      overplanned: 'Plany na bieżący miesiąc przekraczają wpływy',\n      underplanned: 'Część środków jest nierozplanowana',\n      expensesExceedPlans: envelope =>\n        `Wydatki przekroczyły zaplanowany budżet na kopercie \"${envelope}\"`,\n      envelopeOverLimit: envelope =>\n        `Limit dla koperty \"${envelope}\" został przekroczony`,\n      negativeAccountBalance: account =>\n        `Bilans na koncie \"${account}\" jest ujemny`,\n      monthNotEnded: 'Miesiąc się jeszcze nie skończył',\n    },\n    buttons: {\n      closeMonth: 'Zamknij miesiąc',\n    },\n  },\n  accounts: {\n    table: {\n      title: 'Konta',\n      columns: {\n        balance: 'Bilans',\n        name: 'Nazwa',\n      },\n    },\n    expensesTableTitle: 'Wydatki',\n    inTransfersTableTitle: 'Przelewy przychodzące',\n    outTransfersTableTitle: 'Przelewy wychodzące',\n    modal: {\n      createTitle: 'Dodaj nowe konto',\n      editTitle: 'Edytuj konto',\n      labels: {\n        name: 'Nazwa',\n      },\n    },\n  },\n  envelopes: {\n    table: {\n      title: 'Koperty',\n      columns: {\n        balance: 'Bilans',\n        name: 'Nazwa',\n        limit: 'Limit',\n        overLimit: 'Ponad limit',\n      },\n    },\n    modal: {\n      createTitle: 'Dodaj nową kopertę',\n      editTitle: 'Edytuj kopertę',\n      labels: {\n        name: 'Nazwa',\n        limit: 'Limit',\n      },\n    },\n  },\n  categories: {\n    table: {\n      title: 'Kategorie',\n      columns: {\n        name: 'Nazwa',\n        envelope: 'Koperta',\n        description: 'Opis',\n      },\n    },\n    modal: {\n      createTitle: 'Dodaj nową kategorię',\n      editTitle: 'Edytuj kategorię',\n      labels: {\n        name: 'Nazwa',\n        envelope: 'Koperta',\n        description: 'Opis',\n      },\n    },\n  },\n  plans: {\n    table: {\n      title: 'Plany',\n      columns: {\n        title: 'Tytuł',\n        fromEnvelope: 'Z',\n        toEnvelope: 'Do',\n        currentAmount: 'Kwota',\n      },\n    },\n    modal: {\n      createTitle: 'Dodaj nowy plan',\n      editTitle: 'Edytuj plan',\n      labels: {\n        title: 'Tytuł',\n        fromEnvelope: 'Z',\n        toEnvelope: 'Do',\n        amount: 'Kwota',\n        recurring: 'Cyklicznie',\n      },\n    },\n  },\n  transfers: {\n    table: {\n      title: 'Przelewy',\n      columns: {\n        title: 'Tytuł',\n        fromAccount: 'Z',\n        toAccount: 'Do',\n        amount: 'Kwota',\n        date: 'Data',\n      },\n    },\n    modal: {\n      createTitle: 'Dodaj nowy przelew',\n      editTitle: 'Edytuj przelew',\n      labels: {\n        title: 'Tytuł',\n        fromAccount: 'Z',\n        toAccount: 'Do',\n        amount: 'Kwota',\n        date: 'Data',\n      },\n    },\n  },\n  expenses: {\n    table: {\n      title: 'Wydatki',\n      columns: {\n        title: 'Tytuł',\n        totalAmount: 'Kwota',\n        date: 'Data',\n        account: 'Konto',\n      },\n    },\n    modal: {\n      createTitle: 'Dodaj nowy wydatek',\n      editTitle: 'Edytuj wydatek',\n      labels: {\n        title: 'Tytuł',\n        fromAccount: 'Z',\n        toAccount: 'Do',\n        account: 'Konto',\n        date: 'Data',\n        categories: 'Kategorie',\n        amount: 'Kwota',\n        category: 'Kategoria',\n      },\n    },\n  },\n  months: [\n    'Styczeń',\n    'Luty',\n    'Marzec',\n    'Kwiecień',\n    'Maj',\n    'Czerwiec',\n    'Lipiec',\n    'Sierpień',\n    'Wrzesień',\n    'Październik',\n    'Listopad',\n    'Grudzień',\n  ],\n};\n","export default class Day {\n  constructor(year, month, day) {\n    this.year = year;\n    this.month = month;\n    this.day = day;\n  }\n\n  static fromDate(date) {\n    return new Date(date.getYear(), date.getMonth(), date.getDate());\n  }\n\n  format() {\n    return `${this.year}-${String(this.month).padStart(2, '0')}-${String(\n      this.day\n    ).padStart(2, '0')}`;\n  }\n}\n","import Day from './Day';\n\nconst monthNames = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nexport default class Month {\n  constructor(year, month) {\n    this.year = year;\n    this.month = month;\n  }\n  static parse(string) {\n    const [year, month] = string.split('-');\n    return new Month(Number(year), Number(month));\n  }\n\n  firstDay() {\n    return new Day(this.year, this.month, 1);\n  }\n\n  lastDay() {\n    const date = new Date(this.year, this.month, 0);\n    return new Day(this.year, this.month, date.getDate());\n  }\n\n  pretty() {\n    return `${monthNames[this.month - 1]} ${this.year}`;\n  }\n}\n","import React, { createContext, useContext, useState } from 'react';\n\nexport const MonthContext = createContext();\nexport const useMonth = () => useContext(MonthContext);\n\nexport function MonthProvider({ currentMonth, children }) {\n  const [selectedMonth, setSelectedMonth] = useState(currentMonth);\n  const value = {\n    currentMonth,\n    selectedMonth,\n    setSelectedMonth,\n  };\n  return (\n    <MonthContext.Provider value={value}>{children}</MonthContext.Provider>\n  );\n}\n","export function addToList(list, element) {\n  return [...list, element]\n}\n\nexport function removeFromList(list, element) {\n  const idx = list.indexOf(element);\n  if (idx === -1) {\n    return list\n  }\n  return [...list.slice(0, idx), ...list.slice(idx+1, list.length)]\n}\n\nexport function removeFromListByID(list, elementId) {\n  const idx = list.findIndex(e => e.id === elementId);\n  if (idx === -1) {\n    return list\n  }\n  return [...list.slice(0, idx), ...list.slice(idx+1, list.length)]\n}\n\nexport function replaceOnList(list, idx, element) {\n  if (idx < 0 || idx > list.length) {\n    return list\n  }\n  return [...list.slice(0, idx), element, ...list.slice(idx+1, list.length)]\n}\n\nexport function replaceOnListByID(list, element) {\n  const idx = list.findIndex(e => e.id === element.id);\n\n  if (idx === -1) {\n    return list\n  }\n\n  return [...list.slice(0, idx), element, ...list.slice(idx+1, list.length)]\n}","import gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { useBudget } from './budget';\n\nexport const GET_ACCOUNTS = gql`\n  query GetAccounts($budgetID: ID!) {\n    accounts(budgetID: $budgetID) {\n      id\n      name\n      balance\n    }\n  }\n`;\n\nexport function useGetAccounts() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_ACCOUNTS, {\n    variables: { budgetID: selectedBudget.id },\n  });\n}\n\nconst CREATE_ACCOUNT = gql`\n  mutation CreateAccount($budgetID: ID!, $input: AccountInput!) {\n    createAccount(budgetID: $budgetID, in: $input) {\n      id\n      name\n      balance\n    }\n  }\n`;\n\nexport function useCreateAccount() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_ACCOUNT, {\n    update: (cache, { data: { createAccount } }) => {\n      const { accounts } = cache.readQuery({\n        query: GET_ACCOUNTS,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_ACCOUNTS,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          accounts: accounts.concat([createAccount]),\n        },\n      });\n    },\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nconst UPDATE_ACCOUNT = gql`\n  mutation UpdateAccount($budgetID: ID!, $id: ID!, $input: AccountUpdate!) {\n    updateAccount(budgetID: $budgetID, id: $id, in: $input) {\n      id\n      name\n      balance\n    }\n  }\n`;\n\nexport function useUpdateAccount() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_ACCOUNT);\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n","import gql from 'graphql-tag';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { useBudget } from './budget';\n\nexport const GET_ENVELOPES = gql`\n  query GetEnvelopes($budgetID: ID!) {\n    envelopes(budgetID: $budgetID) {\n      id\n      name\n      balance\n      limit\n    }\n  }\n`;\n\nconst CREATE_ENVELOPE = gql`\n  mutation CreateEnvelope($budgetID: ID!, $input: EnvelopeInput!) {\n    createEnvelope(budgetID: $budgetID, in: $input) {\n      id\n      name\n      balance\n      limit\n    }\n  }\n`;\n\nconst UPDATE_ENVELOPE = gql`\n  mutation UpdateEnvelope($budgetID: ID!, $id: ID!, $input: EnvelopeUpdate!) {\n    updateEnvelope(budgetID: $budgetID, id: $id, in: $input) {\n      id\n      name\n      balance\n      limit\n    }\n  }\n`;\n\nexport function useCreateEnvelope() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_ENVELOPE, {\n    update: (cache, { data: { createEnvelope } }) => {\n      const { envelopes } = cache.readQuery({\n        query: GET_ENVELOPES,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_ENVELOPES,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          envelopes: envelopes.concat([createEnvelope]),\n        },\n      });\n    },\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useUpdateEnvelope() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_ENVELOPE);\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useGetEnvelopes() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_ENVELOPES, {\n    variables: { budgetID: selectedBudget.id },\n  });\n}\n","import { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { useBudget } from './budget';\n\nconst MONTHLY_REPORT_FRAGMENT = gql`\n  fragment MonthlyReport on MonthlyReport {\n    month\n    totalPlannedAmount\n    totalIncomeAmount\n    totalExpenseAmount\n    problems {\n      severity\n      ... on EnvelopeOverLimit {\n        id\n      }\n      ... on NegativeBalanceOnAccount {\n        id\n      }\n      ... on NegativeBalanceOnEnvelope {\n        id\n      }\n      ... on Misplanned {\n        overplanned\n      }\n    }\n  }\n`;\n\nexport const GET_MONTHLY_REPORT = gql`\n  query GetMonthlyReport($budgetID: ID!, $month: Month!) {\n    monthlyReport(budgetID: $budgetID, month: $month) {\n      ...MonthlyReport\n    }\n  }\n  ${MONTHLY_REPORT_FRAGMENT}\n`;\n\nexport function useGetMonthlyReport(month) {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_MONTHLY_REPORT, {\n    variables: { budgetID: selectedBudget.id, month },\n    fetchPolicy: 'network-only',\n  });\n}\n","import { useMutation, useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { removeFromListByID } from '../../util/immutable';\nimport { GET_ACCOUNTS } from './accounts';\nimport { useBudget } from './budget';\nimport { GET_ENVELOPES } from './envelopes';\nimport { GET_MONTHLY_REPORT } from './monthlyReport';\n\nconst EXPENSE_FRAGMENT = gql`\n  fragment Expense on Expense {\n    id\n    title\n    account {\n      id\n      name\n    }\n    categories {\n      category {\n        id\n        name\n      }\n      amount\n    }\n    totalAmount\n    date\n  }\n`;\n\nexport const GET_EXPENSES = gql`\n  query getExpenses($budgetID: ID!, $month: Month!) {\n    monthlyReport(budgetID: $budgetID, month: $month) {\n      expenses {\n        ...Expense\n      }\n    }\n  }\n\n  ${EXPENSE_FRAGMENT}\n`;\n\nconst CREATE_EXPENSE = gql`\n  mutation createExpense($budgetID: ID!, $input: ExpenseInput!) {\n    createExpense(budgetID: $budgetID, in: $input) {\n      ...Expense\n    }\n  }\n\n  ${EXPENSE_FRAGMENT}\n`;\n\nconst UPDATE_EXPENSE = gql`\n  mutation updateExpense($budgetID: ID!, $id: ID!, $input: ExpenseUpdate!) {\n    updateExpense(budgetID: $budgetID, id: $id, in: $input) {\n      ...Expense\n    }\n  }\n\n  ${EXPENSE_FRAGMENT}\n`;\n\nexport function useCreateExpense() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_EXPENSE, {\n    update: (cache, { data: { createExpense } }) => {\n      const { monthlyReport } = cache.readQuery({\n        query: GET_EXPENSES,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      });\n      cache.writeQuery({\n        query: GET_EXPENSES,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n        data: {\n          monthlyReport: {\n            ...monthlyReport,\n            expenses: monthlyReport.expenses.concat([createExpense]),\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      },\n    ],\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useUpdateExpense() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_EXPENSE, {\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      },\n    ],\n  });\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useGetExpenses(month) {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_EXPENSES, {\n    variables: { budgetID: selectedBudget.id, month },\n  });\n}\n\nconst DELETE_EXPENSE = gql`\n  mutation deleteExpense($budgetID: ID!, $id: ID!) {\n    deleteExpense(budgetID: $budgetID, id: $id) {\n      id\n    }\n  }\n`;\n\nexport function useDeleteExpense() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(DELETE_EXPENSE, {\n    update: (cache, { data: { deleteExpense } }) => {\n      const { monthlyReport } = cache.readQuery({\n        query: GET_EXPENSES,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      });\n      cache.writeQuery({\n        query: GET_EXPENSES,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n        data: {\n          monthlyReport: {\n            ...monthlyReport,\n            expenses: removeFromListByID(\n              monthlyReport.expenses,\n              deleteExpense.id\n            ),\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      },\n    ],\n  });\n  const wrapper = id => {\n    mutation({ variables: { budgetID: selectedBudget.id, id } });\n  };\n  return [wrapper, ...rest];\n}\n","import { useMutation, useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { removeFromListByID } from '../../util/immutable';\nimport { useBudget } from './budget';\nimport { GET_ENVELOPES } from './envelopes';\nimport { GET_MONTHLY_REPORT } from './monthlyReport';\n\nconst PLAN_FRAGMENT = gql`\n  fragment Plan on Plan {\n    id\n    title\n    fromEnvelope {\n      id\n      name\n    }\n    toEnvelope {\n      id\n      name\n    }\n    currentAmount\n    recurringAmount\n  }\n`;\n\nexport const GET_CURRENT_PLANS = gql`\n  query getCurrentPlans($budgetID: ID!) {\n    budget(budgetID: $budgetID) {\n      currentMonth {\n        plans {\n          ...Plan\n        }\n      }\n    }\n  }\n  ${PLAN_FRAGMENT}\n`;\n\nexport function useGetCurrentPlans() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_CURRENT_PLANS, {\n    variables: { budgetID: selectedBudget.id },\n  });\n}\n\nconst CREATE_PLAN = gql`\n  mutation createPlan($budgetID: ID!, $input: PlanInput!) {\n    createPlan(budgetID: $budgetID, in: $input) {\n      ...Plan\n    }\n  }\n  ${PLAN_FRAGMENT}\n`;\n\nexport function useCreatePlan() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_PLAN, {\n    update: (cache, { data: { createPlan } }) => {\n      const { budget } = cache.readQuery({\n        query: GET_CURRENT_PLANS,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_CURRENT_PLANS,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          budget: {\n            ...budget,\n            currentMonth: {\n              ...budget.currentMonth,\n              plans: budget.currentMonth.plans.concat([createPlan]),\n            },\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      },\n    ],\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nconst UPDATE_PLAN = gql`\n  mutation updatePlan($budgetID: ID!, $id: ID!, $input: PlanUpdate!) {\n    updatePlan(budgetID: $budgetID, id: $id, in: $input) {\n      ...Plan\n    }\n  }\n  ${PLAN_FRAGMENT}\n`;\n\nexport function useUpdatePlan() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_PLAN, {\n    refetchQueries: () => [\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      },\n    ],\n  });\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nconst DELETE_PLAN = gql`\n  mutation deletePlan($budgetID: ID!, $id: ID!) {\n    deletePlan(budgetID: $budgetID, id: $id) {\n      id\n    }\n  }\n`;\n\nexport function useDeletePlan() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(DELETE_PLAN, {\n    update: (cache, { data: { deletePlan } }) => {\n      const { budget } = cache.readQuery({\n        query: GET_CURRENT_PLANS,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_CURRENT_PLANS,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          budget: {\n            ...budget,\n            currentMonth: {\n              ...budget.currentMonth,\n              plans: removeFromListByID(\n                budget.currentMonth.plans,\n                deletePlan.id\n              ),\n            },\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      },\n    ],\n  });\n  const wrapper = id => {\n    mutation({ variables: { budgetID: selectedBudget.id, id } });\n  };\n  return [wrapper, ...rest];\n}\n","import { useMutation, useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { removeFromListByID } from '../../util/immutable';\nimport { GET_ACCOUNTS } from './accounts';\nimport { useBudget } from './budget';\nimport { GET_MONTHLY_REPORT } from './monthlyReport';\n\nconst TRANSFER_FRAGMENT = gql`\n  fragment Transfer on Transfer {\n    id\n    title\n    fromAccount {\n      id\n      name\n    }\n    toAccount {\n      id\n      name\n    }\n    amount\n    date\n  }\n`;\n\nexport const GET_CURRENT_TRANSFERS = gql`\n  query getCurrentTransfers($budgetID: ID!) {\n    budget(budgetID: $budgetID) {\n      currentMonth {\n        transfers {\n          ...Transfer\n        }\n      }\n    }\n  }\n  ${TRANSFER_FRAGMENT}\n`;\n\nexport const GET_TRANSFERS = gql`\n  query getTransfers($budgetID: ID!, $month: Month!) {\n    monthlyReport(budgetID: $budgetID, month: $month) {\n      transfers {\n        ...Transfer\n      }\n    }\n  }\n  ${TRANSFER_FRAGMENT}\n`;\n\nexport function useGetCurrentTransfers() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_CURRENT_TRANSFERS, {\n    variables: { budgetID: selectedBudget.id },\n  });\n}\n\nexport function useGetTransfers(month) {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_TRANSFERS, {\n    variables: { budgetID: selectedBudget.id, month },\n  });\n}\n\nconst CREATE_TRANSFER = gql`\n  mutation createTransfer($budgetID: ID!, $input: TransferInput!) {\n    createTransfer(budgetID: $budgetID, in: $input) {\n      ...Transfer\n    }\n  }\n  ${TRANSFER_FRAGMENT}\n`;\n\nexport function useCreateTransfer() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_TRANSFER, {\n    update: (cache, { data: { createTransfer } }) => {\n      const { monthlyReport } = cache.readQuery({\n        query: GET_TRANSFERS,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      });\n      cache.writeQuery({\n        query: GET_TRANSFERS,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n        data: {\n          monthlyReport: {\n            ...monthlyReport,\n            transfers: monthlyReport.transfers.concat([createTransfer]),\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      },\n    ],\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nconst UPDATE_TRANSFER = gql`\n  mutation updateTransfer($budgetID: ID!, $id: ID!, $input: TransferUpdate!) {\n    updateTransfer(budgetID: $budgetID, id: $id, in: $input) {\n      ...Transfer\n    }\n  }\n  ${TRANSFER_FRAGMENT}\n`;\n\nexport function useUpdateTransfer() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_TRANSFER, {\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      },\n    ],\n  });\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nconst DELETE_TRANSFER = gql`\n  mutation deleteTransfer($budgetID: ID!, $id: ID!) {\n    deleteTransfer(budgetID: $budgetID, id: $id) {\n      id\n    }\n  }\n`;\n\nexport function useDeleteTranfer() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(DELETE_TRANSFER, {\n    update: (cache, { data: { deleteTransfer } }) => {\n      const { monthlyReport } = cache.readQuery({\n        query: GET_TRANSFERS,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      });\n      cache.writeQuery({\n        query: GET_TRANSFERS,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n        data: {\n          monthlyReport: {\n            ...monthlyReport,\n            transfers: removeFromListByID(\n              monthlyReport.transfers,\n              deleteTransfer.id\n            ),\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      },\n    ],\n  });\n  const wrapper = id => {\n    mutation({ variables: { budgetID: selectedBudget.id, id } });\n  };\n  return [wrapper, ...rest];\n}\n","import { useMutation, useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport PropTypes from 'prop-types';\nimport React, { createContext, useContext, useEffect, useState } from 'react';\n\nimport { GET_EXPENSES } from './expenses';\nimport { GET_MONTHLY_REPORT } from './monthlyReport';\nimport { GET_CURRENT_PLANS } from './plans';\nimport { GET_CURRENT_TRANSFERS } from './transfers';\n\nexport const BudgetContext = createContext();\nexport const useBudget = () => useContext(BudgetContext);\n\nconst GET_BUDGETS = gql`\n  query GetBudgets {\n    budgets {\n      id\n      name\n      currentMonth {\n        month\n      }\n    }\n  }\n`;\n\nconst storageKey = 'LAST-CHOSEN-BUDGET-ID';\n\nexport function BudgetProvider({ children }) {\n  const [selectedBudget, setSelectedBudget] = useState(null);\n  const { loading, error, data } = useQuery(GET_BUDGETS);\n\n  useEffect(() => {\n    if (selectedBudget) {\n      sessionStorage.setItem(storageKey, selectedBudget.id);\n    }\n  }, [selectedBudget]);\n\n  useEffect(() => {\n    if (!selectedBudget && data && data.budgets) {\n      const lastChosenID = sessionStorage.getItem(storageKey);\n      const lastChosen = data.budgets.find(b => b.id === lastChosenID);\n      if (lastChosen) {\n        setSelectedBudget(lastChosen);\n      }\n    }\n  }, [data, selectedBudget]);\n\n  const value = {\n    selectedBudget,\n    setSelectedBudget,\n    loading,\n    error,\n    budgets: !loading && !error ? data.budgets : [],\n  };\n\n  if (error) {\n    console.error(error);\n  }\n  return (\n    <BudgetContext.Provider value={value}>{children}</BudgetContext.Provider>\n  );\n}\n\nBudgetProvider.propTypes = {\n  children: PropTypes.node,\n};\n\nconst CLOSE_CURRENT_MONTH = gql`\n  mutation closeMonth($budgetID: ID!) {\n    closeCurrentMonth(budgetID: $budgetID) {\n      id\n    }\n  }\n`;\n\nexport function useCloseCurrentMonth() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CLOSE_CURRENT_MONTH, {\n    refetchQueries: () => [\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth,\n        },\n      },\n      {\n        query: GET_CURRENT_PLANS,\n        variables: { budgetID: selectedBudget.id },\n      },\n      {\n        query: GET_CURRENT_TRANSFERS,\n        variables: { budgetID: selectedBudget.id },\n      },\n      {\n        query: GET_EXPENSES,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      },\n    ],\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n","import './Combobox.css';\n\nimport classnames from 'classnames';\nimport React, {\n  ButtonHTMLAttributes,\n  ChangeEvent,\n  ReactNode,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { Button, Dropdown, FormControl, InputGroup } from 'react-bootstrap';\n\nimport { Variant } from '../../bootstrap.typed';\n\ninterface Props {\n  disabled?: boolean;\n  allowedValues: { id: string; label: string }[];\n  _ref?: { current: any };\n  defaultValue?: string;\n  className?: string;\n  required?: boolean;\n  'aria-label': string;\n  variant?: Variant;\n  prependLabel?: string;\n}\n\nexport default function Combobox({\n  disabled,\n  allowedValues,\n  _ref,\n  defaultValue: defaultID,\n  className,\n  required,\n  'aria-label': ariaLabel,\n  variant = 'secondary',\n  prependLabel,\n}: Props) {\n  function valueByID(id: string) {\n    return allowedValues.find(v => v.id === id);\n  }\n\n  const valueByLabel = useCallback(\n    label => allowedValues.find(v => v.label === label),\n    [allowedValues]\n  );\n\n  const [show, setShow] = useState(false);\n\n  const defaultValue = defaultID ? valueByID(defaultID) : { label: '' };\n  const [filter, setFilter] = useState(defaultValue ? defaultValue.label : '');\n\n  const dropdownRef = useRef<HTMLDivElement>();\n\n  const filtered = filter\n    ? allowedValues.filter(v =>\n        v.label.toLowerCase().includes(filter.toLowerCase())\n      )\n    : allowedValues;\n\n  useEffect(() => {\n    if (_ref) {\n      _ref.current = { value: defaultID };\n    }\n  }, [_ref, defaultID]);\n\n  useEffect(() => {\n    function isClickedInside(event: MouseEvent) {\n      return (\n        !dropdownRef.current ||\n        dropdownRef.current!.contains(event.target as Node)\n      );\n    }\n\n    function handleClickOutside(event: MouseEvent) {\n      if (isClickedInside(event)) {\n        return;\n      }\n      setShow(false);\n      if (!valueByLabel(filter)) {\n        setFilter('');\n      }\n    }\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, [filter, valueByLabel]);\n\n  function onInputChange(e: ChangeEvent<HTMLInputElement>) {\n    const label = e.target.value;\n    setFilter(label);\n    const selected = valueByLabel(label);\n    if (selected && _ref) {\n      _ref.current = { value: selected.id };\n    } else {\n      setShow(true);\n    }\n  }\n\n  function onClick(id: string) {\n    const selected = valueByID(id);\n    if (selected) {\n      setFilter(selected.label);\n    }\n    if (_ref) {\n      _ref.current = { value: id };\n    }\n  }\n\n  return (\n    <Dropdown\n      // @ts-ignore\n      ref={dropdownRef}\n      show={show}\n      onToggle={isOpen => {\n        setShow(isOpen);\n      }}\n      className={classnames('combobox', className)}\n    >\n      <Dropdown.Toggle\n        // @ts-ignore\n        as={Toggle}\n      >\n        {({ className, ...props }: ButtonHTMLAttributes<HTMLButtonElement>) => (\n          <>\n            <FormControl\n              value={filter}\n              type='text'\n              onChange={onInputChange}\n              disabled={disabled}\n              required={required}\n              aria-label={ariaLabel}\n            />\n            <Button\n              variant={variant}\n              className={classnames(\n                'dropdown-toggle-split',\n                'no-arrow',\n                className\n              )}\n              tabIndex={-1}\n              disabled={disabled}\n              type='button'\n              {...props}\n            />\n          </>\n        )}\n      </Dropdown.Toggle>\n      <Dropdown.Menu>\n        {filtered.map(v => (\n          <Dropdown.Item\n            eventKey={v.id}\n            key={v.id}\n            onClick={() => onClick(v.id)}\n          >\n            {v.label}\n          </Dropdown.Item>\n        ))}\n      </Dropdown.Menu>\n    </Dropdown>\n  );\n}\n\ninterface ToggleProps {\n  children(props: object): ReactNode;\n}\n\nconst Toggle = forwardRef(({ children, ...props }: ToggleProps, ref) => {\n  return (\n    <InputGroup\n      // @ts-ignore\n      ref={ref}\n    >\n      {children(props)}\n    </InputGroup>\n  );\n});\n","import { IconProp } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport classnames from 'classnames';\nimport React, { MouseEvent } from 'react';\n\nimport { Size, Variant } from '../../bootstrap.typed';\n\ninterface Props {\n  icon: IconProp;\n  variant: Variant;\n  onClick(event: MouseEvent<HTMLButtonElement>): void;\n  className?: string;\n  borderless?: boolean;\n  size?: Size;\n}\n\nexport default function IconButton({\n  icon,\n  variant,\n  className,\n  onClick,\n  borderless,\n  size,\n  ...props\n}: Props) {\n  const prefix = borderless ? 'text' : 'btn';\n  const classes = classnames('btn', className, {\n    [`${prefix}-${variant}`]: variant,\n    [`${prefix}-${size}`]: size,\n    'bg-transparent': borderless,\n    'border-0': borderless,\n    'p-0': borderless,\n    'mx-1': borderless,\n  });\n\n  function handleOnClick(e: MouseEvent<HTMLButtonElement>) {\n    e.preventDefault();\n    onClick && onClick(e);\n  }\n\n  return (\n    <button className={classes} onClick={handleOnClick} {...props}>\n      <FontAwesomeIcon icon={icon} />\n    </button>\n  );\n}\n","import React, { ComponentType, MouseEvent, useState } from 'react';\nimport { Modal } from 'react-bootstrap';\n\ninterface ButtonProps {\n  onClick(event: MouseEvent<HTMLButtonElement>): void;\n}\n\ninterface ModalContentProps {\n  onHide(): void;\n}\n\ninterface Props {\n  button: ComponentType<ButtonProps>;\n  modalContent: ComponentType<ModalContentProps>;\n}\n\nexport default function OpenModalButton({\n  button: Button,\n  modalContent: ModalContent,\n  ...props\n}: Props) {\n  const [show, setShow] = useState<boolean>(false);\n  const onHide = () => setShow(false);\n  const onClick = () => setShow(true);\n\n  return (\n    <span>\n      <Button onClick={onClick} />\n      <Modal show={show} onHide={onHide} {...props}>\n        <ModalContent onHide={onHide} />\n      </Modal>\n    </span>\n  );\n}\n","import PropTypes from 'prop-types';\nimport React, { useContext, useState } from 'react';\n\nconst SBAdmin2Context = React.createContext();\n\nexport function SBAdmin2Provider({ user, logout, children }) {\n  const [sidebarToggled, setSidebarToggled] = useState(false);\n  return (\n    <SBAdmin2Context.Provider\n      value={{\n        sidebarToggled,\n        user,\n        logout,\n        toggleSidebar: () => setSidebarToggled(current => !current),\n      }}\n    >\n      {children}\n    </SBAdmin2Context.Provider>\n  );\n}\n\nSBAdmin2Provider.propTypes = {\n  children: PropTypes.node,\n  logout: PropTypes.func.isRequired,\n  user: PropTypes.shape({\n    picture: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport const useSBAdmin2 = () => useContext(SBAdmin2Context);\n","import React, { createContext, useContext } from 'react';\nimport { useSBAdmin2 } from './context';\nimport PropTypes from 'prop-types';\nimport { capitalize } from '../../util/capitalize';\n\nexport const DictionaryContext = createContext();\n\nexport function DictionaryProvider({ dictionaries, children }) {\n  const { user } = useSBAdmin2();\n  return (\n    <DictionaryContext.Provider value={dictionaries[user.locale]}>\n      {children}\n    </DictionaryContext.Provider>\n  );\n}\n\nDictionaryProvider.propTypes = {\n  dictionaries: PropTypes.object,\n  children: PropTypes.node,\n};\n\nexport const useDictionary = () => useContext(DictionaryContext);\n\nexport function withDictionary(prop, Component, readPropName) {\n  return props => {\n    readPropName = readPropName || `read${capitalize(prop)}`;\n    const readDict = props[readPropName];\n    const newProps = { ...props };\n    delete newProps[readPropName];\n    const dictionary = useDictionary();\n    if (readDict) {\n      newProps[prop] = readDict(dictionary);\n    }\n    return <Component {...newProps} />;\n  };\n}\n","export function capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { withDictionary } from '../../language';\n\nfunction PageHeader({ children, title }) {\n  return (\n    <h1 className='h3 mb-4 text-gray-800 d-flex justify-content-between'>\n      {title}\n      {children && <div>{children}</div>}\n    </h1>\n  );\n}\n\nPageHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default withDictionary('title', PageHeader);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PageHeader from './PageHeader';\n\nexport default function Page({ children }) {\n  return <div className=\"container-fluid\">{children}</div>;\n}\n\nPage.propTypes = {\n  children: PropTypes.node,\n};\n\nPage.Header = PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { withDictionary } from '../../language';\n\nfunction PanelTitle({ children, title, className }) {\n  const classNames = classnames(\n    'm-0',\n    'font-weight-bold',\n    'text-primary',\n    className\n  );\n  return (\n    <h6 className={classNames}>\n      {children}\n      {title}\n    </h6>\n  );\n}\n\nPanelTitle.propTypes = {\n  title: PropTypes.node.isRequired,\n  className: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default withDictionary('title', PanelTitle);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport PanelTitle from './PanelTitle';\nimport PanelHeader from './PanelHeader';\nimport PanelBody from './PanelBody';\n\nexport default function Panel({ children, className }) {\n  return (\n    <div className={classnames('card', 'shadow', 'mb-4', className)}>\n      {children}\n    </div>\n  );\n}\n\nPanel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n};\n\nPanel.Title = PanelTitle;\nPanel.Header = PanelHeader;\nPanel.Body = PanelBody;\n","import { IconProp } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport classnames from 'classnames';\nimport React, { ButtonHTMLAttributes } from 'react';\n\nimport { Size, Variant } from '../../bootstrap.typed';\n\ninterface Props {\n  icon: IconProp;\n  variant: Variant;\n  size?: Size;\n  className?: string;\n  disabled?: boolean;\n  _ref?: { current: any };\n  children?: string;\n}\n\nexport default function SplitButton({\n  icon,\n  variant,\n  size,\n  className,\n  disabled,\n  _ref,\n  children,\n  ...props\n}: Props & ButtonHTMLAttributes<HTMLButtonElement>) {\n  const classNames = classnames('btn', 'btn-icon-split', className, {\n    disabled,\n    [`btn-${size}`]: size,\n    [`btn-${variant}`]: variant,\n  });\n\n  return (\n    <button\n      className={classNames}\n      disabled={disabled}\n      ref={_ref}\n      aria-label={children}\n      {...props}\n    >\n      <span className='icon text-white-50'>\n        <FontAwesomeIcon icon={icon} />\n      </span>\n      <span className='text'>{children}</span>\n    </button>\n  );\n}\n","import React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport default function PanelHeader({ className, ...props }) {\n  return <div className={classnames(className, 'card-header')} {...props} />;\n}\n\nPanelHeader.propTypes = {\n  className: PropTypes.string,\n};\n","import React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport default function PanelBody({ className, children }) {\n  return <div className={classnames(className, 'card-body')}>{children}</div>;\n}\n\nPanelBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n};\n","import React from 'react';\nimport BootstrapTable, {\n  BootstrapTableProps,\n  Column,\n} from 'react-bootstrap-table-next';\n\nimport { withDictionary } from '../../language';\n\ninterface Dictionary {\n  [key: string]: string;\n}\n\ninterface Props<fieldIds extends string = string>\n  extends BootstrapTableProps<fieldIds> {\n  columnNames: Dictionary;\n}\n\nfunction Table({ columns, columnNames, ...props }: Props) {\n  return (\n    <BootstrapTable\n      bootstrap4\n      columns={addColumnNames(columns, columnNames)}\n      {...props}\n    />\n  );\n}\n\nfunction addColumnNames<fieldIds extends string = string>(\n  columns: Column<fieldIds>[],\n  dictionary: Dictionary\n) {\n  return columns.map(c => ({ ...c, text: dictionary[c.dataField] || '' }));\n}\n\nexport default withDictionary('columnNames', Table);\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { withDictionary } from '../../language';\nimport Panel from '../Panel/Panel';\nimport Table from '../Table/Table';\n\nfunction TablePanel({\n  title,\n  columns,\n  headerButtons,\n  panelClassName,\n  wrapper: Wrapper,\n  wrapperProps,\n  hiddenColumns,\n  data,\n  filters,\n  ...props\n}) {\n  const paddedFirstColumn = {\n    ...columns[0],\n    classes: 'pl-3',\n    headerClasses: 'pl-3',\n  };\n  const modifiedColumns = [\n    paddedFirstColumn,\n    ...columns.slice(1, columns.length),\n  ];\n  const wihtouHidden = modifiedColumns.map(c => ({\n    ...c,\n    hidden: hiddenColumns && hiddenColumns.some(hc => c.dataField === hc),\n  }));\n\n  function filtersMatch(row) {\n    return filters.every(f => f(row));\n  }\n\n  const filteredData = data.filter(row => filtersMatch(row));\n\n  return (\n    <Wrapper className={panelClassName} {...wrapperProps}>\n      <Wrapper.Header className='p-2 pl-3'>\n        <div className='d-flex justify-content-between align-items-center'>\n          <Wrapper.Title title={title} className='table-panel--title' />\n          <div>{headerButtons}</div>\n        </div>\n      </Wrapper.Header>\n\n      <Wrapper.Body className='p-0'>\n        <Table\n          classes='table-layout-auto table-sm m-0'\n          striped\n          hover\n          bordered={false}\n          columns={wihtouHidden}\n          data={filteredData}\n          {...props}\n        />\n      </Wrapper.Body>\n    </Wrapper>\n  );\n}\n\nTablePanel.propTypes = {\n  wrapper: PropTypes.elementType,\n  wrapperProps: PropTypes.object,\n  title: PropTypes.string.isRequired,\n  headerButtons: PropTypes.node,\n  columns: PropTypes.array.isRequired,\n  panelClassName: PropTypes.string,\n  hiddenColumns: PropTypes.arrayOf(PropTypes.string),\n  filters: PropTypes.arrayOf(PropTypes.func),\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nTablePanel.defaultProps = {\n  wrapper: Panel,\n  wrapperProps: {},\n  hiddenColumns: [],\n  filters: [],\n};\n\nexport default withDictionary('title', TablePanel);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Page from './components/Page/Page';\n\nexport function NotFoundPage() {\n  return (\n    <Page>\n      <div className=\"text-center\">\n        <div className=\"error mx-auto\" data-text=\"404\">\n          404\n        </div>\n        <p className=\"lead text-gray-800 mb-5\">Page Not Found</p>\n        <p className=\"text-gray-500 mb-0\">\n          It looks like you found a glitch in the matrix...\n        </p>\n        <Link to=\"/\">&larr; Back to Dashboard</Link>\n      </div>\n    </Page>\n  );\n}\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useLocation } from 'react-router';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nfunction oneOfRoutsMatchesLocation(sections, location) {\n  return sections.some(({ routes }) =>\n    routes.some(({ to }) => location.pathname === to)\n  );\n}\n\nexport default function SidebarCollapsibleLink({\n  name,\n  parent,\n  sections,\n  faIcon,\n}) {\n  const location = useLocation();\n  const isActive = oneOfRoutsMatchesLocation(sections, location);\n  const classNames = classnames('nav-item', { active: isActive });\n  const id = 'sidebar--' + name;\n  const iconClasses = classnames('fas', 'fa-fw', `fa-${faIcon}`);\n  return (\n    <li className={classNames}>\n      <span\n        className=\"nav-link collapsed\"\n        data-toggle=\"collapse\"\n        data-target={'#' + id}\n        aria-expanded=\"true\"\n        aria-controls={id}\n      >\n        <i className={iconClasses}></i>\n        <span>{name}</span>\n      </span>\n      <div id={id} className=\"collapse\" data-parent={'#' + parent}>\n        <div className=\"bg-white py-2 collapse-inner rounded\">\n          {sections.map(({ name, routes }) => {\n            return (\n              <React.Fragment key={name}>\n                <h6 className=\"collapse-header\">{name}:</h6>\n                {routes.map(({ to, label }) => {\n                  return (\n                    <NavLink key={label} className=\"collapse-item\" to={to}>\n                      {label}\n                    </NavLink>\n                  );\n                })}\n              </React.Fragment>\n            );\n          })}\n        </div>\n      </div>\n    </li>\n  );\n}\n\nSidebarCollapsibleLink.propTypes = {\n  faIcon: PropTypes.string,\n  name: PropTypes.string,\n  parent: PropTypes.string,\n  sections: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      routes: PropTypes.arrayOf(\n        PropTypes.shape({\n          label: PropTypes.string,\n          to: PropTypes.string,\n        })\n      ).isRequired,\n    })\n  ),\n};\n","import React from 'react';\nimport classnames from 'classnames';\nimport { NavLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport default function SidebarSimpleLink({ name, to, faIcon }) {\n  const iconClasses = classnames('fas', 'fa-fw', `fa-${faIcon}`);\n  return (\n    <li className=\"nav-item\">\n      <NavLink className=\"nav-link\" exact to={to}>\n        <i className={iconClasses} />\n        <span>{name}</span>\n      </NavLink>\n    </li>\n  );\n}\n\nSidebarSimpleLink.propTypes = {\n  faIcon: PropTypes.string,\n  name: PropTypes.string,\n  to: PropTypes.string,\n};\n","import React from 'react';\nimport SidebarCollapsibleLink from './SidebarCollapsibleLink';\nimport SidebarSimpleLink from './SidebarSimpleLink';\nimport PropTypes from 'prop-types';\n\nexport function SidebarGroup({ group }) {\n  return (\n    <>\n      <hr className=\"sidebar-divider my-1\" />\n      {group.name && <div className=\"sidebar-heading\">{group.name}</div>}\n      {group.entries.map(entry =>\n        entry.to !== undefined ? (\n          <SidebarSimpleLink key={entry.name} {...entry} />\n        ) : (\n          <SidebarCollapsibleLink\n            key={entry.name}\n            parent=\"accordionSidebar\"\n            {...entry}\n          />\n        )\n      )}\n    </>\n  );\n}\n\nSidebarGroup.propTypes = {\n  group: PropTypes.shape({\n    name: PropTypes.string,\n    entries: PropTypes.arrayOf(\n      PropTypes.oneOfType([\n        PropTypes.shape(SidebarCollapsibleLink.propTypes),\n        PropTypes.shape(SidebarSimpleLink.propTypes),\n      ])\n    ).isRequired,\n  }),\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { SidebarGroup } from './SidebarGroup';\nimport { useSBAdmin2 } from '../context';\nimport './Sidebar.css';\n\nexport default function Sidebar({ renderBrandName, renderBrandIcon, config }) {\n  const { sidebarToggled, toggleSidebar } = useSBAdmin2();\n  const classNames = classnames(\n    'navbar-nav',\n    'bg-gradient-primary',\n    'sidebar',\n    'sidebar-dark',\n    'accordion',\n    { toggled: sidebarToggled }\n  );\n  return (\n    <ul className={classNames} id=\"accordionSidebar\">\n      <Link\n        className=\"sidebar-brand d-flex align-items-center justify-content-center\"\n        to=\"/\"\n      >\n        <div className=\"sidebar-brand-icon rotate-n-15\">\n          {renderBrandIcon()}\n        </div>\n        <div className=\"sidebar-brand-text mx-3\">{renderBrandName()}</div>\n      </Link>\n\n      {config.map((group, idx) => (\n        <SidebarGroup key={group.name || idx} group={group} />\n      ))}\n\n      <hr className=\"sidebar-divider d-none d-md-block\" />\n\n      <div className=\"text-center d-none d-md-inline\">\n        <button\n          className=\"rounded-circle border-0\"\n          id=\"sidebarToggle\"\n          onClick={toggleSidebar}\n        ></button>\n      </div>\n    </ul>\n  );\n}\n\nSidebar.propTypes = {\n  config: PropTypes.arrayOf(SidebarGroup.propTypes.group).isRequired,\n  renderBrandIcon: PropTypes.func.isRequired,\n  renderBrandName: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { SBAdmin2Provider } from './context';\nimport PropTypes from 'prop-types';\nimport { Switch, Route } from 'react-router-dom';\nimport { NotFoundPage } from './NotFoundPage';\nimport Sidebar from './Sidebar/Sidebar';\nimport { DictionaryProvider } from './language';\n\nexport function SBAdmin2({\n  sidebarProps,\n  topbar,\n  user,\n  logout,\n  children,\n  dictionaries,\n  copyright,\n}) {\n  const Topbar = topbar;\n  return (\n    <SBAdmin2Provider user={user} logout={logout}>\n      <DictionaryProvider dictionaries={dictionaries}>\n        <div id=\"wrapper\">\n          <Sidebar {...sidebarProps} />\n          <div id=\"content-wrapper\" className=\"d-flex flex-column\">\n            <div id=\"content\">\n              <Topbar />\n              <Switch>\n                {children}\n                <Route component={NotFoundPage} />\n              </Switch>\n            </div>\n          </div>\n        </div>\n        <footer className=\"sticky-footer bg-white\">\n          <div className=\"container my-auto\">\n            <div className=\"copyright text-center my-auto\">\n              <span>Copyright &copy; {copyright}</span>\n            </div>\n          </div>\n        </footer>\n      </DictionaryProvider>\n    </SBAdmin2Provider>\n  );\n}\n\nSBAdmin2.propTypes = {\n  children: PropTypes.any,\n  copyright: PropTypes.string,\n  sidebarProps: PropTypes.shape(Sidebar.propTypes).isRequired,\n  topbar: PropTypes.elementType.isRequired,\n  user: PropTypes.shape({\n    locale: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    picture: PropTypes.string.isRequired,\n  }).isRequired,\n  logout: PropTypes.func.isRequired,\n  dictionaries: PropTypes.object,\n};\n","import React from 'react';\nimport { Form, Row, Col } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport function FormControl({ label, inline, ...props }) {\n  return (\n    <Form.Group className=\"mb-3\" as={!!inline && Row}>\n      <Form.Label column={!!inline}>{label}</Form.Label>\n      <FormControl.Input inline={inline} {...props} />\n    </Form.Group>\n  );\n}\n\nFormControl.Input = ({ inline, formData, feedback, children, ...props }) => {\n  const wrap = inline ? c => <Col sm={inline}>{c}</Col> : c => c;\n  const child = children || (\n    <Form.Control ref={formData} defaultValue={formData.default()} {...props} />\n  );\n  return wrap(\n    <>\n      {child}\n      <Form.Control.Feedback type=\"invalid\">{feedback}</Form.Control.Feedback>\n    </>\n  );\n};\n\nFormControl.propTypes = {\n  formData: PropTypes.shape({ current: PropTypes.any, init: PropTypes.any }),\n  feedback: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  inline: PropTypes.number,\n};\n\nFormControl.defaultProps = {\n  inline: 0,\n};\n","export const Variant = {\n  secondary: 'secondary',\n  primary: 'primary',\n  danger: 'danger',\n  success: 'success',\n  warning: 'warning',\n  white: 'white',\n};\n\nexport const Size = {\n  sm: 'sm',\n  lg: 'lg',\n};\n","import { faTrash } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react';\n\nimport { SplitButton, useDictionary } from '../sbadmin2';\nimport { Size, Variant } from '../sbadmin2/bootstrap';\n\nexport default function CancelButton(props) {\n  const { buttons } = useDictionary();\n  return (\n    <SplitButton\n      variant={Variant.secondary}\n      icon={faTrash}\n      size={Size.sm}\n      type='button'\n      {...props}\n    >\n      {buttons.cancel}\n    </SplitButton>\n  );\n}\n","import { faSave } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react';\n\nimport { SplitButton, useDictionary } from '../sbadmin2';\nimport { Size, Variant } from '../sbadmin2/bootstrap';\n\nexport default function SaveButton(props) {\n  const { buttons } = useDictionary();\n\n  return (\n    <SplitButton\n      icon={faSave}\n      size={Size.sm}\n      variant={Variant.primary}\n      type='submit'\n      {...props}\n    >\n      {buttons.save}\n    </SplitButton>\n  );\n}\n","import PropTypes from 'prop-types';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Form, Modal } from 'react-bootstrap';\n\nimport CancelButton from '../../common/CancelButton';\nimport SaveButton from '../../common/SaveButton';\n\nexport function FormInModal({ title, onHide, onSave, formData, children }) {\n  const [validated, setValidated] = useState(false);\n  const form = useRef();\n\n  useEffect(() => {\n    if (form.current) {\n      const firstInput = form.current.getElementsByTagName('input')[0];\n      if (firstInput) {\n        firstInput.focus();\n      }\n    }\n  }, []);\n\n  function handleSave(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    const isValid = form.current.checkValidity();\n    setValidated(true);\n    if (!isValid) {\n      return;\n    }\n    if (formData.changed()) {\n      const input = formData.value();\n      onSave(input);\n    }\n    onHide();\n    setValidated(false);\n  }\n\n  return (\n    <Form validated={validated} ref={form} onSubmit={handleSave}>\n      <Modal.Header\n        closeButton\n        className='m-0 font-weight-bold text-primary bg-light'\n      >\n        <Modal.Title>{title}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>{children}</Modal.Body>\n      <Modal.Footer className=' bg-light'>\n        <CancelButton onClick={onHide} />\n        <SaveButton onClick={handleSave} />\n      </Modal.Footer>\n    </Form>\n  );\n}\n\nFormInModal.propTypes = {\n  children: PropTypes.node.isRequired,\n  onHide: PropTypes.func.isRequired,\n  onSave: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  formData: PropTypes.any.isRequired,\n};\n","import './ContextSwitcher.css';\n\nimport classNames from 'classnames';\nimport classnames from 'classnames';\nimport React, { forwardRef } from 'react';\nimport { Button, ButtonGroup, Dropdown, InputGroup } from 'react-bootstrap';\n\nexport default function ContextSwitcher({\n  className,\n  allowedValues,\n  onChange,\n  label,\n  value,\n  variant,\n  displayBg = 'light',\n  labelBg,\n  showLabel = true,\n  size,\n}) {\n  const labelClasses = classnames('border-0', { [`bg-${labelBg}`]: labelBg });\n\n  return (\n    <Dropdown\n      className={classNames(\n        'context-switcher',\n        'input-group',\n        'align-items-stretch',\n        className,\n        { [`input-group-${size}`]: size }\n      )}\n    >\n      {showLabel && (\n        <InputGroup.Prepend className='context-switcher__label d-flex align-items-stretch'>\n          <InputGroup.Text as='label' className={classnames(labelClasses)}>\n            {label}\n          </InputGroup.Text>\n        </InputGroup.Prepend>\n      )}\n\n      <Dropdown.Toggle as={Toggle} append={showLabel} size={size}>\n        {({ className, ...props }) => (\n          <>\n            <Dropdown.Menu>\n              {allowedValues.map(v => (\n                <Dropdown.Item onClick={() => onChange(v.id)} key={v.id}>\n                  {v.label}\n                </Dropdown.Item>\n              ))}\n            </Dropdown.Menu>\n            <InputGroup.Text\n              className={`bg-${displayBg} border-0 context_switcher__context-display text-dark`}\n              aria-label={label}\n            >\n              {value}\n            </InputGroup.Text>\n            <Button\n              variant={variant}\n              className={classNames(\n                'dropdown-toggle-split no-arrow ',\n                className\n              )}\n              {...props}\n            />\n          </>\n        )}\n      </Dropdown.Toggle>\n    </Dropdown>\n  );\n}\n\nconst Toggle = forwardRef(({ children, append, size, ...props }, ref) => {\n  return (\n    <ButtonGroup\n      className={classnames('context-switcher__toggle-group', {\n        'input-group-append': append,\n        [`btn-group-${size}`]: size,\n      })}\n      ref={ref}\n    >\n      {children(props)}\n    </ButtonGroup>\n  );\n});\n","import classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { Size, Variant } from '../bootstrap';\n\nexport default function Spinner({ size, variant }) {\n  const classNames = classnames('spinner-border', {\n    [`spinner-border-${size}`]: size,\n    [`text-${variant}`]: variant,\n  });\n  return (\n    <div className={classNames} role='status'>\n      <span className='sr-only'>Loading...</span>\n    </div>\n  );\n}\n\nSpinner.propTypes = {\n  size: PropTypes.oneOf(Object.keys(Size)),\n  variant: PropTypes.oneOf(Object.keys(Variant)),\n};\n","import { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport React from 'react';\n\nimport Month from '../../model/Month';\nimport { useMonth } from '../context/Month';\nimport { useBudget } from '../gql/budget';\nimport { useDictionary } from '../sbadmin2';\nimport ContextSwitcher from '../sbadmin2/components/ContextSwitcher/ContextSwitcher';\nimport Spinner from '../sbadmin2/utilities/Spinner';\n\nconst GET_AVAILABLE_REPORTS = gql`\n  query availableReports($budgetID: ID!) {\n    availableReports(budgetID: $budgetID)\n  }\n`;\n\nexport default function MonthSwitcher(props) {\n  const { selectedBudget } = useBudget();\n  const { selectedMonth, setSelectedMonth } = useMonth();\n  const { months } = useDictionary();\n  const { loading, error, data } = useQuery(GET_AVAILABLE_REPORTS, {\n    variables: {\n      budgetID: selectedBudget.id,\n    },\n  });\n\n  let value;\n  let allowedValues = [];\n  if (loading) {\n    value = <Spinner size='sm' variant='secondary' />;\n  } else if (error) {\n    value = <i className='fas fa-fw fa-exclamation-triangle text-secondary' />;\n  } else {\n    allowedValues = data.availableReports\n      .sort()\n      .reverse()\n      .map(m => {\n        const parsed = Month.parse(m);\n        const label = `${months[parsed.month - 1]} ${parsed.year}`;\n        return { id: m, label };\n      });\n\n    const parsed = Month.parse(selectedMonth);\n    value = `${months[parsed.month - 1]} ${parsed.year}`;\n  }\n  return (\n    <ContextSwitcher\n      {...props}\n      value={value}\n      allowedValues={allowedValues}\n      onChange={month => setSelectedMonth(month)}\n      displayBg='white'\n      label='Month'\n      showLabel={false}\n      variant='secondary'\n      size='sm'\n    />\n  );\n}\n","import { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react';\n\nimport { IconButton } from '../sbadmin2';\nimport { Size, Variant } from '../sbadmin2/bootstrap';\n\nexport default function CreateButton(props) {\n  return (\n    <IconButton\n      icon={faPlus}\n      size={Size.sm}\n      variant={Variant.primary}\n      type='button'\n      {...props}\n    />\n  );\n}\n","import * as math from 'mathjs';\n\nexport default class Amount {\n  static parse(string) {\n    if (string === null || string === '') {\n      return null;\n    }\n    const number = math.evaluate(string.replace(/,/g, '.'));\n    return Math.round(number * 100);\n  }\n\n  static isValid(string) {\n    if (string === null || string === '') {\n      return true;\n    }\n\n    try {\n      math.parse(string.replace(/,/g, '.'));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  static zero() {\n    return 0;\n  }\n\n  static format(amount, kSeparator = true) {\n    if (amount === null) {\n      return null;\n    }\n    const fixed = (amount / 100).toFixed(2);\n    if (!kSeparator) {\n      return fixed;\n    }\n    var parts = fixed.split('.');\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\n    return parts.join('.');\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Spinner from '../sbadmin2/utilities/Spinner';\n\nfunction ErrorMessageList({ errorMessage, subErrors }) {\n  return (\n    <>\n      {errorMessage}\n      <ul>\n        {subErrors.map((e, idx) => (\n          <li key={idx}>{e}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\nErrorMessageList.propTypes = {\n  errorMessage: PropTypes.string.isRequired,\n  subErrors: PropTypes.arrayOf(PropTypes.string),\n};\n\nfunction ErrorMessage({ error }) {\n  const subErrors = error.networkError\n    ? error.networkError.result\n      ? error.networkError.result.errors\n      : [`${error.networkError}`]\n    : error.graphQLErrors.map(e => `${e.path.join('.')}: ${e.message}`);\n  console.error(error);\n  return (\n    <div className='text-danger'>\n      <i className='fas fa-fw fa-exclamation-triangle' />\n      <ErrorMessageList errorMessage={error.message} subErrors={subErrors} />\n    </div>\n  );\n}\n\nErrorMessage.propTypes = {\n  error: PropTypes.shape({\n    networkError: PropTypes.shape({\n      result: PropTypes.shape({\n        errors: PropTypes.array,\n      }),\n    }),\n    graphQLErrors: PropTypes.arrayOf(\n      PropTypes.shape({\n        path: PropTypes.arrayOf(PropTypes.string),\n        message: PropTypes.string,\n      })\n    ),\n    message: PropTypes.string,\n  }),\n};\n\nexport function WithQuery({ query, showError, children, ...props }) {\n  const { loading, error } = query;\n  return loading ? (\n    <Spinner {...props} />\n  ) : error ? (\n    showError && <ErrorMessage error={error} />\n  ) : (\n    children(query)\n  );\n}\n\nWithQuery.propTypes = {\n  children: PropTypes.func.isRequired,\n  query: PropTypes.shape({\n    loading: PropTypes.bool.isRequired,\n    error: PropTypes.any,\n  }),\n  showError: PropTypes.bool,\n};\n\nWithQuery.defaultProps = {\n  showError: true,\n};\n","import React from 'react';\nimport { Form, Row, Col } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport function InlineFormControl({ label, size, feedback, children }) {\n  return (\n    <Form.Group as={Row}>\n      <Form.Label column>{label}</Form.Label>\n      <Col sm={size}>\n        {children}\n        {feedback && (\n          <Form.Control.Feedback type=\"invalid\">\n            {feedback}\n          </Form.Control.Feedback>\n        )}\n      </Col>\n    </Form.Group>\n  );\n}\n\nInlineFormControl.propTypes = {\n  children: PropTypes.element,\n  feedback: PropTypes.string,\n  label: PropTypes.string.isRequired,\n  size: PropTypes.number,\n};\n\nInlineFormControl.defaultProps = {\n  inline: 0,\n};\n","import { useState, useRef } from 'react';\n\nfunction simpleFormData({ $init, $process, $default }, getRoot) {\n  const process = $process || (v => v);\n  const formData = { current: null };\n  const _default =\n    typeof $default === 'function' ? () => $default(getRoot()) : () => $default;\n\n  formData.value = () => {\n    if (formData.current === null) {\n      return null;\n    }\n    return process(formData.current.value);\n  };\n\n  formData.changed = () => {\n    if (formData.current === null) {\n      return $init !== null;\n    }\n    return formData.current.value !== $init;\n  };\n\n  formData.default = () =>\n    $init !== null && $init !== undefined ? $init : _default();\n\n  formData.init = () => $init;\n\n  return formData;\n}\n\nfunction arrayFormData({ $model, $init }, rerender, getRoot) {\n  const formData = $init.map(v => createFormData($model(v), rerender), getRoot);\n  formData._originalPush = formData.push;\n\n  formData.value = () => {\n    return formData.map(v => v.value());\n  };\n\n  formData.changed = () => {\n    return formData.length !== $init.length || formData.some(v => v.changed());\n  };\n\n  formData.push = v => {\n    formData._originalPush(createFormData($model(v), rerender));\n    rerender();\n  };\n\n  formData.removeAt = idx => {\n    formData.splice(idx, 1);\n    rerender();\n  };\n\n  return formData;\n}\n\nfunction compositeFormData({ $includeAllValues, ...model }, rerender, getRoot) {\n  const formData = Object.keys(model).reduce(\n    (acc, key) => ({\n      ...acc,\n      [key]: createFormData(model[key], rerender, getRoot),\n    }),\n    {}\n  );\n\n  formData.changed = () => {\n    return Object.keys(model).some(k => formData[k].changed());\n  };\n\n  formData.value = () => {\n    return Object.keys(model).reduce((acc, key) => {\n      if (!formData[key].changed() && !$includeAllValues) {\n        return acc;\n      }\n      return { ...acc, [key]: formData[key].value() };\n    }, {});\n  };\n\n  return formData;\n}\n\nfunction createFormData(model, rerender, getRoot) {\n  if (Object.prototype.hasOwnProperty.call(model, '$init')) {\n    if (Object.prototype.hasOwnProperty.call(model, '$model')) {\n      return arrayFormData(model, rerender, getRoot);\n    }\n    return simpleFormData(model, getRoot);\n  }\n  return compositeFormData(model, rerender, getRoot);\n}\n\nexport function useFormData(model) {\n  const [, setValue] = useState(false);\n  const rerender = () => setValue(v => !v);\n  let formData,\n    getRoot = () => formData;\n  formData = createFormData(model, rerender, getRoot);\n  const ref = useRef(formData);\n  return ref.current;\n}\n","import gql from 'graphql-tag';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { useBudget } from './budget';\n\nconst GET_CATEGORIES = gql`\n  query GetCategories($budgetID: ID!) {\n    categories(budgetID: $budgetID) {\n      id\n      name\n      envelope {\n        id\n        name\n      }\n      description\n    }\n  }\n`;\n\nconst CREATE_CATEGORY = gql`\n  mutation CreateCategory($budgetID: ID!, $input: CategoryInput!) {\n    createCategory(budgetID: $budgetID, in: $input) {\n      id\n      name\n      envelope {\n        id\n        name\n      }\n      description\n    }\n  }\n`;\n\nconst UPDATE_CATEGORY = gql`\n  mutation UpdateCategory($budgetID: ID!, $id: ID!, $input: CategoryUpdate!) {\n    updateCategory(budgetID: $budgetID, id: $id, in: $input) {\n      id\n      name\n      envelope {\n        id\n        name\n      }\n      description\n    }\n  }\n`;\n\nexport function useCreateCategory() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_CATEGORY, {\n    update: (cache, { data: { createCategory } }) => {\n      const { categories } = cache.readQuery({\n        query: GET_CATEGORIES,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_CATEGORIES,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          categories: categories.concat([createCategory]),\n        },\n      });\n    },\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useUpdateCategory() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_CATEGORY);\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useGetCategories() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_CATEGORIES, {\n    variables: { budgetID: selectedBudget.id },\n  });\n}\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from 'react-bootstrap';\nimport Amount from '../../model/Amount';\n\nexport function AmountInput({ placeholder, formData }) {\n  const [isValid, setIsValid] = useState(false);\n  const [value, setValue] = useState(formData.default() || '');\n  useEffect(() => {\n    formData.current = { value };\n  }, [formData, value]);\n  function onChange(e) {\n    const newValue = e.target.value;\n    setValue(newValue);\n    setIsValid(Amount.isValid(newValue));\n  }\n  return (\n    <Form.Control\n      required\n      type=\"text\"\n      placeholder={placeholder}\n      value={value}\n      onChange={onChange}\n      isValid={isValid}\n    />\n  );\n}\n\nAmountInput.propTypes = {\n  formData: PropTypes.shape({\n    default: PropTypes.func.isRequired,\n    current: PropTypes.shape({ value: PropTypes.string }),\n  }),\n  placeholder: PropTypes.string,\n};\n","import { faMinus, faPlus } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Col, Form, Row } from 'react-bootstrap';\n\nimport { useGetCategories } from '../gql/categories';\nimport { WithQuery } from '../gql/WithQuery';\nimport { Combobox, IconButton, useDictionary } from '../sbadmin2';\nimport { Size, Variant } from '../sbadmin2/bootstrap';\nimport { AmountInput } from './AmountInput';\n\nexport function CategoriesInput({ formData }) {\n  const query = useGetCategories();\n  const { expenses } = useDictionary();\n  return (\n    <WithQuery query={query}>\n      {({ data }) => (\n        <>\n          <small className='d-flex align-items-center mb-3'>\n            {expenses.modal.labels.categories}\n            <IconButton\n              icon={faPlus}\n              variant={Variant.primary}\n              size={Size.sm}\n              onClick={() =>\n                formData.push({\n                  category: { id: null },\n                  amount: null,\n                })\n              }\n              type='button'\n              borderless\n            />\n          </small>\n          {formData.map((categoryFormData, idx) => (\n            <Form.Group\n              as={Row}\n              key={categoryFormData.categoryID.init() || idx}\n              className='d-flex align-items-center'\n            >\n              <Col sm={6}>\n                <Combobox\n                  _ref={categoryFormData.categoryID}\n                  defaultValue={categoryFormData.categoryID.init()}\n                  allowedValues={data.categories.map(({ id, name }) => ({\n                    id,\n                    label: name,\n                  }))}\n                  required\n                />\n              </Col>\n              <Col className='pr-0'>\n                <AmountInput\n                  placeholder={expenses.modal.labels.amount}\n                  formData={categoryFormData.amount}\n                />\n              </Col>\n              <Col sm={1} className='px-0'>\n                <IconButton\n                  icon={faMinus}\n                  variant={Variant.danger}\n                  size={Size.sm}\n                  onClick={() => formData.removeAt(idx)}\n                  type='button'\n                  borderless\n                />\n              </Col>\n            </Form.Group>\n          ))}\n        </>\n      )}\n    </WithQuery>\n  );\n}\n\nCategoriesInput.propTypes = {\n  formData: PropTypes.array.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Amount from '../../model/Amount';\nimport Month from '../../model/Month';\nimport { useGetAccounts } from '../gql/accounts';\nimport { useBudget } from '../gql/budget';\nimport { WithQuery } from '../gql/WithQuery';\nimport { useDictionary } from '../sbadmin2';\nimport { Combobox } from '../sbadmin2';\nimport { FormControl } from '../sbadmin2/utilities/FormControl';\nimport { FormInModal } from '../sbadmin2/utilities/FormInModal';\nimport { InlineFormControl } from '../sbadmin2/utilities/InlineFormControl';\nimport { useFormData } from '../sbadmin2/utilities/useFormData';\nimport { CategoriesInput } from './CategoriesInput';\n\nexport function ExpenseModal({ account, init, ...props }) {\n  const { selectedBudget } = useBudget();\n  const { expenses } = useDictionary();\n  const accountsQuery = useGetAccounts();\n  const formData = useFormData({\n    title: { $init: init.title },\n    date: { $init: init.date },\n    accountID: {\n      $init: init.account.id,\n      $default: account && account.id,\n    },\n    categories: {\n      $init: init.categories,\n      $model: c => ({\n        categoryID: { $init: c.category.id },\n        amount: {\n          $init: Amount.format(c.amount, false),\n          $process: Amount.parse,\n        },\n        $includeAllValues: true,\n      }),\n    },\n  });\n  const month = Month.parse(selectedBudget.currentMonth.month);\n  const first = month.firstDay();\n  const last = month.lastDay();\n\n  return (\n    <FormInModal formData={formData} {...props}>\n      <WithQuery query={accountsQuery}>\n        {({ data: accountsData }) => (\n          <>\n            <FormControl\n              label={expenses.modal.labels.title}\n              inline={10}\n              formData={formData.title}\n              feedback='Provide name'\n              required\n            />\n            <FormControl\n              label={expenses.modal.labels.date}\n              inline={10}\n              formData={formData.date}\n              feedback='Provide date'\n              type='date'\n              required\n              min={first.format()}\n              max={last.format()}\n            />\n            <InlineFormControl label={expenses.modal.labels.account} size={9}>\n              <Combobox\n                _ref={formData.accountID}\n                defaultValue={formData.accountID.default()}\n                allowedValues={accountsData.accounts.map(({ id, name }) => ({\n                  id,\n                  label: name,\n                }))}\n                disabled={!!account}\n                required\n              />\n            </InlineFormControl>\n            <CategoriesInput formData={formData.categories} />\n          </>\n        )}\n      </WithQuery>\n    </FormInModal>\n  );\n}\n\nExpenseModal.propTypes = {\n  account: PropTypes.shape({\n    id: PropTypes.string,\n  }),\n  init: PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    date: PropTypes.string,\n    account: PropTypes.shape({\n      id: PropTypes.string,\n    }),\n    categories: PropTypes.array,\n  }),\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport CreateButton from '../common/CreateButton';\nimport { useCreateExpense } from '../gql/expenses';\nimport { OpenModalButton } from '../sbadmin2';\nimport { useDictionary } from '../sbadmin2';\nimport { ExpenseModal } from './ExpenseModal';\n\nexport function CreateExpenseButton({ account }) {\n  const [createExpense] = useCreateExpense();\n  const { expenses } = useDictionary();\n\n  return (\n    <OpenModalButton\n      button={props => <CreateButton {...props} />}\n      modalContent={props => (\n        <ExpenseModal\n          init={{\n            name: null,\n            account: {},\n            date: null,\n            categories: [],\n          }}\n          account={account}\n          title={expenses.modal.createTitle}\n          onSave={createExpense}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nCreateExpenseButton.propTypes = {\n  account: PropTypes.any,\n};\n","import { faEdit, faTrash } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react';\n\nimport { IconButton, OpenModalButton } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\n\nexport default function ListAction({ disabled, variant, ...props }) {\n  return (\n    <IconButton\n      variant={disabled ? Variant.secondary : variant}\n      borderless\n      disabled={disabled}\n      {...props}\n    />\n  );\n}\n\nListAction.Edit = props => (\n  <ListAction icon={faEdit} variant={Variant.primary} {...props} />\n);\n\nListAction.EditInModal = ({\n  modalComponent: Modal,\n  dictionary,\n  update,\n  init,\n  ...buttonProps\n}) => (\n  <OpenModalButton\n    button={props => <ListAction.Edit {...buttonProps} {...props} />}\n    modalContent={props => (\n      <Modal\n        init={init}\n        title={dictionary.modal.editTitle}\n        onSave={input => update(init.id, input)}\n        {...props}\n      />\n    )}\n  />\n);\n\nListAction.Delete = props => (\n  <ListAction icon={faTrash} variant={Variant.danger} {...props} />\n);\n","import React from 'react';\n\nimport { useMonth } from '../context/Month';\nimport { useDictionary } from '../sbadmin2';\nimport ListAction from './ListAction';\n\nexport default function ListActions({\n  row,\n  monthScopedResource,\n  dictionaryName,\n  modalComponent,\n  updateHook,\n  deletehook,\n}) {\n  const { currentMonth, selectedMonth } = useMonth();\n  const dictionary = useDictionary()[dictionaryName];\n  const [updateMutation] = updateHook();\n  const [deleteMutation] = deletehook();\n  const disabled = monthScopedResource && currentMonth !== selectedMonth;\n  return (\n    <span>\n      <ListAction.EditInModal\n        modalComponent={modalComponent}\n        init={row}\n        update={updateMutation}\n        dictionary={dictionary}\n        disabled={disabled}\n      />\n      <ListAction.Delete\n        onClick={() => deleteMutation(row.id)}\n        disabled={disabled}\n      />\n    </span>\n  );\n}\n","import { faSyncAlt } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react';\n\nimport { IconButton } from '../sbadmin2';\nimport { Size, Variant } from '../sbadmin2/bootstrap';\n\nexport default function RefreshButton(props) {\n  return (\n    <IconButton\n      icon={faSyncAlt}\n      size={Size.sm}\n      variant={Variant.secondary}\n      type='button'\n      {...props}\n    />\n  );\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport RefreshButton from '../common/RefreshButton';\nimport { WithQuery } from '../gql/WithQuery';\nimport { TablePanel } from '../sbadmin2';\n\nexport function QueryTablePanel({ query, buttons, getData, ...props }) {\n  return (\n    <WithQuery query={query} size='sm' showError={false}>\n      {({ refetch, data }) => (\n        <TablePanel\n          headerButtons={\n            <>\n              <RefreshButton onClick={() => refetch()} className='mr-1' />\n              {buttons}\n            </>\n          }\n          data={getData(data)}\n          {...props}\n        />\n      )}\n    </WithQuery>\n  );\n}\n\nQueryTablePanel.propTypes = {\n  buttons: PropTypes.node,\n  getData: PropTypes.func.isRequired,\n  query: PropTypes.shape({\n    data: PropTypes.any,\n    refetch: PropTypes.func,\n  }).isRequired,\n};\n","import React from 'react';\n\nimport Amount from '../../model/Amount';\nimport ListActions from '../common/ListActions';\nimport { useMonth } from '../context/Month';\nimport {\n  useDeleteExpense,\n  useGetExpenses,\n  useUpdateExpense,\n} from '../gql/expenses';\nimport { QueryTablePanel } from '../gql/QueryTablePanel';\nimport { ExpenseModal } from './ExpenseModal';\n\nconst columns = [\n  { dataField: 'title' },\n  { dataField: 'date', sort: true },\n  {\n    dataField: 'account',\n    formatter: a => a.name,\n  },\n  {\n    dataField: 'totalAmount',\n    formatter: Amount.format,\n    align: 'right',\n    headerAlign: 'right',\n  },\n  {\n    dataField: 'actions',\n    isDummyColumn: true,\n    formatter: (_, row) => (\n      <ListActions\n        row={row}\n        monthScopedResource\n        modalComponent={ExpenseModal}\n        dictionaryName='expenses'\n        updateHook={useUpdateExpense}\n        deletehook={useDeleteExpense}\n      />\n    ),\n    style: {\n      whiteSpace: 'nowrap',\n      width: '1%',\n    },\n  },\n];\n\nconst rowClasses = (row, rowIndex) => {\n  return rowIndex % 2 === 0 && 'table-striped';\n};\n\nconst expandRow = {\n  className: 'background-color-white',\n  renderer: row => (\n    <table className='table table-sm mb-0'>\n      <tbody>\n        {row.categories.map((category, idx) => (\n          <tr key={idx}>\n            <td className='pl-3'>{category.category.name}</td>\n            <td>{Amount.format(category.amount)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  ),\n};\n\nconst defaultSorted = [\n  {\n    dataField: 'date',\n    order: 'desc',\n  },\n];\n\nexport function ExpensesTablePanel({\n  readTitle,\n  createButton,\n  accountFilter,\n  ...props\n}) {\n  const { selectedMonth } = useMonth();\n  const query = useGetExpenses(selectedMonth);\n\n  let filters = [];\n  if (accountFilter) {\n    filters.push(row => row.account.id === accountFilter);\n  }\n\n  return (\n    <QueryTablePanel\n      {...props}\n      query={query}\n      getData={d => d.monthlyReport.expenses}\n      buttons={createButton}\n      columns={columns}\n      keyField='id'\n      expandRow={expandRow}\n      rowClasses={rowClasses}\n      striped={false}\n      readTitle={readTitle}\n      readColumnNames={d => d.expenses.table.columns}\n      defaultSorted={defaultSorted}\n      filters={filters}\n    />\n  );\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Amount from '../../model/Amount';\nimport Month from '../../model/Month';\nimport { useGetAccounts } from '../gql/accounts';\nimport { useBudget } from '../gql/budget';\nimport { WithQuery } from '../gql/WithQuery';\nimport { Combobox, useDictionary } from '../sbadmin2';\nimport { FormControl } from '../sbadmin2/utilities/FormControl';\nimport { FormInModal } from '../sbadmin2/utilities/FormInModal';\nimport { InlineFormControl } from '../sbadmin2/utilities/InlineFormControl';\nimport { useFormData } from '../sbadmin2/utilities/useFormData';\n\nexport function TransferModal({ toAccount, fromAccount, init, ...props }) {\n  const { selectedBudget } = useBudget();\n  const { transfers } = useDictionary();\n  const query = useGetAccounts();\n  const formData = useFormData({\n    title: { $init: init.title },\n    date: { $init: init.date },\n    amount: {\n      $init: Amount.format(init.amount, false),\n      $process: Amount.parse,\n    },\n    fromAccountID: {\n      $init: init.fromAccount && init.fromAccount.id,\n      $process: v => (v === '' ? null : v),\n      $default: fromAccount && fromAccount.id,\n    },\n    toAccountID: {\n      $init: init.toAccount.id,\n      $default: toAccount && toAccount.id,\n    },\n  });\n\n  const month = Month.parse(selectedBudget.currentMonth.month);\n  const first = month.firstDay();\n  const last = month.lastDay();\n  return (\n    <FormInModal formData={formData} {...props}>\n      <WithQuery query={query}>\n        {({ data }) => (\n          <>\n            <FormControl\n              required\n              label={transfers.modal.labels.title}\n              inline={10}\n              formData={formData.title}\n              feedback='Provide title'\n            />\n            <FormControl\n              label={transfers.modal.labels.date}\n              inline={10}\n              formData={formData.date}\n              feedback='Provide date'\n              type='date'\n              required\n              min={first.format()}\n              max={last.format()}\n            />\n            <FormControl\n              inline={10}\n              label={transfers.modal.labels.amount}\n              feedback='Provide amount'\n              type='number'\n              required\n              formData={formData.amount}\n              step='0.01'\n            />\n            <InlineFormControl\n              size={10}\n              label={transfers.modal.labels.fromAccount}\n            >\n              <Combobox\n                allowedValues={data.accounts.map(({ id, name }) => ({\n                  id,\n                  label: name,\n                }))}\n                _ref={formData.fromAccountID}\n                defaultValue={formData.fromAccountID.default()}\n                disabled={!!fromAccount}\n              />\n            </InlineFormControl>\n            <InlineFormControl\n              size={10}\n              label={transfers.modal.labels.toAccount}\n            >\n              <Combobox\n                allowedValues={data.accounts.map(({ id, name }) => ({\n                  id,\n                  label: name,\n                }))}\n                _ref={formData.toAccountID}\n                defaultValue={formData.toAccountID.default()}\n                disabled={!!toAccount}\n              />\n            </InlineFormControl>\n          </>\n        )}\n      </WithQuery>\n    </FormInModal>\n  );\n}\n\nTransferModal.propTypes = {\n  fromAccount: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }),\n  init: PropTypes.shape({\n    title: PropTypes.string,\n    date: PropTypes.string,\n    amount: PropTypes.number,\n    fromAccount: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n    }),\n    toAccount: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n    }),\n  }),\n  toAccount: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }),\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport CreateButton from '../common/CreateButton';\nimport { useCreateTransfer } from '../gql/transfers';\nimport { OpenModalButton } from '../sbadmin2';\nimport { useDictionary } from '../sbadmin2';\nimport { TransferModal } from './TransferModal';\n\nexport function CreateTransferButton({ toAccount, fromAccount }) {\n  const [createTransfer] = useCreateTransfer();\n  const { transfers } = useDictionary();\n  return (\n    <OpenModalButton\n      button={props => <CreateButton {...props} />}\n      modalContent={props => (\n        <TransferModal\n          init={{\n            title: null,\n            fromAccount: { id: null },\n            toAccount: { id: null },\n            amount: null,\n            date: null,\n          }}\n          title={transfers.modal.createTitle}\n          onSave={createTransfer}\n          toAccount={toAccount}\n          fromAccount={fromAccount}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nCreateTransferButton.propTypes = {\n  fromAccount: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }),\n  toAccount: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }),\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Amount from '../../model/Amount';\nimport ListActions from '../common/ListActions';\nimport { useMonth } from '../context/Month';\nimport { QueryTablePanel } from '../gql/QueryTablePanel';\nimport {\n  useDeleteTranfer,\n  useGetTransfers,\n  useUpdateTransfer,\n} from '../gql/transfers';\nimport { TransferModal } from './TransferModal';\n\nconst columns = [\n  { dataField: 'title' },\n  {\n    dataField: 'fromAccount',\n    formatter: a => a && a.name,\n  },\n  {\n    dataField: 'toAccount',\n    formatter: a => a.name,\n  },\n  {\n    dataField: 'amount',\n    align: 'right',\n    headerAlign: 'right',\n    formatter: Amount.format,\n  },\n  {\n    dataField: 'date',\n    align: 'right',\n    headerAlign: 'right',\n  },\n  {\n    dataField: 'actions',\n    isDummyColumn: true,\n    formatter: (cell, row) => (\n      <ListActions\n        row={row}\n        monthScopedResource\n        modalComponent={TransferModal}\n        dictionaryName='transfers'\n        updateHook={useUpdateTransfer}\n        deletehook={useDeleteTranfer}\n      />\n    ),\n    style: {\n      whiteSpace: 'nowrap',\n      width: '1%',\n    },\n  },\n];\n\nexport function TransfersTablePanel({\n  toAccountFilter,\n  fromAccountFilter,\n  createButton,\n  ...props\n}) {\n  const { selectedMonth } = useMonth();\n  const query = useGetTransfers(selectedMonth);\n  let filters = [];\n  if (toAccountFilter) {\n    filters.push(row => row.toAccount.id === toAccountFilter);\n  }\n  if (fromAccountFilter) {\n    filters.push(\n      row => row.fromAccount && row.fromAccount.id === fromAccountFilter\n    );\n  }\n  return (\n    <QueryTablePanel\n      {...props}\n      query={query}\n      getData={data => data.monthlyReport.transfers}\n      buttons={createButton}\n      columns={columns}\n      keyField='id'\n      readColumnNames={d => d.transfers.table.columns}\n      filters={filters}\n    />\n  );\n}\n\nTransfersTablePanel.propTypes = {\n  createButton: PropTypes.node.isRequired,\n  fromAccountFilter: PropTypes.string,\n  toAccountFilter: PropTypes.string,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormControl, FormInModal, useDictionary } from '../sbadmin2';\nimport { useFormData } from '../sbadmin2/utilities/useFormData';\n\nexport function AccountModal({ init, ...props }) {\n  const { accounts } = useDictionary();\n  const formData = useFormData({\n    name: { $init: init.name },\n  });\n  return (\n    <FormInModal formData={formData} {...props}>\n      <FormControl\n        label={accounts.modal.labels.name}\n        inline={10}\n        formData={formData.name}\n        feedback=\"Provide name\"\n      />\n    </FormInModal>\n  );\n}\n\nAccountModal.propTypes = {\n  init: PropTypes.shape({ name: PropTypes.string }).isRequired,\n};\n","import React from 'react';\n\nimport CreateButton from '../common/CreateButton';\nimport { useCreateAccount } from '../gql/accounts';\nimport { OpenModalButton } from '../sbadmin2';\nimport { useDictionary } from '../sbadmin2';\nimport { AccountModal } from './AccountModal';\n\nexport function CreateAccountButton() {\n  const [createAccount] = useCreateAccount();\n  const { accounts } = useDictionary();\n  return (\n    <OpenModalButton\n      button={props => <CreateButton {...props} />}\n      modalContent={props => (\n        <AccountModal\n          init={{ name: '' }}\n          title={accounts.modal.createTitle}\n          onSave={createAccount}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n","import './UpdateAccountButton.css';\n\nimport { faEdit } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useUpdateAccount } from '../gql/accounts';\nimport { IconButton, OpenModalButton, useDictionary } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\nimport { AccountModal } from './AccountModal';\n\nexport function UpdateAccountButton({ account }) {\n  const [updateAccount] = useUpdateAccount();\n  const { accounts } = useDictionary();\n  return (\n    <OpenModalButton\n      button={props => (\n        <IconButton\n          className='accounts__update-button'\n          icon={faEdit}\n          variant={Variant.primary}\n          borderless\n          {...props}\n        />\n      )}\n      modalContent={props => (\n        <AccountModal\n          init={account}\n          title={accounts.modal.editTitle}\n          onSave={input => updateAccount(account.id, input)}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nUpdateAccountButton.propTypes = {\n  account: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n  }),\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useGetAccounts } from '../gql/accounts';\nimport { QueryTablePanel } from '../gql/QueryTablePanel';\nimport Amount from '../../model/Amount';\nimport { CreateAccountButton } from './CreateAccountButton';\nimport { UpdateAccountButton } from './UpdateAccountButton';\n\nconst columns = [\n  { dataField: 'name', sort: true },\n  {\n    dataField: 'balance',\n    align: 'right',\n    headerAlign: 'right',\n    formatter: Amount.format,\n  },\n  {\n    dataField: 'actions',\n    isDummyColumn: true,\n    formatter: (cell, row) => (\n      <span>\n        <UpdateAccountButton account={row} />\n        <span style={{ cursor: 'pointer' }}>\n          <i className=\"fas fa-archive fa-fw\" />\n        </span>\n      </span>\n    ),\n    style: {\n      whiteSpace: 'nowrap',\n      width: '1%',\n    },\n  },\n];\n\nconst defaultSorted = [\n  {\n    dataField: 'name',\n    order: 'asc',\n  },\n];\n\nexport function AccountsTablePanel({ onSelectAcount }) {\n  const query = useGetAccounts();\n\n  const selectRow = {\n    mode: 'radio',\n    clickToSelect: true,\n    hideSelectColumn: true,\n    classes: 'text-white bg-primary selected',\n    onSelect: account => onSelectAcount(account),\n  };\n\n  return (\n    <QueryTablePanel\n      query={query}\n      getData={data => data.accounts}\n      buttons={<CreateAccountButton />}\n      columns={columns}\n      keyField=\"id\"\n      readTitle={d => d.accounts.table.title}\n      readColumnNames={d => d.accounts.table.columns}\n      selectRow={selectRow}\n      defaultSorted={defaultSorted}\n    />\n  );\n}\n\nAccountsTablePanel.propTypes = {\n  onSelectAcount: PropTypes.func.isRequired,\n  selectedAccountID: PropTypes.string,\n};\n","import './CollapsiblePanel.css';\n\nimport { faChevronDown, faChevronUp } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { createContext, useContext, useState } from 'react';\nimport { Collapse } from 'react-bootstrap';\n\nimport Panel from '../sbadmin2/components/Panel/Panel';\n\nconst CollapsibleContext = createContext();\n\nexport function CollapsiblePanel({ initialyShown, ...props }) {\n  const [show, setShow] = useState(initialyShown);\n  return (\n    <CollapsibleContext.Provider\n      value={{ show, toggle: () => setShow(s => !s) }}\n    >\n      <Panel {...props} />\n    </CollapsibleContext.Provider>\n  );\n}\n\nCollapsiblePanel.propTypes = {\n  initialyShown: PropTypes.bool,\n};\nCollapsiblePanel.defaultProps = {\n  initialyShown: false,\n};\n\nfunction CollapsiblePanelHeader({ className, ...props }) {\n  const { toggle } = useContext(CollapsibleContext);\n  const classNames = classnames('collapsible-panel__header', className);\n  return (\n    <Panel.Header onClick={() => toggle()} className={classNames} {...props} />\n  );\n}\nCollapsiblePanelHeader.propTypes = {\n  className: PropTypes.string,\n};\nCollapsiblePanel.Header = CollapsiblePanelHeader;\n\nfunction CollapsiblePanelTitle({ children, ...props }) {\n  const { show } = useContext(CollapsibleContext);\n  return (\n    <Panel.Title {...props}>\n      <span className='text-secondary mr-2'>\n        <FontAwesomeIcon icon={show ? faChevronUp : faChevronDown} />\n      </span>\n      {children}\n    </Panel.Title>\n  );\n}\nCollapsiblePanelTitle.propTypes = {\n  children: PropTypes.node,\n};\nCollapsiblePanel.Title = CollapsiblePanelTitle;\n\nfunction CollapsiblePanelBody(props) {\n  const { show } = useContext(CollapsibleContext);\n  return (\n    <Collapse in={show}>\n      <Panel.Body {...props} />\n    </Collapse>\n  );\n}\nCollapsiblePanel.Body = CollapsiblePanelBody;\n","import React, { useState } from 'react';\nimport { Col, Row } from 'react-bootstrap';\n\nimport MonthSwitcher from '../common/MonthSwitcher';\nimport { CreateExpenseButton } from '../Expenses/CreateExpenseButton';\nimport { ExpensesTablePanel } from '../Expenses/ExpensesTablePanel';\nimport { Page } from '../sbadmin2';\nimport { CreateTransferButton } from '../Transfers/CreateTransferButton';\nimport { TransfersTablePanel } from '../Transfers/TransfersTablePanel';\nimport { AccountsTablePanel } from './AccountsTablePanel';\nimport { CollapsiblePanel } from './CollapsiblePanel';\n\nexport default function AccountsPage() {\n  const [selectedAccount, setSelectedAccount] = useState(null);\n\n  return (\n    <Page>\n      <Page.Header readTitle={d => d.sidebar.pages.accounts} />\n      <Row>\n        <Col sm={5}>\n          <AccountsTablePanel onSelectAcount={a => setSelectedAccount(a)} />\n        </Col>\n        <Col>\n          {!selectedAccount ? null : (\n            <>\n              <h3 className='d-flex justify-content-between'>\n                {selectedAccount.name}\n                <div>\n                  <MonthSwitcher />\n                </div>\n              </h3>\n              <TransfersTablePanel\n                readTitle={d => d.accounts.inTransfersTableTitle}\n                createButton={\n                  <CreateTransferButton toAccount={selectedAccount} />\n                }\n                accountFilter={selectedAccount.id}\n                hiddenColumns={['toAccount']}\n                wrapper={CollapsiblePanel}\n                toAccountFilter={selectedAccount.id}\n              />\n              <TransfersTablePanel\n                readTitle={d => d.accounts.outTransfersTableTitle}\n                createButton={\n                  <CreateTransferButton fromAccount={selectedAccount} />\n                }\n                accountFilter={selectedAccount.id}\n                hiddenColumns={['fromAccount']}\n                wrapper={CollapsiblePanel}\n                fromAccountFilter={selectedAccount.id}\n              />\n              <ExpensesTablePanel\n                readTitle={d => d.accounts.expensesTableTitle}\n                createButton={<CreateExpenseButton account={selectedAccount} />}\n                accountFilter={selectedAccount.id}\n                hiddenColumns={['account']}\n                wrapper={CollapsiblePanel}\n                wrapperProps={{ initialyShown: true }}\n              />\n            </>\n          )}\n        </Col>\n      </Row>\n    </Page>\n  );\n}\n","import React, { useState } from 'react';\nimport { Form, Row } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { FormControl } from './FormControl';\n\nexport function OptionalFormControl({\n  initEnabled,\n  label,\n  inline,\n  formData,\n  ...props\n}) {\n  const [enabled, setEnabled] = useState(initEnabled);\n  const toggleEnabled = () => setEnabled(v => !v);\n  return (\n    <Form.Group className=\"mb-3\" as={!!inline && Row}>\n      <Form.Label column={!!inline}>\n        <Form.Check custom type=\"switch\">\n          <Form.Check.Input checked={enabled} onChange={toggleEnabled} />\n          <Form.Check.Label onClick={toggleEnabled}>{label}</Form.Check.Label>\n        </Form.Check>\n      </Form.Label>\n      {enabled && (\n        <FormControl.Input\n          autoFocus\n          formData={formData}\n          inline={inline}\n          {...props}\n        />\n      )}\n    </Form.Group>\n  );\n}\n\nOptionalFormControl.propTypes = {\n  initEnabled: PropTypes.bool,\n  formData: PropTypes.shape({ current: PropTypes.any, init: PropTypes.any }),\n  feedback: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  inline: PropTypes.number,\n};\n\nOptionalFormControl.defaultProps = {\n  inline: 0,\n};\n","import PropTypes from 'prop-types';\n\nexport const Amount = PropTypes.number;\n\nexport const Account = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n});\n\nexport const Expense = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  date: PropTypes.string,\n  totalBalance: Amount.isRequired,\n  location: PropTypes.string,\n  account: Account,\n});\n\nexport const Envelope = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n});\n\nexport const Category = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  envelope: Envelope,\n});\n","import React from 'react';\nimport Amount from '../../model/Amount';\nimport { FormControl } from '../sbadmin2/utilities/FormControl';\nimport { OptionalFormControl } from '../sbadmin2/utilities/OptionalFormControl';\nimport { FormInModal } from '../sbadmin2/utilities/FormInModal';\nimport { useFormData } from '../sbadmin2/utilities/useFormData';\nimport PropTypes from 'prop-types';\nimport * as model from '../../model/propTypes';\nimport { useDictionary } from '../sbadmin2/language';\n\nexport function EnvelopeModal({ init, ...props }) {\n  const { envelopes } = useDictionary();\n  const formData = useFormData({\n    name: { $init: init.name },\n    limit: { $init: Amount.format(init.limit, false), $process: Amount.parse },\n  });\n  return (\n    <FormInModal formData={formData} {...props}>\n      <FormControl\n        label={envelopes.modal.labels.name}\n        inline={9}\n        feedback=\"Provide a name for the envelope\"\n        required\n        formData={formData.name}\n      />\n      <OptionalFormControl\n        initEnabled={!!init.limit}\n        inline={9}\n        label={envelopes.modal.labels.limit}\n        feedback=\"Provide a limit for the envelope\"\n        type=\"number\"\n        required\n        formData={formData.limit}\n        step=\"0.01\"\n      />\n    </FormInModal>\n  );\n}\n\nEnvelopeModal.propTypes = {\n  init: PropTypes.shape({\n    name: PropTypes.string,\n    limit: model.Amount,\n  }).isRequired,\n  onSave: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport CreateButton from '../common/CreateButton';\nimport { useCreateEnvelope } from '../gql/envelopes';\nimport { OpenModalButton } from '../sbadmin2';\nimport { useDictionary } from '../sbadmin2/language';\nimport { EnvelopeModal } from './EnvelopeModal';\n\nexport function CreateEnvelopeButton({ onClickRef }) {\n  const [createEnvelope] = useCreateEnvelope();\n  const { envelopes } = useDictionary();\n  return (\n    <OpenModalButton\n      onClickRef={onClickRef}\n      button={props => <CreateButton {...props} />}\n      modalContent={props => (\n        <EnvelopeModal\n          title={envelopes.modal.createTitle}\n          init={{ name: '', limit: null }}\n          onSave={createEnvelope}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nCreateEnvelopeButton.propTypes = {\n  onClickRef: PropTypes.shape({ current: PropTypes.any }),\n};\n","import { faEdit } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useUpdateEnvelope } from '../gql/envelopes';\nimport { IconButton, OpenModalButton, useDictionary } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\nimport { EnvelopeModal } from './EnvelopeModal';\n\nexport function UpdateEnvelopeButton({ envelope }) {\n  const [updateEnvelope] = useUpdateEnvelope();\n  const { envelopes } = useDictionary();\n\n  const onSave = input => {\n    updateEnvelope(envelope.id, input);\n  };\n  return (\n    <OpenModalButton\n      button={props => (\n        <IconButton\n          icon={faEdit}\n          variant={Variant.primary}\n          borderless\n          {...props}\n        />\n      )}\n      modalContent={props => (\n        <EnvelopeModal\n          title={envelopes.modal.editTitle}\n          init={envelope}\n          onSave={onSave}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nUpdateEnvelopeButton.propTypes = {\n  envelope: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n  }),\n};\n","import { faArchive } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react';\n\nimport Amount from '../../model/Amount';\nimport { useGetEnvelopes } from '../gql/envelopes';\nimport { QueryTablePanel } from '../gql/QueryTablePanel';\nimport { IconButton } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\nimport { CreateEnvelopeButton } from './CreateEnvelopeButton';\nimport { UpdateEnvelopeButton } from './UpdateEnvelopeButton';\n\nconst columns = [\n  { dataField: 'name', sort: true },\n  {\n    dataField: 'limit',\n    formatter: Amount.format,\n    align: 'right',\n    headerAlign: 'right',\n  },\n  {\n    dataField: 'balance',\n    formatter: Amount.format,\n    align: 'right',\n    headerAlign: 'right',\n  },\n  {\n    dataField: 'overLimit',\n    align: 'right',\n    headerAlign: 'right',\n    formatter: (cell, row) =>\n      row.limit !== null && row.limit < row.balance\n        ? Amount.format(row.balance - row.limit)\n        : '',\n  },\n  {\n    dataField: 'actions',\n    isDummyColumn: true,\n    formatter: (cell, row) => (\n      <span>\n        <UpdateEnvelopeButton envelope={row} />\n        <IconButton icon={faArchive} variant={Variant.secondary} borderless />\n      </span>\n    ),\n    style: {\n      whiteSpace: 'nowrap',\n      width: '1%',\n    },\n  },\n];\n\nconst defaultSorted = [\n  {\n    dataField: 'name',\n    order: 'asc',\n  },\n];\n\nexport function EnvelopesListPanel() {\n  const query = useGetEnvelopes();\n  return (\n    <QueryTablePanel\n      query={query}\n      buttons={<CreateEnvelopeButton />}\n      getData={data => data.envelopes}\n      columns={columns}\n      keyField='id'\n      readTitle={d => d.envelopes.table.title}\n      readColumnNames={d => d.envelopes.table.columns}\n      defaultSorted={defaultSorted}\n    />\n  );\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useGetEnvelopes } from '../gql/envelopes';\nimport { WithQuery } from '../gql/WithQuery';\nimport { Combobox } from '../sbadmin2';\nimport { useDictionary } from '../sbadmin2/language';\nimport { FormControl } from '../sbadmin2/utilities/FormControl';\nimport { FormInModal } from '../sbadmin2/utilities/FormInModal';\nimport { InlineFormControl } from '../sbadmin2/utilities/InlineFormControl';\nimport { useFormData } from '../sbadmin2/utilities/useFormData';\n\nexport function CategoryModal({ init, ...props }) {\n  const query = useGetEnvelopes();\n  const { categories } = useDictionary();\n  const formData = useFormData({\n    name: { $init: init.name },\n    envelopeID: {\n      $init: init.envelope.id,\n    },\n    description: { $init: init.description },\n  });\n  return (\n    <FormInModal formData={formData} {...props}>\n      <WithQuery query={query}>\n        {({ data }) => (\n          <>\n            <FormControl\n              label={categories.modal.labels.name}\n              inline={9}\n              formData={formData.name}\n              feedback='Provide name'\n            />\n            <InlineFormControl\n              size={9}\n              label={categories.modal.labels.envelope}\n            >\n              <Combobox\n                allowedValues={data.envelopes.map(({ id, name }) => ({\n                  id,\n                  label: name,\n                }))}\n                _ref={formData.envelopeID}\n                defaultValue={formData.envelopeID.default()}\n              />\n            </InlineFormControl>\n            <FormControl\n              label={categories.modal.labels.description}\n              inline={9}\n              formData={formData.description}\n              feedback='Provide description'\n            />\n          </>\n        )}\n      </WithQuery>\n    </FormInModal>\n  );\n}\n\nCategoryModal.propTypes = {\n  envelope: PropTypes.shape({\n    id: PropTypes.string,\n  }).isRequired,\n  id: PropTypes.string,\n  init: PropTypes.shape({\n    name: PropTypes.string,\n    envelope: PropTypes.shape({\n      id: PropTypes.string,\n    }).isRequired,\n    description: PropTypes.string,\n  }),\n  name: PropTypes.string,\n  onSave: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport CreateButton from '../common/CreateButton';\nimport { useCreateCategory } from '../gql/categories';\nimport { OpenModalButton } from '../sbadmin2';\nimport { useDictionary } from '../sbadmin2/language';\nimport { CategoryModal } from './CategoryModal';\n\nexport function CreateCategoryButton({ onClickRef }) {\n  const [createCategory] = useCreateCategory();\n  const { categories } = useDictionary();\n  return (\n    <OpenModalButton\n      onClickRef={onClickRef}\n      button={props => <CreateButton {...props} />}\n      modalContent={props => (\n        <CategoryModal\n          title={categories.modal.createTitle}\n          init={{ name: '', envelope: { id: null }, description: '' }}\n          onSave={createCategory}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nCreateCategoryButton.propTypes = {\n  onClickRef: PropTypes.shape({ current: PropTypes.any }),\n};\n","import { faEdit } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useUpdateCategory } from '../gql/categories';\nimport { IconButton, OpenModalButton, useDictionary } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\nimport { CategoryModal } from './CategoryModal';\n\nexport function UpdateCategoryButton({ category }) {\n  const [updateEnvelope] = useUpdateCategory();\n  const { categories } = useDictionary();\n  const onSave = input => {\n    updateEnvelope(category.id, input);\n  };\n  return (\n    <OpenModalButton\n      button={props => (\n        <IconButton\n          icon={faEdit}\n          variant={Variant.primary}\n          {...props}\n          borderless\n        />\n      )}\n      modalContent={props => (\n        <CategoryModal\n          title={categories.modal.editTitle}\n          init={category}\n          onSave={onSave}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nUpdateCategoryButton.propTypes = {\n  category: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n  }),\n};\n","import { faArchive } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react';\n\nimport { useGetCategories } from '../gql/categories';\nimport { QueryTablePanel } from '../gql/QueryTablePanel';\nimport { IconButton } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\nimport { CreateCategoryButton } from './CreateCategoryButton';\nimport { UpdateCategoryButton } from './UpdateCategoryButton';\n\nconst columns = [\n  { dataField: 'name', sort: true },\n  {\n    dataField: 'envelope',\n    formatter: a => a.name,\n    sort: true,\n  },\n  { dataField: 'description' },\n  {\n    dataField: 'actions',\n    isDummyColumn: true,\n    formatter: (cell, row) => (\n      <span>\n        <UpdateCategoryButton category={row} />\n        <IconButton icon={faArchive} variant={Variant.secondary} borderless />\n      </span>\n    ),\n    style: {\n      whiteSpace: 'nowrap',\n      width: '1%',\n    },\n  },\n];\n\nconst defaultSorted = [\n  {\n    dataField: 'name',\n    order: 'asc',\n  },\n];\n\nexport function CategoriesListPanel() {\n  const query = useGetCategories();\n  return (\n    <QueryTablePanel\n      keyField='id'\n      columns={columns}\n      buttons={<CreateCategoryButton />}\n      query={query}\n      getData={data => data.categories}\n      readTitle={d => d.categories.table.title}\n      readColumnNames={d => d.categories.table.columns}\n      defaultSorted={defaultSorted}\n    />\n  );\n}\n","import React, { useRef } from 'react';\nimport { Page } from '../sbadmin2';\nimport { EnvelopesListPanel } from './EnvelopesListPanel';\nimport { CategoriesListPanel } from '../Categories/CategoriesListPanel';\nimport { GlobalHotKeys } from 'react-hotkeys';\n\nconst keyMap = {\n  createEnvelope: 'e',\n  createCategory: 'c',\n};\n\nconst handlers = (createEnvelopeFunRef, createCategoryFunRef) => ({\n  createEnvelope: () => createEnvelopeFunRef.current(),\n  createCategory: () => createCategoryFunRef.current(),\n});\n\nexport default function EnvelopesPage() {\n  const createEnvelopeFunRef = useRef();\n  const createCategoryFunRef = useRef();\n  return (\n    <Page>\n      <GlobalHotKeys\n        keyMap={keyMap}\n        handlers={handlers(createEnvelopeFunRef, createCategoryFunRef)}\n      />\n      <Page.Header readTitle={d => d.sidebar.pages.envelopes} />\n      <EnvelopesListPanel createFunRef={createEnvelopeFunRef} />\n      <CategoriesListPanel createFunRef={createCategoryFunRef} />\n    </Page>\n  );\n}\n","import React from 'react';\n\nimport MonthSwitcher from '../common/MonthSwitcher';\nimport { Page } from '../sbadmin2';\nimport { CreateExpenseButton } from './CreateExpenseButton';\nimport { ExpensesTablePanel } from './ExpensesTablePanel';\n\nexport default function ExpensesPage() {\n  return (\n    <Page>\n      <Page.Header readTitle={d => d.sidebar.pages.expenses}>\n        <MonthSwitcher />\n      </Page.Header>\n      <ExpensesTablePanel\n        readTitle={d => d.expenses.table.title}\n        createButton={<CreateExpenseButton />}\n      />\n    </Page>\n  );\n}\n","import { faClipboardCheck } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useCloseCurrentMonth } from '../gql/budget';\nimport { SplitButton, useDictionary } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\n\nexport function StartNextMonthButton({ disabled, warn }) {\n  const [closeCurrentMonth] = useCloseCurrentMonth();\n  const { dashboard } = useDictionary();\n  return (\n    <SplitButton\n      icon={faClipboardCheck}\n      variant={\n        disabled ? Variant.secondary : warn ? Variant.warning : Variant.success\n      }\n      disabled={disabled}\n      onClick={() => closeCurrentMonth()}\n    >\n      {dashboard.buttons.closeMonth}\n    </SplitButton>\n  );\n}\n\nStartNextMonthButton.propTypes = {\n  disabled: PropTypes.bool,\n  warn: PropTypes.bool,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Month from '../../model/Month';\nimport { Panel, useDictionary } from '../sbadmin2';\nimport { StartNextMonthButton } from './StartNextMonthButton';\n\nexport function CurrentMonth({ className, month }) {\n  const { dashboard, months } = useDictionary();\n  const parsed = Month.parse(month.month);\n  return (\n    <Panel className={className}>\n      <Panel.Header>\n        <div className='d-flex justify-content-between align-items-center'>\n          <Panel.Title\n            title={\n              <span>\n                {dashboard.currentMonth}:{' '}\n                <strong>\n                  <em>\n                    {months[parsed.month - 1]} {parsed.year}\n                  </em>\n                </strong>\n              </span>\n            }\n          />\n          <div>\n            <StartNextMonthButton\n              disabled={month.problems.some(p => p.severity === 'ERROR')}\n              warn={month.problems.length > 0}\n            />\n          </div>\n        </div>\n      </Panel.Header>\n    </Panel>\n  );\n}\n\nCurrentMonth.propTypes = {\n  className: PropTypes.string,\n  month: PropTypes.shape({\n    month: PropTypes.string.isRequired,\n    problems: PropTypes.arrayOf(\n      PropTypes.shape({ severity: PropTypes.string.isRequired })\n    ).isRequired,\n  }),\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { Variant } from './bootstrap';\n\nexport function Gauge({ className, variant, title, value, faIcon }) {\n  return (\n    <div className={className}>\n      <div className={`card border-left-${variant} shadow h-100 py-2`}>\n        <div className='card-body'>\n          <div className='row no-gutters align-items-center'>\n            <div className='col mr-2'>\n              <div\n                className={`text-xs font-weight-bold text-${variant} text-uppercase mb-1`}\n              >\n                {title}\n              </div>\n              <div className='h5 mb-0 font-weight-bold text-gray-800'>\n                {value}\n              </div>\n            </div>\n            <div className='col-auto'>\n              <i className={`fas fa-${faIcon} fa-2x text-gray-300`} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nGauge.propTypes = {\n  className: PropTypes.string.isRequired,\n  faIcon: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  variant: PropTypes.PropTypes.oneOf(Object.keys(Variant)),\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Row } from 'react-bootstrap';\n\nimport Amount from '../../model/Amount';\nimport { useDictionary } from '../sbadmin2';\nimport { Gauge } from '../sbadmin2/Gauge';\n\nexport function Gauges({ className, month }) {\n  const { dashboard } = useDictionary();\n  return (\n    <div className={className}>\n      <Row>\n        <Gauge\n          className='col-6 col-lg-12 mb-4'\n          variant='primary'\n          title={dashboard.planned}\n          value={Amount.format(month.totalPlannedAmount)}\n          faIcon='clipboard-list'\n        />\n        <Gauge\n          className='col-6 col-lg-12 mb-4'\n          variant='primary'\n          title={dashboard.incomes}\n          value={Amount.format(month.totalIncomeAmount)}\n          faIcon='briefcase'\n        />\n        <Gauge\n          className='col-6 col-lg-12 mb-4'\n          variant='primary'\n          title={dashboard.leftToPlan}\n          value={Amount.format(\n            month.totalIncomeAmount - month.totalPlannedAmount\n          )}\n          faIcon='balance-scale'\n        />\n        <Gauge\n          className='col-6 col-lg-12 mb-4'\n          variant='primary'\n          title={dashboard.expenses}\n          value={Amount.format(month.totalExpenseAmount)}\n          faIcon='receipt'\n        />\n      </Row>\n    </div>\n  );\n}\n\nGauges.propTypes = {\n  className: PropTypes.string,\n  month: PropTypes.shape({\n    totalPlannedAmount: PropTypes.number,\n    totalIncomeAmount: PropTypes.number,\n    totalExpenseAmount: PropTypes.number,\n  }),\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useGetAccounts } from '../gql/accounts';\nimport { useGetEnvelopes } from '../gql/envelopes';\nimport { WithQuery } from '../gql/WithQuery';\nimport { Panel, useDictionary } from '../sbadmin2';\n\nconst severityVariant = {\n  ERROR: 'danger',\n  WARNING: 'warning',\n  INFO: 'primary',\n};\n\nconst severityIcon = {\n  ERROR: 'exclamation-circle',\n  WARNING: 'exclamation-triangle',\n  INFO: 'info-circle',\n};\n\nexport function MonthProblems({ className, problems }) {\n  return (\n    <Panel className={className}>\n      <Panel.Header>\n        <div className='d-flex justify-content-between align-items-center'>\n          <Panel.Title readTitle={d => d.dashboard.problems.title} />\n        </div>\n      </Panel.Header>\n      <Panel.Body>\n        <ul className='list-group list-group-flush'>\n          {problems.length > 0 ? (\n            problems.map((problem, idx) => (\n              <Problem key={idx} problem={problem} />\n            ))\n          ) : (\n            <NoProblems />\n          )}\n        </ul>\n      </Panel.Body>\n    </Panel>\n  );\n}\n\nMonthProblems.propTypes = {\n  className: PropTypes.string,\n  problems: PropTypes.array.isRequired,\n};\n\nfunction NoProblems() {\n  const { dashboard } = useDictionary();\n  return (\n    <li className='list-group-item text-success'>\n      <i className='fas fa-fw fa-check-circle mr-1' />\n      {dashboard.noProblems}\n    </li>\n  );\n}\n\nfunction Problem({ problem }) {\n  return (\n    <li className={`list-group-item text-${severityVariant[problem.severity]}`}>\n      <i className={`fas fa-fw fa-${severityIcon[problem.severity]} mr-1`} />\n      <ProblemMessage problem={problem} />\n    </li>\n  );\n}\n\nProblem.propTypes = {\n  problem: PropTypes.shape({\n    severity: PropTypes.oneOf(Object.keys(severityVariant)),\n  }),\n};\n\nfunction ProblemMessage({ problem }) {\n  const envelopesQuery = useGetEnvelopes();\n  const accountsQuery = useGetAccounts();\n  const { dashboard } = useDictionary();\n\n  return (\n    <WithQuery query={envelopesQuery}>\n      {({ data: envelopesData }) => (\n        <WithQuery query={accountsQuery}>\n          {({ data: accountsData }) =>\n            problem.__typename === 'Misplanned'\n              ? problem.overplanned\n                ? dashboard.problems.overplanned\n                : dashboard.problems.underplanned\n              : problem.__typename === 'NegativeBalanceOnEnvelope'\n              ? dashboard.problems.expensesExceedPlans(\n                  envelopesData.envelopes.find(e => e.id === problem.id).name\n                )\n              : problem.__typename === 'EnvelopeOverLimit'\n              ? dashboard.problems.envelopeOverLimit(\n                  envelopesData.envelopes.find(e => e.id === problem.id).name\n                )\n              : problem.__typename === 'NegativeBalanceOnAccount'\n              ? dashboard.problems.negativeAccountBalance(\n                  accountsData.accounts.find(a => a.id === problem.id).name\n                )\n              : problem.__typename === 'MonthStillInProgress'\n              ? dashboard.problems.monthNotEnded\n              : problem.__typename\n          }\n        </WithQuery>\n      )}\n    </WithQuery>\n  );\n}\n\nProblemMessage.propTypes = {\n  problem: PropTypes.shape({\n    __typename: PropTypes.string.isRequired,\n    id: PropTypes.any,\n    overplanned: PropTypes.bool,\n  }),\n};\n","import React from 'react';\nimport { Row } from 'react-bootstrap';\n\nimport { useMonth } from '../context/Month';\nimport { useGetMonthlyReport } from '../gql/monthlyReport';\nimport { WithQuery } from '../gql/WithQuery';\nimport { Page } from '../sbadmin2';\nimport { CurrentMonth } from './CurrentMonth';\nimport { Gauges } from './Gauges';\nimport { MonthProblems } from './MonthProblems';\n\nexport function MonthDashboardPage() {\n  const { currentMonth } = useMonth();\n  const query = useGetMonthlyReport(currentMonth);\n  return (\n    <Page>\n      <WithQuery query={query}>\n        {({ data }) => (\n          <Row>\n            <CurrentMonth\n              className='col-12 d-lg-none px-0'\n              month={data.monthlyReport}\n            />\n            <Gauges className='col-12 col-lg-3' month={data.monthlyReport} />\n            <MonthProblems\n              className='col-12 d-lg-none px-0'\n              problems={data.monthlyReport.problems}\n            />\n            <Row className='col-12 col-lg-9 flex-lg-column'>\n              <CurrentMonth\n                className='d-none d-lg-block'\n                month={data.monthlyReport}\n              />\n              <MonthProblems\n                className='d-none d-lg-block flex-grow-1'\n                problems={data.monthlyReport.problems}\n              />\n            </Row>\n          </Row>\n        )}\n      </WithQuery>\n    </Page>\n  );\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Amount from '../../model/Amount';\nimport { AmountInput } from '../Expenses/AmountInput';\nimport { useGetEnvelopes } from '../gql/envelopes';\nimport { WithQuery } from '../gql/WithQuery';\nimport { Combobox, useDictionary } from '../sbadmin2';\nimport { FormControl } from '../sbadmin2/utilities/FormControl';\nimport { FormInModal } from '../sbadmin2/utilities/FormInModal';\nimport { InlineFormControl } from '../sbadmin2/utilities/InlineFormControl';\nimport { OptionalFormControl } from '../sbadmin2/utilities/OptionalFormControl';\nimport { useFormData } from '../sbadmin2/utilities/useFormData';\n\nexport function PlanModal({ init, ...props }) {\n  const query = useGetEnvelopes();\n  const { plans } = useDictionary();\n  const formData = useFormData({\n    title: { $init: init.title },\n    currentAmount: {\n      $init: Amount.format(init.currentAmount, false),\n      $process: Amount.parse,\n    },\n    recurringAmount: {\n      $init: Amount.format(init.recurringAmount, false),\n      $default: fd => Amount.format(fd.currentAmount.value()),\n      $process: Amount.parse,\n    },\n    fromEnvelopeID: {\n      $init: init.fromEnvelope !== null ? init.fromEnvelope.id : '',\n      $process: v => (v === '' ? null : v),\n    },\n    toEnvelopeID: {\n      $init: init.toEnvelope !== null ? init.toEnvelope.id : '',\n      $process: v => (v === '' ? null : v),\n    },\n  });\n  return (\n    <FormInModal formData={formData} {...props}>\n      <WithQuery query={query}>\n        {({ data }) => (\n          <>\n            <FormControl\n              required\n              label={plans.modal.labels.title}\n              inline={10}\n              formData={formData.title}\n              feedback='Provide title'\n            />\n            <FormControl inline={8} label={plans.modal.labels.amount}>\n              <AmountInput formData={formData.currentAmount} />\n            </FormControl>\n            <OptionalFormControl\n              initEnabled={init.recurringAmount !== null}\n              inline={8}\n              label={plans.modal.labels.recurring}\n              feedback='Provide amount for recurring plans'\n              type='number'\n              required\n              formData={formData.recurringAmount}\n              step='0.01'\n            />\n            <InlineFormControl size={8} label={plans.modal.labels.fromEnvelope}>\n              <Combobox\n                _ref={formData.fromEnvelopeID}\n                defaultValue={formData.fromEnvelopeID.default()}\n                allowedValues={data.envelopes\n                  .map(({ id, name }) => ({\n                    id,\n                    label: name,\n                  }))\n                  .concat([{ id: null, label: '' }])}\n              />\n            </InlineFormControl>\n            <InlineFormControl size={8} label={plans.modal.labels.toEnvelope}>\n              <Combobox\n                _ref={formData.toEnvelopeID}\n                defaultValue={formData.toEnvelopeID.default()}\n                allowedValues={data.envelopes\n                  .map(({ id, name }) => ({\n                    id,\n                    label: name,\n                  }))\n                  .concat([{ id: null, label: '' }])}\n              />\n            </InlineFormControl>\n          </>\n        )}\n      </WithQuery>\n    </FormInModal>\n  );\n}\n\nPlanModal.propTypes = {\n  init: PropTypes.shape({\n    title: PropTypes.string,\n    currentAmount: PropTypes.number,\n    recurringAmount: PropTypes.number,\n    fromEnvelope: PropTypes.shape({ id: PropTypes.any.isRequired }),\n    toEnvelope: PropTypes.shape({ id: PropTypes.any.isRequired }),\n  }),\n};\n","import React from 'react';\n\nimport CreateButton from '../common/CreateButton';\nimport { useCreatePlan } from '../gql/plans';\nimport { OpenModalButton, useDictionary } from '../sbadmin2';\nimport { PlanModal } from './PlanModal';\n\nexport function CreatePlanButton() {\n  const [createPlan] = useCreatePlan();\n  const { plans } = useDictionary();\n  return (\n    <OpenModalButton\n      button={props => <CreateButton {...props} />}\n      modalContent={props => (\n        <PlanModal\n          init={{\n            title: null,\n            fromEnvelope: { id: null },\n            toEnvelope: { id: null },\n            currentAmount: null,\n            recurringAmount: null,\n            date: null,\n          }}\n          title={plans.modal.createTitle}\n          onSave={createPlan}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n","import { faTrash } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useDeletePlan } from '../gql/plans';\nimport { IconButton } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\n\nexport function DeletePlanButton({ plan }) {\n  const [deletePlan] = useDeletePlan();\n  return (\n    <IconButton\n      icon={faTrash}\n      variant={Variant.secondary}\n      onClick={() => deletePlan(plan.id)}\n      borderless\n    />\n  );\n}\n\nDeletePlanButton.propTypes = {\n  plan: PropTypes.shape({ id: PropTypes.any.isRequired }).isRequired,\n};\n","import { faEdit } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useUpdatePlan } from '../gql/plans';\nimport { IconButton, OpenModalButton, useDictionary } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\nimport { PlanModal } from './PlanModal';\n\nexport function UpdatePlanButton({ plan }) {\n  const [updatePlan] = useUpdatePlan();\n  const { plans } = useDictionary();\n  return (\n    <OpenModalButton\n      button={props => (\n        <IconButton\n          icon={faEdit}\n          variant={Variant.primary}\n          borderless\n          {...props}\n        />\n      )}\n      modalContent={props => (\n        <PlanModal\n          init={plan}\n          title={plans.modal.editTitle}\n          onSave={input => updatePlan(plan.id, input)}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nUpdatePlanButton.propTypes = {\n  plan: PropTypes.shape({ id: PropTypes.any.isRequired }).isRequired,\n};\n","import React from 'react';\n\nimport Amount from '../../model/Amount';\nimport { useGetCurrentPlans } from '../gql/plans';\nimport { QueryTablePanel } from '../gql/QueryTablePanel';\nimport { Page } from '../sbadmin2';\nimport { CreatePlanButton } from './CreatePlanButton';\nimport { DeletePlanButton } from './DeletePlanButton';\nimport { UpdatePlanButton } from './UpdatePlanButton';\n\nconst columns = [\n  { dataField: 'title', sort: true },\n  {\n    dataField: 'fromEnvelope',\n    sort: true,\n    sortValue: cell => (cell ? cell.name : ''),\n    formatter: a => a && a.name,\n  },\n  {\n    dataField: 'toEnvelope',\n    sort: true,\n    sortValue: cell => (cell ? cell.name : ''),\n    formatter: a => a && a.name,\n  },\n  {\n    dataField: 'currentAmount',\n    formatter: Amount.format,\n    align: 'right',\n    headerAlign: 'right',\n  },\n  {\n    dataField: 'recurringAmount',\n    formatter: a =>\n      a !== null ? <i className='fas fa-fw fa-sync-alt' /> : null,\n  },\n  {\n    dataField: 'actions',\n    isDummyColumn: true,\n    formatter: (cell, row) => (\n      <span>\n        <UpdatePlanButton plan={row} />\n        <DeletePlanButton plan={row} />\n      </span>\n    ),\n    style: {\n      whiteSpace: 'nowrap',\n      width: '1%',\n    },\n  },\n];\n\nconst defaultSorted = [\n  {\n    dataField: 'title',\n    order: 'asc',\n  },\n];\n\nexport default function PlansPage() {\n  const query = useGetCurrentPlans();\n\n  return (\n    <Page>\n      <Page.Header readTitle={d => d.sidebar.pages.plans} />\n      <QueryTablePanel\n        query={query}\n        getData={data => data.budget.currentMonth.plans}\n        buttons={<CreatePlanButton />}\n        columns={columns}\n        keyField='id'\n        readTitle={d => d.plans.table.title}\n        readColumnNames={d => d.plans.table.columns}\n        defaultSorted={defaultSorted}\n      />\n    </Page>\n  );\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nfunction TopbarContextExpanded({ renderContext }) {\n  return (\n    <form className='d-none d-sm-inline-block form-inline mr-auto ml-md-3 my-2 my-md-0 mw-100 navbar-context'>\n      {renderContext()}\n    </form>\n  );\n}\n\nTopbarContextExpanded.propTypes = {\n  renderContext: PropTypes.func.isRequired,\n};\n\nfunction TopbarContextMinimized({ faIcon, renderContext }) {\n  return (\n    <li className='nav-item dropdown no-arrow d-sm-none'>\n      <span\n        className='nav-link dropdown-toggle'\n        id='contextDropdown'\n        role='button'\n        data-toggle='dropdown'\n        aria-haspopup='true'\n        aria-expanded='false'\n        style={{ cursor: 'pointer' }}\n      >\n        <i className={`fas fa-${faIcon} fa-fw`}></i>\n      </span>\n      <div\n        className='dropdown-menu dropdown-menu-right p-3 shadow animated--grow-in'\n        aria-labelledby='contextDropdown'\n      >\n        <form className='form-inline mr-auto w-100 navbar-context'>\n          {renderContext()}\n        </form>\n      </div>\n    </li>\n  );\n}\n\nTopbarContextMinimized.propTypes = {\n  faIcon: PropTypes.string.isRequired,\n  renderContext: PropTypes.func.isRequired,\n};\n\nexport default function TopbarContext({ minified, ...props }) {\n  return minified ? (\n    <TopbarContextMinimized {...props} />\n  ) : (\n    <TopbarContextExpanded {...props} />\n  );\n}\n\nTopbarContext.propTypes = {\n  minified: PropTypes.bool,\n};\n","import './Topbar.css';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useSBAdmin2 } from '../context';\nimport TopbarContext from './TopbarContext';\n\nexport default function Topbar({\n  renderMenus,\n  renderContext,\n  renderUser,\n  faIconContextMinified,\n}) {\n  const { toggleSidebar } = useSBAdmin2();\n\n  return (\n    <nav className='navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow'>\n      <button\n        onClick={toggleSidebar}\n        className='btn btn-link d-md-none rounded-circle mr-3'\n      >\n        <i className='fa fa-bars'></i>\n      </button>\n\n      <TopbarContext minified={false} renderContext={renderContext} />\n\n      <ul className='navbar-nav ml-auto'>\n        <TopbarContext\n          minified={true}\n          renderContext={renderContext}\n          faIcon={faIconContextMinified}\n        />\n\n        {renderMenus()}\n\n        <div className='topbar-divider d-none d-sm-block' />\n\n        {renderUser()}\n      </ul>\n    </nav>\n  );\n}\n\nTopbar.propTypes = {\n  faIconContextMinified: PropTypes.string.isRequired,\n  renderContext: PropTypes.func.isRequired,\n  renderMenus: PropTypes.func.isRequired,\n  renderUser: PropTypes.func.isRequired,\n};\n","import classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nfunction TopbarMenuCounter({ counter }) {\n  const badge = counter >= 3 ? '3+' : '' + counter;\n  return (\n    counter > 0 && (\n      <span className='badge badge-danger badge-counter'>{badge}</span>\n    )\n  );\n}\n\nexport function TopbarMenu({ name, faIcon, children, counter }) {\n  const iconClasses = classnames('fas', 'fa-fw', `fa-${faIcon}`);\n  const id = `topbar--${name || faIcon}`;\n  return (\n    <li className='nav-item dropdown no-arrow mx-1'>\n      <span\n        className='nav-link dropdown-toggle'\n        id={id}\n        role='button'\n        data-toggle='dropdown'\n        aria-haspopup='true'\n        aria-expanded='false'\n        style={{ cursor: 'pointer' }}\n      >\n        <i className={iconClasses} />\n        <TopbarMenuCounter counter={counter} />\n      </span>\n      <div\n        className='dropdown-list dropdown-menu dropdown-menu-right shadow animated--grow-in'\n        aria-labelledby={id}\n      >\n        <h6 className='dropdown-header'>{name}</h6>\n        {children}\n        <span\n          className='dropdown-item text-center small text-gray-500'\n          style={{ cursor: 'pointer' }}\n        >\n          Show All\n        </span>\n      </div>\n    </li>\n  );\n}\n\nTopbarMenu.propTypes = {\n  children: PropTypes.node,\n  counter: PropTypes.number.isRequired,\n  entries: PropTypes.arrayOf(\n    PropTypes.shape({\n      highlighted: PropTypes.bool,\n      render: PropTypes.func.isRequired,\n    })\n  ),\n  faIcon: PropTypes.string,\n  highlighted: PropTypes.bool,\n  name: PropTypes.string,\n  render: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { useSBAdmin2 } from '../context';\n\nexport default function TopbarUser() {\n  const { user, logout } = useSBAdmin2();\n  return (\n    <li className=\"nav-item dropdown no-arrow\">\n      <span\n        className=\"nav-link dropdown-toggle\"\n        id=\"userDropdown\"\n        role=\"button\"\n        data-toggle=\"dropdown\"\n        aria-haspopup=\"true\"\n        aria-expanded=\"false\"\n      >\n        <span className=\"mr-2 d-none d-lg-inline text-gray-600 small\">\n          {user.name}\n        </span>\n        <img alt=\"\" className=\"img-profile rounded-circle\" src={user.picture} />\n      </span>\n      <ul\n        className=\"dropdown-menu dropdown-menu-right shadow animated--grow-in\"\n        aria-labelledby=\"userDropdown\"\n      >\n        <li className=\"dropdown-item\">\n          <i className=\"fas fa-cogs fa-sm fa-fw mr-2 text-gray-400\"></i>\n          Settings\n        </li>\n        <div className=\"dropdown-divider\"></div>\n        <li\n          className=\"dropdown-item\"\n          data-toggle=\"modal\"\n          data-target=\"#logoutModal\"\n          onClick={() => logout()}\n        >\n          <i className=\"fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400\"></i>\n          Logout\n        </li>\n      </ul>\n    </li>\n  );\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport ContextSwitcher from '../components/ContextSwitcher/ContextSwitcher';\n\nexport default function TopbarContextSwitcher({\n  label,\n  value,\n  onChange,\n  allowedValues,\n}) {\n  return (\n    <ContextSwitcher\n      label={label}\n      allowedValues={allowedValues}\n      value={value}\n      onChange={onChange}\n    />\n  );\n}\n\nTopbarContextSwitcher.propTypes = {\n  allowedValues: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      label: PropTypes.string.isRequired,\n    })\n  ),\n  label: PropTypes.any,\n  onChange: PropTypes.any,\n  value: PropTypes.any,\n};\n","import React from 'react';\n\nimport { useBudget } from './gql/budget';\nimport { useDictionary } from './sbadmin2';\nimport TopbarContextSwitcher from './sbadmin2/Topbar/TopbarContextSwitcher';\nimport Spinner from './sbadmin2/utilities/Spinner';\n\nexport default function TopbarBudgetSwitcher() {\n  const {\n    selectedBudget,\n    setSelectedBudget,\n    budgets,\n    loading,\n    error,\n  } = useBudget();\n  const { topbar } = useDictionary();\n  const value = loading ? (\n    <Spinner size='sm' variant='secondary' />\n  ) : error ? (\n    <i className='fas fa-fw fa-exclamation-triangle text-secondary' />\n  ) : (\n    selectedBudget && selectedBudget.name\n  );\n  const onChange = id => {\n    const budget = budgets.find(b => b.id === id);\n    setSelectedBudget(budget);\n  };\n  return (\n    <TopbarContextSwitcher\n      label={topbar.budgetLabel}\n      value={value}\n      onChange={onChange}\n      allowedValues={budgets.map(b => ({ id: b.id, label: b.name }))}\n    />\n  );\n}\n","import React from 'react';\nimport TemplateTopbar from './sbadmin2/Topbar/Topbar';\nimport { TopbarMenu } from './sbadmin2/Topbar/TopbarMenu';\nimport TopbarUser from './sbadmin2/Topbar/TopbarUser';\nimport TopbarBudgetSwitcher from './TopbarBudgetSwitcher';\nimport { useAuth0 } from '../react-auth0-spa';\nimport { useDictionary } from './sbadmin2/language';\n\nexport default function Topbar() {\n  const { user, logout } = useAuth0();\n  const { topbar } = useDictionary();\n  return (\n    <TemplateTopbar\n      faIconContextMinified=\"search\"\n      renderContext={() => <TopbarBudgetSwitcher />}\n      renderUser={() => (\n        <TopbarUser\n          name={user.name}\n          pictureUrl={user.picture}\n          logout={logout}\n        />\n      )}\n      renderMenus={() => (\n        <>\n          <TopbarMenu\n            name={topbar.alertsLabel}\n            faIcon=\"bell\"\n            counter={0}\n          ></TopbarMenu>\n          <TopbarMenu\n            name={topbar.messagesLabel}\n            faIcon=\"envelope\"\n            counter={0}\n          ></TopbarMenu>\n        </>\n      )}\n    />\n  );\n}\n","import React from 'react';\n\nimport MonthSwitcher from '../common/MonthSwitcher';\nimport { Page } from '../sbadmin2';\nimport { CreateTransferButton } from './CreateTransferButton';\nimport { TransfersTablePanel } from './TransfersTablePanel';\n\nexport function TransfersPage() {\n  return (\n    <Page>\n      <Page.Header readTitle={d => d.sidebar.pages.transfers}>\n        <MonthSwitcher />\n      </Page.Header>\n      <TransfersTablePanel\n        readTitle={d => d.transfers.table.title}\n        createButton={<CreateTransferButton />}\n      />\n    </Page>\n  );\n}\n","export const sidebarConfig = ({ sidebar }) => [\n  {\n    entries: [\n      {\n        name: sidebar.pages.dashboard,\n        faIcon: 'receipt',\n        to: '/',\n      },\n    ],\n  },\n  {\n    name: sidebar.sections.currentMonth,\n    entries: [\n      {\n        name: sidebar.pages.expenses,\n        faIcon: 'receipt',\n        to: '/expenses',\n      },\n      {\n        name: sidebar.pages.transfers,\n        faIcon: 'exchange-alt',\n        to: '/transfers',\n      },\n      {\n        name: sidebar.pages.plans,\n        faIcon: 'map-marked-alt',\n        to: '/plans',\n      },\n    ],\n  },\n  {\n    name: sidebar.sections.budget,\n    entries: [\n      {\n        name: sidebar.pages.accounts,\n        faIcon: 'credit-card',\n        to: '/accounts',\n      },\n      {\n        name: sidebar.pages.envelopes,\n        faIcon: 'envelope-open-text',\n        to: '/envelopes',\n      },\n    ],\n  },\n];\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport pl from '../../lang/pl';\nimport { useAuth0 } from '../../react-auth0-spa';\nimport AccountsPage from '../Accounts/AccountsPage';\nimport { MonthProvider } from '../context/Month';\nimport Envelopes from '../Envelopes/EnvelopesPage';\nimport ExpensesPage from '../Expenses/ExpensesPage';\nimport { BudgetContext, BudgetProvider } from '../gql/budget';\nimport { MonthDashboardPage } from '../MonthDashboardPage/MonthDashboardPage';\nimport PlansPage from '../Plans/PlansPage';\nimport { SBAdmin2 } from '../sbadmin2';\nimport Topbar from '../Topbar';\nimport { TransfersPage } from '../Transfers/TransfersPage';\nimport { sidebarConfig } from './sidebarConfig';\n\nconst dictionaries = {\n  pl,\n};\n\nexport default function App() {\n  const { user, logout } = useAuth0();\n  return (\n    <BudgetProvider>\n      <SBAdmin2\n        sidebarProps={{\n          renderBrandName: () => 'Budget',\n          renderBrandIcon: () => <i className='fas fa-bold' />,\n          config: sidebarConfig(pl),\n        }}\n        topbar={Topbar}\n        copyright={'Budget 2019'}\n        dictionaries={dictionaries}\n        user={user}\n        logout={logout}\n      >\n        <BudgetContext.Consumer>\n          {({ selectedBudget }) =>\n            selectedBudget && (\n              <MonthProvider currentMonth={selectedBudget.currentMonth.month}>\n                <Switch>\n                  <Route path='/accounts' component={AccountsPage} />\n                  <Route path='/envelopes' component={Envelopes} />\n                  <Route path='/expenses' component={ExpensesPage} />\n                  <Route path='/transfers' component={TransfersPage} />\n                  <Route path='/plans' component={PlansPage} />\n                  <Route path='/' component={MonthDashboardPage} />\n                </Switch>\n              </MonthProvider>\n            )\n          }\n        </BudgetContext.Consumer>\n      </SBAdmin2>\n    </BudgetProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\n\nimport './sb-admin-2.css';\nimport './index.css';\n\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { AuthApolloProvider, createClient } from './apollo';\nimport config from './auth_config.json';\nimport App from './components/App/App';\nimport { Beta } from './components/Beta';\nimport { Auth0Context, Auth0Provider } from './react-auth0-spa';\nimport * as serviceWorker from './serviceWorker';\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = appState => {\n  window.history.replaceState(\n    {},\n    document.title,\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\nconst redirectURI = `${window.location.origin}${process.env.PUBLIC_URL}`;\n\nconst ProdAuthorizationProvider = ({ children }) => (\n  <Auth0Provider\n    domain={config.domain}\n    client_id={config.clientId}\n    redirect_uri={redirectURI}\n    onRedirectCallback={onRedirectCallback}\n    audience={config.audience}\n    scope='beta'\n    returnTo={redirectURI}\n  >\n    <AuthApolloProvider>{children}</AuthApolloProvider>\n  </Auth0Provider>\n);\n\nProdAuthorizationProvider.propTypes = {\n  children: PropTypes.node,\n};\n\nconst DevAuthorizationProvider = ({ children }) => (\n  <Auth0Context.Provider\n    value={{\n      isAuthenticated: true,\n      loading: false,\n      loginWithRedirect: () => {},\n      user: {\n        name: 'Valerie Luna',\n        picture: 'https://source.unsplash.com/QAB-WJcbgJk/60x60',\n        locale: 'pl',\n      },\n      getTokenScopes: () => Promise.resolve(['beta']),\n      logout: () => {},\n    }}\n  >\n    <ApolloProvider client={createClient()}>{children}</ApolloProvider>\n  </Auth0Context.Provider>\n);\n\nDevAuthorizationProvider.propTypes = {\n  children: PropTypes.node,\n};\n\nconst authDisabled = process.env.REACT_APP_INSECURE_AUTH_DISABLED;\nconst AuthorizationProvider =\n  authDisabled !== 'true'\n    ? ProdAuthorizationProvider\n    : DevAuthorizationProvider;\n\nReactDOM.render(\n  <AuthorizationProvider>\n    <Beta>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n      </BrowserRouter>\n    </Beta>\n  </AuthorizationProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\n\nimport { useAuth0 } from '../react-auth0-spa';\n\nexport function Beta({ children }) {\n  const { getTokenScopes } = useAuth0();\n  const [scope, setScope] = useState();\n\n  useEffect(() => {\n    getTokenScopes().then(setScope);\n  }, [setScope, getTokenScopes]);\n\n  if (!scope) {\n    return <div></div>;\n  }\n\n  const isBetaUser = scope.some(v => v === 'beta');\n\n  if (isBetaUser) {\n    return children;\n  }\n  return <div>This conent is available only to beta users</div>;\n}\n\nBeta.propTypes = {\n  children: PropTypes.node,\n};\n"],"sourceRoot":""}