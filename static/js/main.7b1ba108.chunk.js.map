{"version":3,"sources":["components/sbadmin2/context.js","components/sbadmin2/Topbar/TopbarContext.js","components/sbadmin2/Topbar/Topbar.js","components/sbadmin2/Topbar/TopbarMenu.js","components/sbadmin2/Topbar/TopbarUser.js","components/sbadmin2/Topbar/TopbarContextSwitcher.js","components/gql/monthlyReport.js","components/gql/envelopes.js","util/immutable.js","components/gql/plans.js","components/gql/accounts.js","components/gql/transfers.js","components/gql/expenses.js","components/gql/budget.js","components/sbadmin2/utilities/Spinner.js","components/sbadmin2/language.js","util/capitalize.js","components/sbadmin2/components/Panel/PanelTitle.js","components/sbadmin2/components/Panel/Panel.js","components/sbadmin2/components/Panel/PanelHeader.js","components/sbadmin2/components/Panel/PanelBody.js","components/sbadmin2/components/Table/Table.js","components/sbadmin2/components/TablePanel/TablePanel.js","components/sbadmin2/components/OpenModalButton/OpenModalButton.js","components/sbadmin2/components/Page/PageHeader.js","components/sbadmin2/components/Page/Page.js","components/sbadmin2/components/Icon/Icon.js","components/sbadmin2/bootstrap.js","components/sbadmin2/components/ClickableIcon/ClickableIcon.js","components/sbadmin2/components/SplitButton/SplitButton.js","components/sbadmin2/NotFoundPage.js","components/sbadmin2/Sidebar/SidebarCollapsibleLink.js","components/sbadmin2/Sidebar/SidebarSimpleLink.js","components/sbadmin2/Sidebar/SidebarGroup.js","components/sbadmin2/Sidebar/Sidebar.js","components/sbadmin2/SBAdmin2.js","components/sbadmin2/utilities/FormControl.js","components/sbadmin2/utilities/SaveButton.js","components/sbadmin2/utilities/CancelButton.js","components/sbadmin2/utilities/FormInModal.js","components/TopbarBudgetSwitcher.js","react-auth0-spa.js","components/Topbar.js","components/App/sidebarConfig.js","components/sbadmin2/utilities/RefreshButton.js","components/gql/WithQuery.js","components/gql/QueryTablePanel.js","model/Amount.js","components/sbadmin2/utilities/CreateButton.js","components/sbadmin2/utilities/useFormData.js","components/Accounts/AccountModal.js","components/Accounts/CreateAccountButton.js","components/Accounts/UpdateAccountButton.js","components/Accounts/AccountsTablePanel.js","components/Expenses/DeleteExpenseButton.js","model/Day.js","model/Month.js","components/sbadmin2/utilities/Combobox.js","components/sbadmin2/utilities/InlineFormControl.js","components/gql/categories.js","components/Expenses/CategoriesInput.js","components/Expenses/ExpenseModal.js","components/Expenses/UpdateExpenseButton.js","components/Expenses/ExpensesTablePanel.js","components/Expenses/CreateExpenseButton.js","components/Accounts/Accounts.js","components/sbadmin2/utilities/OptionalFormControl.js","model/propTypes.js","components/Envelopes/EnvelopeModal.js","components/Envelopes/CreateEnvelopeButton.js","components/Envelopes/UpdateEnvelopeButton.js","components/Envelopes/EnvelopesListPanel.js","components/Categories/CategoryModal.js","components/Categories/CreateCategoryButton.js","components/Categories/UpdateCategoryButton.js","components/Categories/CategoriesListPanel.js","components/Envelopes/EnvelopesPage.js","components/Expenses/ExpensesPage.js","components/Transfers.js","components/Plans.js","components/sbadmin2/Gauge.js","components/MonthDashboardPage.js","lang/pl.js","components/App/App.js","serviceWorker.js","apollo.js","index.js","components/Beta.js"],"names":["SBAdmin2Context","React","createContext","SBAdmin2Provider","user","logout","children","useState","sidebarToggled","setSidebarToggled","Provider","value","toggleSidebar","current","useSBAdmin2","useContext","TopbarContextExpanded","renderContext","className","TopbarContextMinimized","faIcon","id","role","data-toggle","aria-haspopup","aria-expanded","style","cursor","aria-labelledby","TopbarContext","minified","props","Topbar","renderMenus","renderUser","faIconContextMinified","onClick","TopbarMenuCounter","counter","badge","TopbarMenu","name","iconClasses","classnames","TopbarUser","alt","src","picture","data-target","TopbarContextSwitcher","label","onChange","allowedValues","display","alignContent","flexGrow","aria-label","maxWidth","map","v","key","MONTHLY_REPORT_FRAGMENT","gql","GET_CURRENT_MONTHLY_REPORT","GET_ENVELOPES","CREATE_ENVELOPE","UPDATE_ENVELOPE","useGetEnvelopes","selectedBudget","useBudget","useQuery","variables","budgetID","removeFromListByID","list","elementId","idx","findIndex","e","slice","length","PLAN_FRAGMENT","GET_CURRENT_PLANS","CREATE_PLAN","UPDATE_PLAN","DELETE_PLAN","GET_ACCOUNTS","useGetAccounts","CREATE_ACCOUNT","UPDATE_ACCOUNT","TRANSFER_FRAGMENT","GET_CURRENT_TRANSFERS","CREATE_TRANSFER","UPDATE_TRANSFER","DELETE_TRANSFER","EXPENSE_FRAGMENT","GET_CURRENT_EXPENSES","CREATE_EXPENSE","UPDATE_EXPENSE","DELETE_EXPENSE","BudgetContext","GET_BUDGETS","storageKey","BudgetProvider","setSelectedBudget","loading","error","data","useEffect","sessionStorage","setItem","budgets","lastChosenID","getItem","lastChosen","find","b","console","CLOSE_CURRENT_MONTH","Spinner","size","variant","classNames","DictionaryContext","DictionaryProvider","dictionaries","locale","useDictionary","withDictionary","prop","Component","readPropName","string","readDict","charAt","toUpperCase","newProps","dictionary","title","Panel","Title","PanelTitle","Header","Body","addColumnNames","columns","c","text","dataField","columnNames","bootstrap4","headerButtons","panelClassName","modifiedColumns","classes","headerClasses","striped","hover","bordered","OpenModalButton","Button","button","ModalContent","modalContent","onClickRef","show","setShow","onHide","Modal","Page","Icon","icon","PageHeader","Archive","Trash","Edit","Plus","Minus","Save","ClipboardCheck","Variant","secondary","primary","danger","success","warning","white","Size","sm","lg","ClickableIcon","stopPropagation","preventDefault","SplitButton","disabled","_ref","ref","NotFoundPage","data-text","to","SidebarCollapsibleLink","parent","sections","isActive","location","some","routes","pathname","oneOfRoutsMatchesLocation","useLocation","active","aria-controls","data-parent","Fragment","SidebarSimpleLink","exact","SidebarGroup","group","entries","entry","undefined","Sidebar","renderBrandName","renderBrandIcon","config","toggled","SBAdmin2","sidebarProps","topbar","copyright","component","FormControl","inline","Form","Group","as","Row","Label","column","Input","SaveButton","buttons","save","CancelButton","cancel","FormInModal","onSave","formData","validated","setValidated","form","useRef","handleSave","event","isValid","checkValidity","changed","input","onSubmit","closeButton","Footer","TopbarBudgetSwitcher","budgetLabel","budget","feedback","Col","Control","defaultValue","default","Feedback","type","defaultProps","DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","Auth0Context","useAuth0","Auth0Provider","onRedirectCallback","returnTo","initOptions","isAuthenticated","setIsAuthenticated","setUser","token","setToken","auth0Client","setAuth0","setLoading","popupOpen","setPopupOpen","a","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","appState","getUser","getTokenSilently","initAuth0","loginWithPopup","params","getIdTokenClaims","loginWithRedirect","getTokenWithPopup","p","getTokenScopes","claimsString","split","claims","JSON","parse","atob","scope","pictureUrl","alertsLabel","messagesLabel","sidebarConfig","sidebar","pages","dashboard","currentMonth","expenses","transfers","plans","accounts","envelopes","RefreshButton","ErrorMessageList","errorMessage","subErrors","ErrorMessage","networkError","result","errors","graphQLErrors","path","join","message","WithQuery","query","showError","QueryTablePanel","getData","refetch","Amount","Math","round","Number","amount","kSeparator","fixed","toFixed","parts","replace","CreateButton","create","createFormData","model","rerender","getRoot","Object","prototype","hasOwnProperty","call","$model","$init","_originalPush","push","removeAt","splice","arrayFormData","$process","$default","process","_default","init","simpleFormData","$includeAllValues","keys","reduce","acc","k","compositeFormData","useFormData","setValue","AccountModal","autoFocusRef","modal","labels","CreateAccountButton","useMutation","update","cache","createAccount","readQuery","writeQuery","concat","mutation","rest","useCreateAccount","createTitle","UpdateAccountButton","account","useUpdateAccount","updateAccount","editTitle","sort","align","headerAlign","formatter","format","isDummyColumn","cell","row","whiteSpace","width","defaultSorted","order","AccountsTablePanel","onSelectAcount","selectRow","mode","clickToSelect","hideSelectColumn","onSelect","keyField","readTitle","d","table","readColumnNames","DeleteExpenseButton","expense","deleteExpense","refetchQueries","useDeleteExpense","Day","year","month","day","this","String","padStart","date","Date","getYear","getMonth","getDate","monthNames","Month","Combobox","defaultValueObject","filter","setFilter","selectedIdx","setSelectedIdx","menuRef","filtered","toLowerCase","selectedLabel","target","selected","onBlur","onKeyDown","keyCode","data-reference","data-flip","borderTopLeftRadius","borderBottomLeftRadius","margin","maxHeight","overflowY","InlineFormControl","GET_CATEGORIES","CREATE_CATEGORY","UPDATE_CATEGORY","useGetCategories","CategoriesInput","categories","category","categoryFormData","categoryID","required","placeholder","step","ExpenseModal","defaultValues","accountsQuery","accountID","first","firstDay","last","lastDay","accountsData","min","max","UpdateExpenseButton","useUpdateExpense","updateExpense","rowClasses","rowIndex","expandRow","renderer","ExpensesTablePanel","createButton","accountFilter","hiddenColumns","useGetCurrentExpenses","filters","getExpenses","hideColumns","hidden","hc","CreateExpenseButton","createExpense","useCreateExpense","Accounts","selectedAccount","setSelectedAccount","expensesTableTitle","OptionalFormControl","initEnabled","enabled","setEnabled","toggleEnabled","Check","custom","checked","autoFocus","PropTypes","number","Account","shape","isRequired","Envelope","totalBalance","envelope","EnvelopeModal","limit","CreateEnvelopeButton","createEnvelope","useCreateEnvelope","UpdateEnvelopeButton","useUpdateEnvelope","updateEnvelope","balance","EnvelopesListPanel","createFunRef","openRef","CategoryModal","envelopeID","description","CreateCategoryButton","createCategory","useCreateCategory","UpdateCategoryButton","useUpdateCategory","CategoriesListPanel","keyMap","handlers","createEnvelopeFunRef","createCategoryFunRef","EnvelopesPage","ExpensesPage","UpdateTransferButton","transfer","DeleteTransferButton","TransferModal","fromAccountID","fromAccount","toAccountID","toAccount","deleteTransfer","useDeleteTranfer","useUpdateTransfer","updateTransfer","CreateTransferButton","createTransfer","useCreateTransfer","openModal","keyHandlers","openCreateModal","click","Transfers","useGetCurrentTransfers","UpdatePlanButton","plan","DeletePlanButton","PlanModal","currentAmount","recurringAmount","fd","fromEnvelopeID","fromEnvelope","toEnvelopeID","toEnvelope","recurring","useUpdatePlan","updatePlan","deletePlan","useDeletePlan","CreatePlanButton","createPlan","useCreatePlan","renderModal","openCreateModalRef","Plans","useGetCurrentPlans","Gauge","Gauges","planned","totalPlannedAmount","incomes","totalIncomeAmount","leftToPlan","totalExpenseAmount","severityIcon","ERROR","WARNING","INFO","severityVariant","ProblemMessage","problem","envelopesQuery","envelopesData","__typename","overplanned","problems","underplanned","expensesExceedPlans","envelopeOverLimit","negativeAccountBalance","monthNotEnded","Problem","severity","NoProblems","noProblems","MonthProblems","StartNextMonthButton","warn","useCloseCurrentMonth","closeCurrentMonth","closeMonth","CurrentMonth","months","parsed","MonthDashboardPage","fetchPolicy","useGetCurrentMonthlyReport","overLimit","totalAmount","pl","Boolean","hostname","match","fragmentMatcher","IntrospectionFragmentMatcher","introspectionQueryResultData","createClient","graphqlApiUrl","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","InMemoryCache","errorLink","onError","REACT_APP_ENV","locations","log","link","ApolloClient","ApolloLink","from","connectToDevTools","AuthApolloProvider","client","targetUrl","redirectURI","origin","AuthorizationProvider","REACT_APP_INSECURE_AUTH_DISABLED","domain","client_id","clientId","redirect_uri","audience","Promise","resolve","ReactDOM","render","setScope","then","basename","Consumer","Envelopes","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7b1ba108.chunk.js","sourcesContent":["import React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nconst SBAdmin2Context = React.createContext();\n\nexport function SBAdmin2Provider({ user, logout, children }) {\n  const [sidebarToggled, setSidebarToggled] = useState(false);\n  return (\n    <SBAdmin2Context.Provider\n      value={{\n        sidebarToggled,\n        user,\n        logout,\n        toggleSidebar: () => setSidebarToggled(current => !current),\n      }}\n    >\n      {children}\n    </SBAdmin2Context.Provider>\n  );\n}\n\nSBAdmin2Provider.propTypes = {\n  children: PropTypes.any,\n};\n\nexport const useSBAdmin2 = () => useContext(SBAdmin2Context);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction TopbarContextExpanded({ renderContext }) {\n  return (\n    <form className=\"d-none d-sm-inline-block form-inline mr-auto ml-md-3 my-2 my-md-0 mw-100 navbar-context\">\n      {renderContext()}\n    </form>\n  );\n}\n\nfunction TopbarContextMinimized({ faIcon, renderContext }) {\n  return (\n    <li className=\"nav-item dropdown no-arrow d-sm-none\">\n      <span\n        className=\"nav-link dropdown-toggle\"\n        id=\"contextDropdown\"\n        role=\"button\"\n        data-toggle=\"dropdown\"\n        aria-haspopup=\"true\"\n        aria-expanded=\"false\"\n        style={{ cursor: 'pointer' }}\n      >\n        <i className={`fas fa-${faIcon} fa-fw`}></i>\n      </span>\n      <div\n        className=\"dropdown-menu dropdown-menu-right p-3 shadow animated--grow-in\"\n        aria-labelledby=\"contextDropdown\"\n      >\n        <form className=\"form-inline mr-auto w-100 navbar-context\">\n          {renderContext()}\n        </form>\n      </div>\n    </li>\n  );\n}\n\nexport default function TopbarContext({ minified, ...props }) {\n  return minified ? (\n    <TopbarContextMinimized {...props} />\n  ) : (\n    <TopbarContextExpanded {...props} />\n  );\n}\n\nTopbarContext.propTypes = {\n  minified: PropTypes.bool,\n};\n","import React from 'react';\nimport { useSBAdmin2 } from '../context';\nimport './Topbar.css';\nimport TopbarContext from './TopbarContext';\n\nexport default function Topbar({\n  renderMenus,\n  renderContext,\n  renderUser,\n  faIconContextMinified,\n}) {\n  const { toggleSidebar } = useSBAdmin2();\n\n  return (\n    <nav className=\"navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow\">\n      <button\n        onClick={toggleSidebar}\n        className=\"btn btn-link d-md-none rounded-circle mr-3\"\n      >\n        <i className=\"fa fa-bars\"></i>\n      </button>\n\n      <TopbarContext minified={false} renderContext={renderContext} />\n\n      <ul className=\"navbar-nav ml-auto\">\n        <TopbarContext\n          minified={true}\n          renderContext={renderContext}\n          faIcon={faIconContextMinified}\n        />\n\n        {renderMenus()}\n\n        <div className=\"topbar-divider d-none d-sm-block\" />\n\n        {renderUser()}\n      </ul>\n    </nav>\n  );\n}\n","import React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nfunction TopbarMenuCounter({ counter }) {\n  const badge = counter >= 3 ? '3+' : '' + counter;\n  return (\n    counter > 0 && (\n      <span className=\"badge badge-danger badge-counter\">{badge}</span>\n    )\n  );\n}\n\nexport function TopbarMenu({ name, faIcon, children, counter }) {\n  const iconClasses = classnames('fas', 'fa-fw', `fa-${faIcon}`);\n  const id = `topbar--${name || faIcon}`;\n  return (\n    <li className=\"nav-item dropdown no-arrow mx-1\">\n      <span\n        className=\"nav-link dropdown-toggle\"\n        id={id}\n        role=\"button\"\n        data-toggle=\"dropdown\"\n        aria-haspopup=\"true\"\n        aria-expanded=\"false\"\n        style={{ cursor: 'pointer' }}\n      >\n        <i className={iconClasses} />\n        <TopbarMenuCounter counter={counter} />\n      </span>\n      <div\n        className=\"dropdown-list dropdown-menu dropdown-menu-right shadow animated--grow-in\"\n        aria-labelledby={id}\n      >\n        <h6 className=\"dropdown-header\">{name}</h6>\n        {children}\n        <span\n          className=\"dropdown-item text-center small text-gray-500\"\n          style={{ cursor: 'pointer' }}\n        >\n          Show All\n        </span>\n      </div>\n    </li>\n  );\n}\n\nTopbarMenu.propTypes = {\n  entries: PropTypes.arrayOf(\n    PropTypes.shape({\n      highlighted: PropTypes.bool,\n      render: PropTypes.func.isRequired,\n    })\n  ),\n  faIcon: PropTypes.string,\n  name: PropTypes.string,\n};\n","import React from 'react';\nimport { useSBAdmin2 } from '../context';\n\nexport default function TopbarUser() {\n  const { user, logout } = useSBAdmin2();\n  return (\n    <li className=\"nav-item dropdown no-arrow\">\n      <span\n        className=\"nav-link dropdown-toggle\"\n        id=\"userDropdown\"\n        role=\"button\"\n        data-toggle=\"dropdown\"\n        aria-haspopup=\"true\"\n        aria-expanded=\"false\"\n      >\n        <span className=\"mr-2 d-none d-lg-inline text-gray-600 small\">\n          {user.name}\n        </span>\n        <img alt=\"\" className=\"img-profile rounded-circle\" src={user.picture} />\n      </span>\n      <ul\n        className=\"dropdown-menu dropdown-menu-right shadow animated--grow-in\"\n        aria-labelledby=\"userDropdown\"\n      >\n        <li className=\"dropdown-item\">\n          <i className=\"fas fa-cogs fa-sm fa-fw mr-2 text-gray-400\"></i>\n          Settings\n        </li>\n        <div className=\"dropdown-divider\"></div>\n        <li\n          className=\"dropdown-item\"\n          data-toggle=\"modal\"\n          data-target=\"#logoutModal\"\n          onClick={() => logout()}\n        >\n          <i className=\"fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400\"></i>\n          Logout\n        </li>\n      </ul>\n    </li>\n  );\n}\n","import React from 'react';\n\nexport default function TopbarContextSwitcher({\n  label,\n  value,\n  onChange,\n  allowedValues,\n}) {\n  return (\n    <div\n      className=\"input-group navbar-context-switcher\"\n      style={{ display: 'flex', alignContent: 'stretch' }}\n    >\n      <div className=\"input-group-prepend navbar-context-switcher-label\">\n        <label className=\"input-group-text border-0\">{label}</label>\n      </div>\n      <div\n        className=\"input-group-append btn-group\"\n        style={{\n          flexGrow: 1,\n        }}\n      >\n        <span\n          className=\"input-group-text bg-light border-0 navbar-context-display text-dark\"\n          aria-label={label}\n          style={{ flexGrow: 1 }}\n        >\n          {value}\n        </span>\n        <button\n          className=\"btn btn-primary dropdown-toggle dropdown-toggle-split no-arrow\"\n          data-toggle=\"dropdown\"\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\"\n          style={{ maxWidth: '2rem' }}\n        />\n        <div className=\"dropdown-menu\">\n          {allowedValues.map(v => (\n            <span\n              className=\"dropdown-item\"\n              onClick={() => onChange(v.id)}\n              key={v.id}\n            >\n              {v.label}\n            </span>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import gql from 'graphql-tag';\nimport { useBudget } from './budget';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst MONTHLY_REPORT_FRAGMENT = gql`\n  fragment MonthlyReport on MonthlyReport {\n    month\n    totalPlannedAmount\n    totalIncomeAmount\n    totalExpenseAmount\n    problems {\n      severity\n      ... on EnvelopeOverLimit {\n        id\n      }\n      ... on NegativeBalanceOnAccount {\n        id\n      }\n      ... on NegativeBalanceOnEnvelope {\n        id\n      }\n      ... on Misplanned {\n        overplanned\n      }\n    }\n  }\n`;\n\nexport const GET_CURRENT_MONTHLY_REPORT = gql`\n  query GetCurrentMonthlyReport($budgetID: ID!) {\n    budget(budgetID: $budgetID) {\n      currentMonth {\n        ...MonthlyReport\n      }\n    }\n  }\n  ${MONTHLY_REPORT_FRAGMENT}\n`;\n\nexport function useGetCurrentMonthlyReport() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_CURRENT_MONTHLY_REPORT, {\n    variables: { budgetID: selectedBudget.id },\n    fetchPolicy: 'network-only',\n  });\n}\n","import gql from 'graphql-tag';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { useBudget } from './budget';\n\nexport const GET_ENVELOPES = gql`\n  query GetEnvelopes($budgetID: ID!) {\n    envelopes(budgetID: $budgetID) {\n      id\n      name\n      balance\n      limit\n    }\n  }\n`;\n\nconst CREATE_ENVELOPE = gql`\n  mutation CreateEnvelope($budgetID: ID!, $input: EnvelopeInput!) {\n    createEnvelope(budgetID: $budgetID, in: $input) {\n      id\n      name\n      balance\n      limit\n    }\n  }\n`;\n\nconst UPDATE_ENVELOPE = gql`\n  mutation UpdateEnvelope($budgetID: ID!, $id: ID!, $input: EnvelopeUpdate!) {\n    updateEnvelope(budgetID: $budgetID, id: $id, in: $input) {\n      id\n      name\n      balance\n      limit\n    }\n  }\n`;\n\nexport function useCreateEnvelope() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_ENVELOPE, {\n    update: (cache, { data: { createEnvelope } }) => {\n      const { envelopes } = cache.readQuery({\n        query: GET_ENVELOPES,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_ENVELOPES,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          envelopes: envelopes.concat([createEnvelope]),\n        },\n      });\n    },\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useUpdateEnvelope() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_ENVELOPE);\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useGetEnvelopes() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_ENVELOPES, {\n    variables: { budgetID: selectedBudget.id },\n  });\n}\n","export function addToList(list, element) {\n  return [...list, element]\n}\n\nexport function removeFromList(list, element) {\n  const idx = list.indexOf(element);\n  if (idx === -1) {\n    return list\n  }\n  return [...list.slice(0, idx), ...list.slice(idx+1, list.length)]\n}\n\nexport function removeFromListByID(list, elementId) {\n  const idx = list.findIndex(e => e.id === elementId);\n  if (idx === -1) {\n    return list\n  }\n  return [...list.slice(0, idx), ...list.slice(idx+1, list.length)]\n}\n\nexport function replaceOnList(list, idx, element) {\n  if (idx < 0 || idx > list.length) {\n    return list\n  }\n  return [...list.slice(0, idx), element, ...list.slice(idx+1, list.length)]\n}\n\nexport function replaceOnListByID(list, element) {\n  const idx = list.findIndex(e => e.id === element.id);\n\n  if (idx === -1) {\n    return list\n  }\n\n  return [...list.slice(0, idx), element, ...list.slice(idx+1, list.length)]\n}","import gql from 'graphql-tag';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { useBudget } from './budget';\nimport { GET_ENVELOPES } from './envelopes';\nimport { GET_CURRENT_MONTHLY_REPORT } from './monthlyReport';\nimport { removeFromListByID } from '../../util/immutable';\n\nconst PLAN_FRAGMENT = gql`\n  fragment Plan on Plan {\n    id\n    title\n    fromEnvelope {\n      id\n      name\n    }\n    toEnvelope {\n      id\n      name\n    }\n    currentAmount\n    recurringAmount\n  }\n`;\n\nexport const GET_CURRENT_PLANS = gql`\n  query getCurrentPlans($budgetID: ID!) {\n    budget(budgetID: $budgetID) {\n      currentMonth {\n        plans {\n          ...Plan\n        }\n      }\n    }\n  }\n  ${PLAN_FRAGMENT}\n`;\n\nexport function useGetCurrentPlans() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_CURRENT_PLANS, {\n    variables: { budgetID: selectedBudget.id },\n  });\n}\n\nconst CREATE_PLAN = gql`\n  mutation createPlan($budgetID: ID!, $input: PlanInput!) {\n    createPlan(budgetID: $budgetID, in: $input) {\n      ...Plan\n    }\n  }\n  ${PLAN_FRAGMENT}\n`;\n\nexport function useCreatePlan() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_PLAN, {\n    update: (cache, { data: { createPlan } }) => {\n      const { budget } = cache.readQuery({\n        query: GET_CURRENT_PLANS,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_CURRENT_PLANS,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          budget: {\n            ...budget,\n            currentMonth: {\n              ...budget.currentMonth,\n              plans: budget.currentMonth.plans.concat([createPlan]),\n            },\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_CURRENT_MONTHLY_REPORT,\n        variables: { budgetID: selectedBudget.id },\n      },\n    ],\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nconst UPDATE_PLAN = gql`\n  mutation updatePlan($budgetID: ID!, $id: ID!, $input: PlanUpdate!) {\n    updatePlan(budgetID: $budgetID, id: $id, in: $input) {\n      ...Plan\n    }\n  }\n  ${PLAN_FRAGMENT}\n`;\n\nexport function useUpdatePlan() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_PLAN, {\n    refetchQueries: () => [\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_CURRENT_MONTHLY_REPORT,\n        variables: { budgetID: selectedBudget.id },\n      },\n    ],\n  });\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nconst DELETE_PLAN = gql`\n  mutation deletePlan($budgetID: ID!, $id: ID!) {\n    deletePlan(budgetID: $budgetID, id: $id) {\n      id\n    }\n  }\n`;\n\nexport function useDeletePlan() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(DELETE_PLAN, {\n    update: (cache, { data: { deletePlan } }) => {\n      const { budget } = cache.readQuery({\n        query: GET_CURRENT_PLANS,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_CURRENT_PLANS,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          budget: {\n            ...budget,\n            currentMonth: {\n              ...budget.currentMonth,\n              plans: removeFromListByID(\n                budget.currentMonth.plans,\n                deletePlan.id\n              ),\n            },\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_CURRENT_MONTHLY_REPORT,\n        variables: { budgetID: selectedBudget.id },\n      },\n    ],\n  });\n  const wrapper = id => {\n    mutation({ variables: { budgetID: selectedBudget.id, id } });\n  };\n  return [wrapper, ...rest];\n}\n","import gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { useBudget } from './budget';\n\nexport const GET_ACCOUNTS = gql`\n  query GetAccounts($budgetID: ID!) {\n    accounts(budgetID: $budgetID) {\n      id\n      name\n      balance\n    }\n  }\n`;\n\nexport function useGetAccounts() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_ACCOUNTS, {\n    variables: { budgetID: selectedBudget.id },\n  });\n}\n\nconst CREATE_ACCOUNT = gql`\n  mutation CreateAccount($budgetID: ID!, $input: AccountInput!) {\n    createAccount(budgetID: $budgetID, in: $input) {\n      id\n      name\n      balance\n    }\n  }\n`;\n\nexport function useCreateAccount() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_ACCOUNT, {\n    update: (cache, { data: { createAccount } }) => {\n      const { accounts } = cache.readQuery({\n        query: GET_ACCOUNTS,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_ACCOUNTS,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          accounts: accounts.concat([createAccount]),\n        },\n      });\n    },\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nconst UPDATE_ACCOUNT = gql`\n  mutation UpdateAccount($budgetID: ID!, $id: ID!, $input: AccountUpdate!) {\n    updateAccount(budgetID: $budgetID, id: $id, in: $input) {\n      id\n      name\n      balance\n    }\n  }\n`;\n\nexport function useUpdateAccount() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_ACCOUNT);\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n","import gql from 'graphql-tag';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { useBudget } from './budget';\nimport { GET_CURRENT_MONTHLY_REPORT } from './monthlyReport';\nimport { GET_ACCOUNTS } from './accounts';\nimport { removeFromListByID } from '../../util/immutable';\n\nconst TRANSFER_FRAGMENT = gql`\n  fragment Transfer on Transfer {\n    id\n    title\n    fromAccount {\n      id\n      name\n    }\n    toAccount {\n      id\n      name\n    }\n    amount\n    date\n  }\n`;\n\nexport const GET_CURRENT_TRANSFERS = gql`\n  query getCurrentTransfers($budgetID: ID!) {\n    budget(budgetID: $budgetID) {\n      currentMonth {\n        transfers {\n          ...Transfer\n        }\n      }\n    }\n  }\n  ${TRANSFER_FRAGMENT}\n`;\n\nexport function useGetCurrentTransfers() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_CURRENT_TRANSFERS, {\n    variables: { budgetID: selectedBudget.id },\n  });\n}\n\nconst CREATE_TRANSFER = gql`\n  mutation createTransfer($budgetID: ID!, $input: TransferInput!) {\n    createTransfer(budgetID: $budgetID, in: $input) {\n      ...Transfer\n    }\n  }\n  ${TRANSFER_FRAGMENT}\n`;\n\nexport function useCreateTransfer() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_TRANSFER, {\n    update: (cache, { data: { createTransfer } }) => {\n      const { budget } = cache.readQuery({\n        query: GET_CURRENT_TRANSFERS,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_CURRENT_TRANSFERS,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          budget: {\n            ...budget,\n            currentMonth: {\n              ...budget.currentMonth,\n              transfers: budget.currentMonth.transfers.concat([createTransfer]),\n            },\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_CURRENT_MONTHLY_REPORT,\n        variables: { budgetID: selectedBudget.id },\n      },\n    ],\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nconst UPDATE_TRANSFER = gql`\n  mutation updateTransfer($budgetID: ID!, $id: ID!, $input: TransferUpdate!) {\n    updateTransfer(budgetID: $budgetID, id: $id, in: $input) {\n      ...Transfer\n    }\n  }\n  ${TRANSFER_FRAGMENT}\n`;\n\nexport function useUpdateTransfer() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_TRANSFER, {\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_CURRENT_MONTHLY_REPORT,\n        variables: { budgetID: selectedBudget.id },\n      },\n    ],\n  });\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nconst DELETE_TRANSFER = gql`\n  mutation deleteTransfer($budgetID: ID!, $id: ID!) {\n    deleteTransfer(budgetID: $budgetID, id: $id) {\n      id\n    }\n  }\n`;\n\nexport function useDeleteTranfer() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(DELETE_TRANSFER, {\n    update: (cache, { data: { deleteTransfer } }) => {\n      const { budget } = cache.readQuery({\n        query: GET_CURRENT_TRANSFERS,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_CURRENT_TRANSFERS,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          budget: {\n            ...budget,\n            currentMonth: {\n              ...budget.currentMonth,\n              transfers: removeFromListByID(\n                budget.currentMonth.transfers,\n                deleteTransfer.id\n              ),\n            },\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_CURRENT_MONTHLY_REPORT,\n        variables: { budgetID: selectedBudget.id },\n      },\n    ],\n  });\n  const wrapper = id => {\n    mutation({ variables: { budgetID: selectedBudget.id, id } });\n  };\n  return [wrapper, ...rest];\n}\n","import gql from 'graphql-tag';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { useBudget } from './budget';\nimport { removeFromListByID } from '../../util/immutable';\nimport { GET_ACCOUNTS } from './accounts';\nimport { GET_CURRENT_MONTHLY_REPORT } from './monthlyReport';\nimport { GET_ENVELOPES } from './envelopes';\n\nconst EXPENSE_FRAGMENT = gql`\n  fragment Expense on Expense {\n    id\n    title\n    account {\n      id\n      name\n    }\n    categories {\n      category {\n        id\n        name\n      }\n      amount\n    }\n    totalAmount\n    date\n  }\n`;\n\nexport const GET_CURRENT_EXPENSES = gql`\n  query getCurrentExpenses($budgetID: ID!) {\n    budget(budgetID: $budgetID) {\n      currentMonth {\n        expenses {\n          ...Expense\n        }\n      }\n    }\n  }\n\n  ${EXPENSE_FRAGMENT}\n`;\n\nconst CREATE_EXPENSE = gql`\n  mutation createExpense($budgetID: ID!, $input: ExpenseInput!) {\n    createExpense(budgetID: $budgetID, in: $input) {\n      ...Expense\n    }\n  }\n\n  ${EXPENSE_FRAGMENT}\n`;\n\nconst UPDATE_EXPENSE = gql`\n  mutation updateExpense($budgetID: ID!, $id: ID!, $input: ExpenseUpdate!) {\n    updateExpense(budgetID: $budgetID, id: $id, in: $input) {\n      ...Expense\n    }\n  }\n\n  ${EXPENSE_FRAGMENT}\n`;\n\nexport function useCreateExpense() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_EXPENSE, {\n    update: (cache, { data: { createExpense } }) => {\n      const { budget } = cache.readQuery({\n        query: GET_CURRENT_EXPENSES,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_CURRENT_EXPENSES,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          budget: {\n            ...budget,\n            currentMonth: {\n              ...budget.currentMonth,\n              expenses: budget.currentMonth.expenses.concat([createExpense]),\n            },\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_CURRENT_MONTHLY_REPORT,\n        variables: { budgetID: selectedBudget.id },\n      },\n    ],\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useUpdateExpense() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_EXPENSE, {\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_CURRENT_MONTHLY_REPORT,\n        variables: { budgetID: selectedBudget.id },\n      },\n    ],\n  });\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useGetCurrentExpenses() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_CURRENT_EXPENSES, {\n    variables: { budgetID: selectedBudget.id },\n  });\n}\n\nconst DELETE_EXPENSE = gql`\n  mutation deleteExpense($budgetID: ID!, $id: ID!) {\n    deleteExpense(budgetID: $budgetID, id: $id) {\n      id\n    }\n  }\n`;\n\nexport function useDeleteExpense() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(DELETE_EXPENSE, {\n    update: (cache, { data: { deleteExpense } }) => {\n      const { budget } = cache.readQuery({\n        query: GET_CURRENT_EXPENSES,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_CURRENT_EXPENSES,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          budget: {\n            ...budget,\n            currentMonth: {\n              ...budget.currentMonth,\n              expenses: removeFromListByID(\n                budget.currentMonth.expenses,\n                deleteExpense.id\n              ),\n            },\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_CURRENT_MONTHLY_REPORT,\n        variables: { budgetID: selectedBudget.id },\n      },\n    ],\n  });\n  const wrapper = id => {\n    mutation({ variables: { budgetID: selectedBudget.id, id } });\n  };\n  return [wrapper, ...rest];\n}\n","import React, { createContext, useState, useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { GET_CURRENT_MONTHLY_REPORT } from './monthlyReport';\nimport { GET_CURRENT_PLANS } from './plans';\nimport { GET_CURRENT_TRANSFERS } from './transfers';\nimport { GET_CURRENT_EXPENSES } from './expenses';\n\nexport const BudgetContext = createContext();\nexport const useBudget = () => useContext(BudgetContext);\n\nconst GET_BUDGETS = gql`\n  query GetBudgets {\n    budgets {\n      id\n      name\n      currentMonth {\n        month\n      }\n    }\n  }\n`;\n\nconst storageKey = 'LAST-CHOSEN-BUDGET-ID';\n\nexport function BudgetProvider({ children }) {\n  const [selectedBudget, setSelectedBudget] = useState(null);\n  const { loading, error, data } = useQuery(GET_BUDGETS);\n  useEffect(() => {\n    if (selectedBudget) {\n      sessionStorage.setItem(storageKey, selectedBudget.id);\n    }\n  }, [selectedBudget]);\n  useEffect(() => {\n    if (!selectedBudget && data && data.budgets) {\n      const lastChosenID = sessionStorage.getItem(storageKey);\n      const lastChosen = data.budgets.find(b => b.id === lastChosenID);\n      if (lastChosen) {\n        setSelectedBudget(lastChosen);\n      }\n    }\n  }, [data, selectedBudget]);\n  const value = {\n    selectedBudget,\n    setSelectedBudget,\n    loading,\n    error,\n    budgets: !loading && !error ? data.budgets : [],\n  };\n  if (error) {\n    console.error(error);\n  }\n  return (\n    <BudgetContext.Provider value={value}>{children}</BudgetContext.Provider>\n  );\n}\n\nBudgetProvider.propTypes = {\n  children: PropTypes.node,\n};\n\nconst CLOSE_CURRENT_MONTH = gql`\n  mutation closeMonth($budgetID: ID!) {\n    closeCurrentMonth(budgetID: $budgetID) {\n      id\n    }\n  }\n`;\n\nexport function useCloseCurrentMonth() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CLOSE_CURRENT_MONTH, {\n    refetchQueries: () => [\n      {\n        query: GET_CURRENT_MONTHLY_REPORT,\n        variables: { budgetID: selectedBudget.id },\n      },\n      {\n        query: GET_CURRENT_PLANS,\n        variables: { budgetID: selectedBudget.id },\n      },\n      {\n        query: GET_CURRENT_TRANSFERS,\n        variables: { budgetID: selectedBudget.id },\n      },\n      {\n        query: GET_CURRENT_EXPENSES,\n        variables: { budgetID: selectedBudget.id },\n      },\n    ],\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n","import React from 'react';\nimport classnames from 'classnames';\n\nexport default function Spinner({ size, variant }) {\n  const classNames = classnames('spinner-border', {\n    [`spinner-border-${size}`]: size,\n    [`text-${variant}`]: variant,\n  });\n  return (\n    <div className={classNames} role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </div>\n  );\n}\n","import React, { createContext, useContext } from 'react';\nimport { useSBAdmin2 } from './context';\nimport PropTypes from 'prop-types';\nimport { capitalize } from '../../util/capitalize';\n\nexport const DictionaryContext = createContext();\n\nexport function DictionaryProvider({ dictionaries, children }) {\n  const { user } = useSBAdmin2();\n  return (\n    <DictionaryContext.Provider value={dictionaries[user.locale]}>\n      {children}\n    </DictionaryContext.Provider>\n  );\n}\n\nDictionaryProvider.propTypes = {\n  dictionaries: PropTypes.object,\n  children: PropTypes.node,\n};\n\nexport const useDictionary = () => useContext(DictionaryContext);\n\nexport function withDictionary(prop, Component, readPropName) {\n  return props => {\n    readPropName = readPropName || `read${capitalize(prop)}`;\n    const readDict = props[readPropName];\n    const newProps = { ...props };\n    delete newProps[readPropName];\n    const dictionary = useDictionary();\n    if (readDict) {\n      newProps[prop] = readDict(dictionary);\n    }\n    return <Component {...newProps} />;\n  };\n}\n","export function capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { withDictionary } from '../../language';\n\nfunction PanelTitle({ title, className }) {\n  const classNames = classnames(\n    'm-0',\n    'font-weight-bold',\n    'text-primary',\n    className\n  );\n  return <h6 className={classNames}>{title}</h6>;\n}\n\nPanelTitle.propTypes = {\n  title: PropTypes.node.isRequired,\n  className: PropTypes.string,\n};\n\nexport default withDictionary('title', PanelTitle);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport PanelTitle from './PanelTitle';\nimport PanelHeader from './PanelHeader';\nimport PanelBody from './PanelBody';\n\nexport default function Panel({ children, className }) {\n  return (\n    <div className={classnames('card', 'shadow', 'mb-4', className)}>\n      {children}\n    </div>\n  );\n}\n\nPanel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n};\n\nPanel.Title = PanelTitle;\nPanel.Header = PanelHeader;\nPanel.Body = PanelBody;\n","import React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport default function PanelHeader({ className, children }) {\n  return <div className={classnames(className, 'card-header')}>{children}</div>;\n}\n\nPanelHeader.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n};\n","import React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport default function PanelBody({ className, children }) {\n  return <div className={classnames(className, 'card-body')}>{children}</div>;\n}\n\nPanelBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport BootstrapTable from 'react-bootstrap-table-next';\n\nimport { withDictionary } from '../../language';\n\nfunction Table({ columns, columnNames, ...props }) {\n  return (\n    <BootstrapTable\n      bootstrap4\n      columns={addColumnNames(columns, columnNames)}\n      {...props}\n    />\n  );\n}\n\nTable.propTypes = {\n  columns: PropTypes.array.isRequired,\n  columnNames: PropTypes.object.isRequired,\n};\n\nfunction addColumnNames(columns, dictionary) {\n  return columns.map(c => ({ ...c, text: dictionary[c.dataField] || '' }));\n}\n\nexport default withDictionary('columnNames', Table);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Panel from '../Panel/Panel';\nimport Table from '../Table/Table';\nimport { withDictionary } from '../../language';\n\nfunction TablePanel({\n  title,\n  columns,\n  headerButtons,\n  panelClassName,\n  ...props\n}) {\n  const paddedFirstColumn = {\n    ...columns[0],\n    classes: 'pl-3',\n    headerClasses: 'pl-3',\n  };\n  const modifiedColumns = [\n    paddedFirstColumn,\n    ...columns.slice(1, columns.length),\n  ];\n\n  return (\n    <Panel className={panelClassName}>\n      <Panel.Header className=\"p-2 pl-3\">\n        <div className=\"d-flex justify-content-between align-items-center\">\n          <Panel.Title title={title} className=\"table-panel--title\" />\n          <div>{headerButtons}</div>\n        </div>\n      </Panel.Header>\n\n      <Panel.Body className=\"p-0\">\n        <Table\n          classes=\"table-layout-auto table-sm m-0\"\n          striped\n          hover\n          bordered={false}\n          columns={modifiedColumns}\n          {...props}\n        />\n      </Panel.Body>\n    </Panel>\n  );\n}\n\nTablePanel.propTypes = {\n  title: PropTypes.string.isRequired,\n  headerButtons: PropTypes.node,\n  columns: PropTypes.array.isRequired,\n  panelClassName: PropTypes.string,\n};\n\nexport default withDictionary('title', TablePanel);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Modal } from 'react-bootstrap';\n\nexport default function OpenModalButton({\n  button: Button,\n  modalContent: ModalContent,\n  onClickRef,\n  ...props\n}) {\n  const [show, setShow] = useState(false);\n  const onHide = () => setShow(false);\n  const onClick = () => setShow(true);\n  if (onClickRef) {\n    onClickRef.current = onClick;\n  }\n\n  return (\n    <span>\n      <Button onClick={onClick} />\n      <Modal show={show} onHide={onHide} {...props}>\n        <ModalContent onHide={onHide} />\n      </Modal>\n    </span>\n  );\n}\n\nOpenModalButton.propTypes = {\n  button: PropTypes.elementType.isRequired,\n  modalContent: PropTypes.elementType.isRequired,\n  onClickRef: PropTypes.shape({ current: PropTypes.any }),\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withDictionary } from '../../language';\n\nfunction PageHeader({ title }) {\n  return <h1 className=\"h3 mb-4 text-gray-800\">{title}</h1>;\n}\n\nPageHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default withDictionary('title', PageHeader);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PageHeader from './PageHeader';\n\nexport default function Page({ children }) {\n  return <div className=\"container-fluid\">{children}</div>;\n}\n\nPage.propTypes = {\n  children: PropTypes.node,\n};\n\nPage.Header = PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Icon({ icon }) {\n  return <i className={`fas fa-${icon} fa-fw`} />;\n}\n\nIcon.propTypes = {\n  icon: PropTypes.string.isRequired,\n};\n\nIcon.Archive = 'archive';\nIcon.Trash = 'trash-alt';\nIcon.Edit = 'edit';\nIcon.Plus = 'plus';\nIcon.Minus = 'minus';\nIcon.Save = 'save';\nIcon.ClipboardCheck = 'clipboard-check';\n","export const Variant = {\n  secondary: 'secondary',\n  primary: 'primary',\n  danger: 'danger',\n  success: 'success',\n  warning: 'warning',\n  white: 'white',\n};\n\nexport const Size = {\n  sm: 'sm',\n  lg: 'lg',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport Icon from '../Icon/Icon';\nimport { Variant } from '../../bootstrap';\n\nexport default function ClickableIcon({\n  icon,\n  variant,\n  className,\n  onClick,\n  ...props\n}) {\n  const classes = classnames(\n    'btn',\n    'bg-transparent',\n    'border-0',\n    'p-0',\n    'mx-1',\n    className,\n    {\n      [`text-${variant}`]: variant,\n    }\n  );\n\n  function handleOnClick(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    onClick && onClick(e);\n  }\n\n  return (\n    <button className={classes} onClick={handleOnClick} {...props}>\n      <Icon icon={icon} />\n    </button>\n  );\n}\n\nClickableIcon.propTypes = {\n  icon: PropTypes.string.isRequired,\n  className: PropTypes.string,\n  onClick: PropTypes.func,\n  variant: PropTypes.oneOf(Object.keys(Variant)),\n};\n","import React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport Icon from '../Icon/Icon';\nimport { Variant, Size } from '../../bootstrap';\n\nexport default function SplitButton({\n  children,\n  icon,\n  variant,\n  size,\n  className,\n  disabled,\n  _ref,\n  ...props\n}) {\n  const classNames = classnames('btn', 'btn-icon-split', className, {\n    disabled,\n    [`btn-${size}`]: size,\n    [`btn-${variant}`]: variant,\n  });\n\n  return (\n    <button className={classNames} disabled={disabled} ref={_ref} {...props}>\n      <span className=\"icon text-white-50\">\n        <Icon icon={icon} />\n      </span>\n      <span className=\"text\">{children}</span>\n    </button>\n  );\n}\n\nSplitButton.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  icon: PropTypes.string.isRequired,\n  size: PropTypes.oneOf(Object.keys(Size)),\n  variant: PropTypes.oneOf(Object.keys(Variant)),\n  _ref: PropTypes.any,\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Page from './components/Page/Page';\n\nexport function NotFoundPage() {\n  return (\n    <Page>\n      <div className=\"text-center\">\n        <div className=\"error mx-auto\" data-text=\"404\">\n          404\n        </div>\n        <p className=\"lead text-gray-800 mb-5\">Page Not Found</p>\n        <p className=\"text-gray-500 mb-0\">\n          It looks like you found a glitch in the matrix...\n        </p>\n        <Link to=\"/\">&larr; Back to Dashboard</Link>\n      </div>\n    </Page>\n  );\n}\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useLocation } from 'react-router';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nfunction oneOfRoutsMatchesLocation(sections, location) {\n  return sections.some(({ routes }) =>\n    routes.some(({ to }) => location.pathname === to)\n  );\n}\n\nexport default function SidebarCollapsibleLink({\n  name,\n  parent,\n  sections,\n  faIcon,\n}) {\n  const location = useLocation();\n  const isActive = oneOfRoutsMatchesLocation(sections, location);\n  const classNames = classnames('nav-item', { active: isActive });\n  const id = 'sidebar--' + name;\n  const iconClasses = classnames('fas', 'fa-fw', `fa-${faIcon}`);\n  return (\n    <li className={classNames}>\n      <span\n        className=\"nav-link collapsed\"\n        data-toggle=\"collapse\"\n        data-target={'#' + id}\n        aria-expanded=\"true\"\n        aria-controls={id}\n      >\n        <i className={iconClasses}></i>\n        <span>{name}</span>\n      </span>\n      <div id={id} className=\"collapse\" data-parent={'#' + parent}>\n        <div className=\"bg-white py-2 collapse-inner rounded\">\n          {sections.map(({ name, routes }) => {\n            return (\n              <React.Fragment key={name}>\n                <h6 className=\"collapse-header\">{name}:</h6>\n                {routes.map(({ to, label }) => {\n                  return (\n                    <NavLink key={label} className=\"collapse-item\" to={to}>\n                      {label}\n                    </NavLink>\n                  );\n                })}\n              </React.Fragment>\n            );\n          })}\n        </div>\n      </div>\n    </li>\n  );\n}\n\nSidebarCollapsibleLink.propTypes = {\n  faIcon: PropTypes.string,\n  name: PropTypes.string,\n  parent: PropTypes.string,\n  sections: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      routes: PropTypes.arrayOf(\n        PropTypes.shape({\n          label: PropTypes.string,\n          to: PropTypes.string,\n        })\n      ).isRequired,\n    })\n  ),\n};\n","import React from 'react';\nimport classnames from 'classnames';\nimport { NavLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport default function SidebarSimpleLink({ name, to, faIcon }) {\n  const iconClasses = classnames('fas', 'fa-fw', `fa-${faIcon}`);\n  return (\n    <li className=\"nav-item\">\n      <NavLink className=\"nav-link\" exact to={to}>\n        <i className={iconClasses} />\n        <span>{name}</span>\n      </NavLink>\n    </li>\n  );\n}\n\nSidebarSimpleLink.propTypes = {\n  faIcon: PropTypes.string,\n  name: PropTypes.string,\n  to: PropTypes.string,\n};\n","import React from 'react';\nimport SidebarCollapsibleLink from './SidebarCollapsibleLink';\nimport SidebarSimpleLink from './SidebarSimpleLink';\nimport PropTypes from 'prop-types';\n\nexport function SidebarGroup({ group }) {\n  return (\n    <>\n      <hr className=\"sidebar-divider my-1\" />\n      {group.name && <div className=\"sidebar-heading\">{group.name}</div>}\n      {group.entries.map(entry =>\n        entry.to !== undefined ? (\n          <SidebarSimpleLink key={entry.name} {...entry} />\n        ) : (\n          <SidebarCollapsibleLink\n            key={entry.name}\n            parent=\"accordionSidebar\"\n            {...entry}\n          />\n        )\n      )}\n    </>\n  );\n}\n\nSidebarGroup.propTypes = {\n  group: PropTypes.shape({\n    name: PropTypes.string,\n    entries: PropTypes.arrayOf(\n      PropTypes.oneOfType([\n        PropTypes.shape(SidebarCollapsibleLink.propTypes),\n        PropTypes.shape(SidebarSimpleLink.propTypes),\n      ])\n    ).isRequired,\n  }),\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { SidebarGroup } from './SidebarGroup';\nimport { useSBAdmin2 } from '../context';\nimport './Sidebar.css';\n\nexport default function Sidebar({ renderBrandName, renderBrandIcon, config }) {\n  const { sidebarToggled, toggleSidebar } = useSBAdmin2();\n  const classNames = classnames(\n    'navbar-nav',\n    'bg-gradient-primary',\n    'sidebar',\n    'sidebar-dark',\n    'accordion',\n    { toggled: sidebarToggled }\n  );\n  return (\n    <ul className={classNames} id=\"accordionSidebar\">\n      <Link\n        className=\"sidebar-brand d-flex align-items-center justify-content-center\"\n        to=\"/\"\n      >\n        <div className=\"sidebar-brand-icon rotate-n-15\">\n          {renderBrandIcon()}\n        </div>\n        <div className=\"sidebar-brand-text mx-3\">{renderBrandName()}</div>\n      </Link>\n\n      {config.map((group, idx) => (\n        <SidebarGroup key={group.name || idx} group={group} />\n      ))}\n\n      <hr className=\"sidebar-divider d-none d-md-block\" />\n\n      <div className=\"text-center d-none d-md-inline\">\n        <button\n          className=\"rounded-circle border-0\"\n          id=\"sidebarToggle\"\n          onClick={toggleSidebar}\n        ></button>\n      </div>\n    </ul>\n  );\n}\n\nSidebar.propTypes = {\n  config: PropTypes.arrayOf(SidebarGroup.propTypes.group).isRequired,\n  renderBrandIcon: PropTypes.func.isRequired,\n  renderBrandName: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { SBAdmin2Provider } from './context';\nimport PropTypes from 'prop-types';\nimport { Switch, Route } from 'react-router-dom';\nimport { NotFoundPage } from './NotFoundPage';\nimport Sidebar from './Sidebar/Sidebar';\nimport { DictionaryProvider } from './language';\n\nexport function SBAdmin2({\n  sidebarProps,\n  topbar,\n  user,\n  logout,\n  children,\n  dictionaries,\n  copyright,\n}) {\n  const Topbar = topbar;\n  return (\n    <SBAdmin2Provider user={user} logout={logout}>\n      <DictionaryProvider dictionaries={dictionaries}>\n        <div id=\"wrapper\">\n          <Sidebar {...sidebarProps} />\n          <div id=\"content-wrapper\" className=\"d-flex flex-column\">\n            <div id=\"content\">\n              <Topbar />\n              <Switch>\n                {children}\n                <Route component={NotFoundPage} />\n              </Switch>\n            </div>\n          </div>\n        </div>\n        <footer className=\"sticky-footer bg-white\">\n          <div className=\"container my-auto\">\n            <div className=\"copyright text-center my-auto\">\n              <span>Copyright &copy; {copyright}</span>\n            </div>\n          </div>\n        </footer>\n      </DictionaryProvider>\n    </SBAdmin2Provider>\n  );\n}\n\nSBAdmin2.propTypes = {\n  children: PropTypes.any,\n  copyright: PropTypes.string,\n  sidebarProps: PropTypes.shape(Sidebar.propTypes).isRequired,\n  topbar: PropTypes.elementType.isRequired,\n  user: PropTypes.shape({\n    locale: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    picture: PropTypes.string.isRequired,\n  }).isRequired,\n  logout: PropTypes.func.isRequired,\n  dictionaries: PropTypes.object,\n};\n","import React from 'react';\nimport { Form, Row, Col } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport function FormControl({ label, inline, ...props }) {\n  return (\n    <Form.Group className=\"mb-3\" as={!!inline && Row}>\n      <Form.Label column={!!inline}>{label}</Form.Label>\n      <FormControl.Input inline={inline} {...props} />\n    </Form.Group>\n  );\n}\n\nFormControl.Input = ({ inline, formData, feedback, ...props }) => {\n  const wrap = inline ? c => <Col sm={inline}>{c}</Col> : c => c;\n\n  return wrap(\n    <>\n      <Form.Control\n        ref={formData}\n        defaultValue={formData.default()}\n        {...props}\n      />\n      <Form.Control.Feedback type=\"invalid\">{feedback}</Form.Control.Feedback>\n    </>\n  );\n};\n\nFormControl.propTypes = {\n  formData: PropTypes.shape({ current: PropTypes.any, init: PropTypes.any }),\n  feedback: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  inline: PropTypes.number,\n};\n\nFormControl.defaultProps = {\n  inline: 0,\n};\n","import React from 'react';\nimport SplitButton from '../components/SplitButton/SplitButton';\nimport PropTypes from 'prop-types';\nimport { useDictionary } from '../language';\nimport { Size, Variant } from '../bootstrap';\nimport Icon from '../components/Icon/Icon';\n\nexport default function SaveButton(props) {\n  const { buttons } = useDictionary();\n\n  return (\n    <SplitButton\n      icon={Icon.Save}\n      size={Size.sm}\n      variant={Variant.primary}\n      {...props}\n    >\n      {buttons.save}\n    </SplitButton>\n  );\n}\n\nSaveButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport SplitButton from '../components/SplitButton/SplitButton';\nimport PropTypes from 'prop-types';\nimport { useDictionary } from '../language';\nimport Icon from '../components/Icon/Icon';\nimport { Size, Variant } from '../bootstrap';\n\nexport default function CancelButton({ onClick }) {\n  const { buttons } = useDictionary();\n  return (\n    <SplitButton\n      variant={Variant.danger}\n      icon={Icon.Save}\n      size={Size.sm}\n      onClick={onClick}\n    >\n      {buttons.cancel}\n    </SplitButton>\n  );\n}\n\nCancelButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n","import React, { useState, useRef } from 'react';\nimport SaveButton from './SaveButton';\nimport CancelButton from './CancelButton';\nimport { Modal, Form } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport function FormInModal({ title, onHide, onSave, formData, children }) {\n  const [validated, setValidated] = useState(false);\n  const form = useRef();\n  function handleSave(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    const isValid = form.current.checkValidity();\n    setValidated(true);\n    if (!isValid) {\n      return;\n    }\n    if (formData.changed()) {\n      const input = formData.value();\n      onSave(input);\n    }\n    onHide();\n    setValidated(false);\n  }\n\n  return (\n    <Form validated={validated} ref={form} onSubmit={handleSave}>\n      <Modal.Header\n        closeButton\n        className=\"m-0 font-weight-bold text-primary bg-light\"\n      >\n        <Modal.Title>{title}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>{children}</Modal.Body>\n      <Modal.Footer className=\" bg-light\">\n        <CancelButton onClick={onHide} />\n        <SaveButton onClick={handleSave} />\n      </Modal.Footer>\n    </Form>\n  );\n}\n\nFormInModal.propTypes = {\n  children: PropTypes.node.isRequired,\n  onHide: PropTypes.func.isRequired,\n  onSave: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  formData: PropTypes.any.isRequired,\n};\n","import React from 'react';\nimport TopbarContextSwitcher from './sbadmin2/Topbar/TopbarContextSwitcher';\nimport { useBudget } from './gql/budget';\nimport Spinner from './sbadmin2/utilities/Spinner';\nimport { useDictionary } from './sbadmin2';\n\nexport default function TopbarBudgetSwitcher() {\n  const {\n    selectedBudget,\n    setSelectedBudget,\n    budgets,\n    loading,\n    error,\n  } = useBudget();\n  const { topbar } = useDictionary();\n  const value = loading ? (\n    <Spinner size=\"sm\" variant=\"secondary\" />\n  ) : error ? (\n    <i className=\"fas fa-fw fa-exclamation-triangle text-secondary\" />\n  ) : (\n    selectedBudget && selectedBudget.name\n  );\n  const onChange = id => {\n    const budget = budgets.find(b => b.id === id);\n    setSelectedBudget(budget);\n  };\n  return (\n    <TopbarContextSwitcher\n      label={topbar.budgetLabel}\n      value={value}\n      onChange={onChange}\n      allowedValues={budgets.map(b => ({ id: b.id, label: b.name }))}\n    />\n  );\n}\n","import React, { useState, useEffect, useContext } from 'react';\nimport createAuth0Client from '@auth0/auth0-spa-js';\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n  window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext();\nexport const useAuth0 = () => useContext(Auth0Context);\nexport const Auth0Provider = ({\n  children,\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n  returnTo,\n  ...initOptions\n}) => {\n  const [isAuthenticated, setIsAuthenticated] = useState();\n  const [user, setUser] = useState();\n  const [token, setToken] = useState();\n  const [auth0Client, setAuth0] = useState();\n  const [loading, setLoading] = useState(true);\n  const [popupOpen, setPopupOpen] = useState(false);\n\n  useEffect(() => {\n    const initAuth0 = async () => {\n      const auth0FromHook = await createAuth0Client(initOptions);\n      setAuth0(auth0FromHook);\n\n      if (window.location.search.includes('code=')) {\n        const { appState } = await auth0FromHook.handleRedirectCallback();\n        onRedirectCallback(appState);\n      }\n\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\n\n      setIsAuthenticated(isAuthenticated);\n\n      if (isAuthenticated) {\n        const user = await auth0FromHook.getUser();\n        setUser(user);\n\n        const token = await auth0FromHook.getTokenSilently();\n        setToken(token);\n      }\n\n      setLoading(false);\n    };\n    initAuth0();\n    // eslint-disable-next-line\n  }, []);\n\n  const loginWithPopup = async (params = {}) => {\n    setPopupOpen(true);\n    try {\n      await auth0Client.loginWithPopup(params);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setPopupOpen(false);\n    }\n    const user = await auth0Client.getUser();\n    setUser(user);\n    setIsAuthenticated(true);\n  };\n\n  const handleRedirectCallback = async () => {\n    setLoading(true);\n    await auth0Client.handleRedirectCallback();\n    const user = await auth0Client.getUser();\n    setLoading(false);\n    setIsAuthenticated(true);\n    setUser(user);\n  };\n  return (\n    <Auth0Context.Provider\n      value={{\n        token,\n        isAuthenticated,\n        user,\n        loading,\n        popupOpen,\n        loginWithPopup,\n        handleRedirectCallback,\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\n        logout: (...p) => auth0Client.logout({ ...p, returnTo }),\n        getTokenScopes: async (...p) => {\n          const token = await auth0Client.getTokenSilently(...p);\n          const claimsString = token.split('.')[1];\n          const claims = JSON.parse(atob(claimsString));\n          const scope = claims.scope.split(' ');\n          return scope;\n        },\n      }}\n    >\n      {children}\n    </Auth0Context.Provider>\n  );\n};\n","import React from 'react';\nimport TemplateTopbar from './sbadmin2/Topbar/Topbar';\nimport { TopbarMenu } from './sbadmin2/Topbar/TopbarMenu';\nimport TopbarUser from './sbadmin2/Topbar/TopbarUser';\nimport TopbarBudgetSwitcher from './TopbarBudgetSwitcher';\nimport { useAuth0 } from '../react-auth0-spa';\nimport { useDictionary } from './sbadmin2/language';\n\nexport default function Topbar() {\n  const { user, logout } = useAuth0();\n  const { topbar } = useDictionary();\n  return (\n    <TemplateTopbar\n      faIconContextMinified=\"search\"\n      renderContext={() => <TopbarBudgetSwitcher />}\n      renderUser={() => (\n        <TopbarUser\n          name={user.name}\n          pictureUrl={user.picture}\n          logout={logout}\n        />\n      )}\n      renderMenus={() => (\n        <>\n          <TopbarMenu\n            name={topbar.alertsLabel}\n            faIcon=\"bell\"\n            counter={0}\n          ></TopbarMenu>\n          <TopbarMenu\n            name={topbar.messagesLabel}\n            faIcon=\"envelope\"\n            counter={0}\n          ></TopbarMenu>\n        </>\n      )}\n    />\n  );\n}\n","export const sidebarConfig = ({ sidebar }) => [\n  {\n    entries: [\n      {\n        name: sidebar.pages.dashboard,\n        faIcon: 'receipt',\n        to: '/',\n      },\n    ],\n  },\n  {\n    name: sidebar.sections.currentMonth,\n    entries: [\n      {\n        name: sidebar.pages.expenses,\n        faIcon: 'receipt',\n        to: '/expenses',\n      },\n      {\n        name: sidebar.pages.transfers,\n        faIcon: 'exchange-alt',\n        to: '/transfers',\n      },\n      {\n        name: sidebar.pages.plans,\n        faIcon: 'map-marked-alt',\n        to: '/plans',\n      },\n    ],\n  },\n  {\n    name: sidebar.sections.budget,\n    entries: [\n      {\n        name: sidebar.pages.accounts,\n        faIcon: 'credit-card',\n        to: '/accounts',\n      },\n      {\n        name: sidebar.pages.envelopes,\n        faIcon: 'envelope-open-text',\n        to: '/envelopes',\n      },\n    ],\n  },\n];\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'react-bootstrap';\nimport classnames from 'classnames';\n\nexport default function RefreshButton({ className, ...props }) {\n  const classes = classnames('btn-sm', 'btn-secondary', className);\n  return (\n    <Button className={classes} {...props}>\n      <i className=\"fas fa-fw fa-sync-alt\" />\n    </Button>\n  );\n}\n\nRefreshButton.propTypes = {\n  className: PropTypes.string,\n};\n","import Spinner from '../sbadmin2/utilities/Spinner';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ErrorMessageList({ errorMessage, subErrors }) {\n  return (\n    <>\n      {errorMessage}\n      <ul>\n        {subErrors.map((e, idx) => (\n          <li key={idx}>{e}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\nfunction ErrorMessage({ error }) {\n  const subErrors = error.networkError\n    ? error.networkError.result.errors\n    : error.graphQLErrors.map(e => `${e.path.join('.')}: ${e.message}`);\n  return (\n    <div className=\"text-danger\">\n      <i className=\"fas fa-fw fa-exclamation-triangle\" />\n      <ErrorMessageList errorMessage={error.message} subErrors={subErrors} />\n    </div>\n  );\n}\n\nexport function WithQuery({ query, showError, children, ...props }) {\n  const { loading, error } = query;\n  return loading ? (\n    <Spinner {...props} />\n  ) : error ? (\n    showError && <ErrorMessage error={error} />\n  ) : (\n    children(query)\n  );\n}\n\nWithQuery.propTypes = {\n  children: PropTypes.func.isRequired,\n  query: PropTypes.shape({\n    loading: PropTypes.bool.isRequired,\n    error: PropTypes.any,\n  }),\n  showError: PropTypes.bool,\n};\n\nWithQuery.defaultProps = {\n  showError: true,\n};\n","import React from 'react';\nimport RefreshButton from '../sbadmin2/utilities/RefreshButton';\nimport { WithQuery } from '../gql/WithQuery';\nimport PropTypes from 'prop-types';\nimport { TablePanel } from '../sbadmin2';\n\nexport function QueryTablePanel({ query, buttons, getData, ...props }) {\n  return (\n    <WithQuery query={query} size=\"sm\" showError={false}>\n      {({ refetch, data }) => (\n        <TablePanel\n          headerButtons={\n            <>\n              <RefreshButton onClick={() => refetch()} className=\"mr-1\" />\n              {buttons}\n            </>\n          }\n          data={getData(data)}\n          {...props}\n        />\n      )}\n    </WithQuery>\n  );\n}\n\nQueryTablePanel.propTypes = {\n  buttons: PropTypes.node,\n  getData: PropTypes.func.isRequired,\n  query: PropTypes.shape({\n    data: PropTypes.any,\n    refetch: PropTypes.func,\n  }).isRequired,\n};\n","export default class Amount {\n  static parse(string) {\n    if (string === null || string === '') {\n      return null;\n    }\n    return Math.round(Number(string) * 100);\n  }\n\n  static zero() {\n    return 0;\n  }\n\n  static format(amount, kSeparator = true) {\n    if (amount === null) {\n      return null;\n    }\n    const fixed = (amount / 100).toFixed(2);\n    if (!kSeparator) {\n      return fixed;\n    }\n    var parts = fixed.split('.');\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\n    return parts.join('.');\n  }\n}\n","import React from 'react';\nimport SplitButton from '../components/SplitButton/SplitButton';\nimport PropTypes from 'prop-types';\nimport { useDictionary } from '../language';\nimport Icon from '../components/Icon/Icon';\nimport { Size, Variant } from '../bootstrap';\n\nexport default function CreateButton({ onClick, ...props }) {\n  const { buttons } = useDictionary();\n  return (\n    <SplitButton\n      icon={Icon.Plus}\n      size={Size.sm}\n      variant={Variant.primary}\n      onClick={onClick}\n      {...props}\n    >\n      {buttons.create}\n    </SplitButton>\n  );\n}\n\nCreateButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n","import { useState, useRef } from 'react';\n\nfunction simpleFormData({ $init, $process, $default }, getRoot) {\n  const process = $process || (v => v);\n  const formData = { current: null };\n  const _default =\n    typeof $default === 'function' ? () => $default(getRoot()) : () => $default;\n\n  formData.value = () => {\n    if (formData.current === null) {\n      return null;\n    }\n    return process(formData.current.value);\n  };\n\n  formData.changed = () => {\n    if (formData.current === null) {\n      return $init !== null;\n    }\n    return formData.current.value !== $init;\n  };\n\n  formData.default = () =>\n    $init !== null && $init !== undefined ? $init : _default();\n\n  formData.init = () => $init;\n\n  return formData;\n}\n\nfunction arrayFormData({ $model, $init }, rerender, getRoot) {\n  const formData = $init.map(v => createFormData($model(v), rerender), getRoot);\n  formData._originalPush = formData.push;\n\n  formData.value = () => {\n    return formData.map(v => v.value());\n  };\n\n  formData.changed = () => {\n    return formData.length !== $init.length || formData.some(v => v.changed());\n  };\n\n  formData.push = v => {\n    formData._originalPush(createFormData($model(v), rerender));\n    rerender();\n  };\n\n  formData.removeAt = idx => {\n    formData.splice(idx, 1);\n    rerender();\n  };\n\n  return formData;\n}\n\nfunction compositeFormData({ $includeAllValues, ...model }, rerender, getRoot) {\n  const formData = Object.keys(model).reduce(\n    (acc, key) => ({\n      ...acc,\n      [key]: createFormData(model[key], rerender, getRoot),\n    }),\n    {}\n  );\n\n  formData.changed = () => {\n    return Object.keys(model).some(k => formData[k].changed());\n  };\n\n  formData.value = () => {\n    return Object.keys(model).reduce((acc, key) => {\n      if (!formData[key].changed() && !$includeAllValues) {\n        return acc;\n      }\n      return { ...acc, [key]: formData[key].value() };\n    }, {});\n  };\n\n  return formData;\n}\n\nfunction createFormData(model, rerender, getRoot) {\n  if (Object.prototype.hasOwnProperty.call(model, '$init')) {\n    if (Object.prototype.hasOwnProperty.call(model, '$model')) {\n      return arrayFormData(model, rerender, getRoot);\n    }\n    return simpleFormData(model, getRoot);\n  }\n  return compositeFormData(model, rerender, getRoot);\n}\n\nexport function useFormData(model) {\n  const [, setValue] = useState(false);\n  const rerender = () => setValue(v => !v);\n  let formData,\n    getRoot = () => formData;\n  formData = createFormData(model, rerender, getRoot);\n  const ref = useRef(formData);\n  return ref.current;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormControl, FormInModal, useDictionary } from '../sbadmin2';\nimport { useFormData } from '../sbadmin2/utilities/useFormData';\n\nexport function AccountModal({ init, ...props }) {\n  const { accounts } = useDictionary();\n  const formData = useFormData({\n    name: { $init: init.name },\n  });\n  return (\n    <FormInModal formData={formData} autoFocusRef={formData.name} {...props}>\n      <FormControl\n        label={accounts.modal.labels.name}\n        inline={10}\n        formData={formData.name}\n        feedback=\"Provide name\"\n      />\n    </FormInModal>\n  );\n}\n\nAccountModal.propTypes = {\n  init: PropTypes.shape({ name: PropTypes.string }).isRequired,\n};\n","import React from 'react';\nimport { OpenModalButton } from '../sbadmin2';\nimport CreateButton from '../sbadmin2/utilities/CreateButton';\nimport { useCreateAccount } from '../gql/accounts';\nimport { useDictionary } from '../sbadmin2';\nimport { AccountModal } from './AccountModal';\n\nexport function CreateAccountButton() {\n  const [createAccount] = useCreateAccount();\n  const { accounts } = useDictionary();\n  return (\n    <OpenModalButton\n      button={props => <CreateButton {...props} />}\n      modalContent={props => (\n        <AccountModal\n          init={{ name: '' }}\n          title={accounts.modal.createTitle}\n          onSave={createAccount}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n","import React from 'react';\nimport { ClickableIcon, Icon, OpenModalButton } from '../sbadmin2';\nimport { useUpdateAccount } from '../gql/accounts';\nimport { useDictionary } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\nimport { AccountModal } from './AccountModal';\nimport './UpdateAccountButton.css';\n\nexport function UpdateAccountButton({ account }) {\n  const [updateAccount] = useUpdateAccount();\n  const { accounts } = useDictionary();\n  return (\n    <OpenModalButton\n      button={props => (\n        <ClickableIcon\n          className=\"accounts__update-button\"\n          icon={Icon.Edit}\n          variant={Variant.primary}\n          {...props}\n        />\n      )}\n      modalContent={props => (\n        <AccountModal\n          init={account}\n          title={accounts.modal.editTitle}\n          onSave={input => updateAccount(account.id, input)}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useGetAccounts } from '../gql/accounts';\nimport { QueryTablePanel } from '../gql/QueryTablePanel';\nimport Amount from '../../model/Amount';\nimport { CreateAccountButton } from './CreateAccountButton';\nimport { UpdateAccountButton } from './UpdateAccountButton';\n\nconst columns = [\n  { dataField: 'name', sort: true },\n  {\n    dataField: 'balance',\n    align: 'right',\n    headerAlign: 'right',\n    formatter: Amount.format,\n  },\n  {\n    dataField: 'actions',\n    isDummyColumn: true,\n    formatter: (cell, row) => (\n      <span>\n        <UpdateAccountButton account={row} />\n        <span style={{ cursor: 'pointer' }}>\n          <i className=\"fas fa-archive fa-fw\" />\n        </span>\n      </span>\n    ),\n    style: {\n      whiteSpace: 'nowrap',\n      width: '1%',\n    },\n  },\n];\n\nconst defaultSorted = [\n  {\n    dataField: 'name',\n    order: 'asc',\n  },\n];\n\nexport function AccountsTablePanel({ onSelectAcount }) {\n  const query = useGetAccounts();\n\n  const selectRow = {\n    mode: 'radio',\n    clickToSelect: true,\n    hideSelectColumn: true,\n    classes: 'text-white bg-primary selected',\n    onSelect: account => onSelectAcount(account),\n  };\n\n  return (\n    <QueryTablePanel\n      query={query}\n      getData={data => data.accounts}\n      buttons={<CreateAccountButton />}\n      columns={columns}\n      keyField=\"id\"\n      readTitle={d => d.accounts.table.title}\n      readColumnNames={d => d.accounts.table.columns}\n      selectRow={selectRow}\n      defaultSorted={defaultSorted}\n    />\n  );\n}\n\nAccountsTablePanel.propTypes = {\n  onSelectAcount: PropTypes.func.isRequired,\n  selectedAccountID: PropTypes.string,\n};\n","import React from 'react';\nimport { ClickableIcon, Icon } from '../sbadmin2';\nimport { useDeleteExpense } from '../gql/expenses';\nimport { Variant } from '../sbadmin2/bootstrap';\nexport function DeleteExpenseButton({ expense }) {\n  const [deleteExpense] = useDeleteExpense();\n  return (\n    <ClickableIcon\n      icon={Icon.Trash}\n      variant={Variant.secondary}\n      onClick={() => deleteExpense(expense.id)}\n    />\n  );\n}\n","export default class Day {\n  constructor(year, month, day) {\n    this.year = year;\n    this.month = month;\n    this.day = day;\n  }\n\n  static fromDate(date) {\n    return new Date(date.getYear(), date.getMonth(), date.getDate());\n  }\n\n  format() {\n    return `${this.year}-${String(this.month).padStart(2, '0')}-${String(\n      this.day\n    ).padStart(2, '0')}`;\n  }\n}\n","import Day from './Day';\n\nconst monthNames = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nexport default class Month {\n  constructor(year, month) {\n    this.year = year;\n    this.month = month;\n  }\n  static parse(string) {\n    const [year, month] = string.split('-');\n    return new Month(Number(year), Number(month));\n  }\n\n  firstDay() {\n    return new Day(this.year, this.month, 1);\n  }\n\n  lastDay() {\n    const date = new Date(this.year, this.month, 0);\n    return new Day(this.year, this.month, date.getDate());\n  }\n\n  pretty() {\n    return `${monthNames[this.month - 1]} ${this.year}`;\n  }\n}\n","import React, { useRef, useState, useEffect } from 'react';\nimport classnames from 'classnames';\n\nexport function Combobox({ allowedValues, _ref, defaultValue, className }) {\n  const defaultValueObject = allowedValues.find(v => v.id === defaultValue);\n  const [show, setShow] = useState(false);\n  const [filter, setFilter] = useState(\n    defaultValueObject ? defaultValueObject.label : ''\n  );\n  const [selectedIdx, setSelectedIdx] = useState(0);\n  const menuRef = useRef();\n  const classNames = classnames('input-group', className);\n  const filtered = allowedValues.filter(v =>\n    v.label.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  useEffect(() => {\n    _ref.current = { value: defaultValue };\n    // eslint-disable-next-line\n  }, []);\n\n  function onClick(id) {\n    const selectedLabel = allowedValues.find(v => v.id === id).label;\n    setShow(false);\n    setFilter(selectedLabel);\n    _ref.current = { value: id };\n  }\n\n  function onInputChange(e) {\n    const value = e.target.value;\n    setShow(true);\n    setFilter(value);\n    setSelectedIdx(0);\n    const selected = allowedValues.find(v => v.label === value);\n    if (selected) {\n      _ref.current = { value: selected.id };\n    }\n  }\n\n  function onInputBlur() {\n    setShow(false);\n    const selected = allowedValues.find(v => v.label === filter);\n    if (!selected) {\n      setFilter('');\n    }\n  }\n\n  function onKeyDown(e) {\n    if (e.keyCode === 40) {\n      // up\n      e.preventDefault();\n      if (selectedIdx >= filtered.length - 1) {\n        setSelectedIdx(0);\n      } else {\n        setSelectedIdx(v => v + 1);\n      }\n    } else if (e.keyCode === 38) {\n      // down\n      e.preventDefault();\n      if (selectedIdx <= 0) {\n        setSelectedIdx(filtered.length - 1);\n      } else {\n        setSelectedIdx(v => v - 1);\n      }\n    } else if (e.keyCode === 13 && show) {\n      e.preventDefault();\n      onClick(filtered[selectedIdx].id);\n    }\n  }\n\n  return (\n    <div className={classNames}>\n      <input\n        className=\"form-control\"\n        value={filter}\n        type=\"text\"\n        onChange={onInputChange}\n        onBlur={onInputBlur}\n        onKeyDown={onKeyDown}\n      />\n      <button\n        className=\"btn btn-secondary dropdown-toggle dropdown-toggle-split no-arrow\"\n        data-toggle=\"dropdown\"\n        data-reference=\"parent\"\n        data-flip=\"false\"\n        style={{\n          maxWidth: '2rem',\n          borderTopLeftRadius: 0,\n          borderBottomLeftRadius: 0,\n          margin: -1,\n        }}\n      />\n      <ul\n        ref={menuRef}\n        role=\"menu\"\n        className={classnames('dropdown-menu', { show })}\n        style={{\n          maxHeight: '200px',\n          overflowY: 'auto',\n        }}\n      >\n        {filtered.map((v, idx) => (\n          <li\n            className={`dropdown-item ${idx === selectedIdx ? 'active' : ''}`}\n            onClick={() => onClick(v.id)}\n            key={v.id}\n          >\n            {v.label}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Form, Row, Col } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport function InlineFormControl({ label, size, feedback, children }) {\n  return (\n    <Form.Group as={Row}>\n      <Form.Label column>{label}</Form.Label>\n      <Col sm={size}>\n        {children}\n        {feedback && (\n          <Form.Control.Feedback type=\"invalid\">\n            {feedback}\n          </Form.Control.Feedback>\n        )}\n      </Col>\n    </Form.Group>\n  );\n}\n\nInlineFormControl.propTypes = {\n  children: PropTypes.element,\n  feedback: PropTypes.string,\n  label: PropTypes.string.isRequired,\n  size: PropTypes.number,\n};\n\nInlineFormControl.defaultProps = {\n  inline: 0,\n};\n","import gql from 'graphql-tag';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { useBudget } from './budget';\n\nconst GET_CATEGORIES = gql`\n  query GetCategories($budgetID: ID!) {\n    categories(budgetID: $budgetID) {\n      id\n      name\n      envelope {\n        id\n        name\n      }\n      description\n    }\n  }\n`;\n\nconst CREATE_CATEGORY = gql`\n  mutation CreateCategory($budgetID: ID!, $input: CategoryInput!) {\n    createCategory(budgetID: $budgetID, in: $input) {\n      id\n      name\n      envelope {\n        id\n        name\n      }\n      description\n    }\n  }\n`;\n\nconst UPDATE_CATEGORY = gql`\n  mutation UpdateCategory($budgetID: ID!, $id: ID!, $input: CategoryUpdate!) {\n    updateCategory(budgetID: $budgetID, id: $id, in: $input) {\n      id\n      name\n      envelope {\n        id\n        name\n      }\n      description\n    }\n  }\n`;\n\nexport function useCreateCategory() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_CATEGORY, {\n    update: (cache, { data: { createCategory } }) => {\n      const { categories } = cache.readQuery({\n        query: GET_CATEGORIES,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_CATEGORIES,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          categories: categories.concat([createCategory]),\n        },\n      });\n    },\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useUpdateCategory() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_CATEGORY);\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useGetCategories() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_CATEGORIES, {\n    variables: { budgetID: selectedBudget.id },\n  });\n}\n","import React from 'react';\nimport { ClickableIcon, Icon } from '../sbadmin2';\nimport { useGetCategories } from '../gql/categories';\nimport { WithQuery } from '../gql/WithQuery';\nimport { Form, Row, Col } from 'react-bootstrap';\nimport { useDictionary } from '../sbadmin2';\nimport { Combobox } from '../sbadmin2/utilities/Combobox';\nimport { Variant, Size } from '../sbadmin2/bootstrap';\nexport function CategoriesInput({ formData }) {\n  const query = useGetCategories();\n  const { expenses } = useDictionary();\n  return (\n    <WithQuery query={query}>\n      {({ data }) => (\n        <>\n          <small className=\"d-flex align-items-center\">\n            {expenses.modal.labels.categories}\n            <ClickableIcon\n              icon={Icon.Plus}\n              variant={Variant.primary}\n              size={Size.sm}\n              onClick={() =>\n                formData.push({\n                  category: { id: null },\n                  amount: null,\n                })\n              }\n            />\n          </small>\n          {formData.map((categoryFormData, idx) => (\n            <Form.Group\n              as={Row}\n              key={categoryFormData.categoryID.init() || idx}\n              className=\"d-flex align-items-center\"\n            >\n              <Col sm={7}>\n                <Combobox\n                  _ref={categoryFormData.categoryID}\n                  defaultValue={categoryFormData.categoryID.init()}\n                  allowedValues={data.categories.map(({ id, name }) => ({\n                    id,\n                    label: name,\n                  }))}\n                />\n              </Col>\n              <Col>\n                <Form.Control\n                  type=\"number\"\n                  required\n                  placeholder={expenses.modal.labels.amount}\n                  defaultValue={categoryFormData.amount.init()}\n                  ref={categoryFormData.amount}\n                  step=\"0.01\"\n                />\n              </Col>\n              <Col sm={1}>\n                <ClickableIcon\n                  icon=\"minus\"\n                  variant=\"danger\"\n                  size=\"sm\"\n                  onClick={() => formData.removeAt(idx)}\n                />\n              </Col>\n            </Form.Group>\n          ))}\n        </>\n      )}\n    </WithQuery>\n  );\n}\n","import React from 'react';\nimport { FormControl } from '../sbadmin2/utilities/FormControl';\nimport { FormInModal } from '../sbadmin2/utilities/FormInModal';\nimport { useFormData } from '../sbadmin2/utilities/useFormData';\nimport Amount from '../../model/Amount';\nimport { useGetAccounts } from '../gql/accounts';\nimport { WithQuery } from '../gql/WithQuery';\nimport { useBudget } from '../gql/budget';\nimport Month from '../../model/Month';\nimport { useDictionary } from '../sbadmin2';\nimport { Combobox } from '../sbadmin2/utilities/Combobox';\nimport { InlineFormControl } from '../sbadmin2/utilities/InlineFormControl';\nimport { CategoriesInput } from './CategoriesInput';\n\nexport function ExpenseModal({ defaultValues, init, ...props }) {\n  const { selectedBudget } = useBudget();\n  const { expenses } = useDictionary();\n  const accountsQuery = useGetAccounts();\n  const formData = useFormData({\n    title: { $init: init.title },\n    date: { $init: init.date },\n    accountID: {\n      $init: init.account.id,\n      $default: defaultValues && defaultValues.account.id,\n    },\n    categories: {\n      $init: init.categories,\n      $model: c => ({\n        categoryID: { $init: c.category.id },\n        amount: {\n          $init: Amount.format(c.amount, false),\n          $process: Amount.parse,\n        },\n        $includeAllValues: true,\n      }),\n    },\n  });\n  const month = Month.parse(selectedBudget.currentMonth.month);\n  const first = month.firstDay();\n  const last = month.lastDay();\n\n  return (\n    <FormInModal formData={formData} {...props}>\n      <WithQuery query={accountsQuery}>\n        {({ data: accountsData }) => (\n          <>\n            <FormControl\n              label={expenses.modal.labels.title}\n              inline={10}\n              formData={formData.title}\n              feedback=\"Provide name\"\n              required\n            />\n            <FormControl\n              label={expenses.modal.labels.date}\n              inline={10}\n              formData={formData.date}\n              feedback=\"Provide date\"\n              type=\"date\"\n              required\n              min={first.format()}\n              max={last.format()}\n            />\n            <InlineFormControl label={expenses.modal.labels.account} size={9}>\n              <Combobox\n                _ref={formData.accountID}\n                defaultValue={formData.accountID.default()}\n                allowedValues={accountsData.accounts.map(({ id, name }) => ({\n                  id,\n                  label: name,\n                }))}\n              />\n            </InlineFormControl>\n            <CategoriesInput formData={formData.categories} />\n          </>\n        )}\n      </WithQuery>\n    </FormInModal>\n  );\n}\n","import React from 'react';\nimport { ClickableIcon, Icon, OpenModalButton } from '../sbadmin2';\nimport { useUpdateExpense } from '../gql/expenses';\nimport { useDictionary } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\nimport { ExpenseModal } from './ExpenseModal';\nexport function UpdateExpenseButton({ expense }) {\n  const [updateExpense] = useUpdateExpense();\n  const { expenses } = useDictionary();\n  return (\n    <OpenModalButton\n      button={props => (\n        <ClickableIcon icon={Icon.Edit} variant={Variant.primary} {...props} />\n      )}\n      modalContent={props => (\n        <ExpenseModal\n          init={expense}\n          title={expenses.modal.editTitle}\n          onSave={input => updateExpense(expense.id, input)}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n","import React from 'react';\nimport { QueryTablePanel } from '../gql/QueryTablePanel';\nimport { useGetCurrentExpenses } from '../gql/expenses';\nimport Amount from '../../model/Amount';\nimport { DeleteExpenseButton } from './DeleteExpenseButton';\nimport { UpdateExpenseButton } from './UpdateExpenseButton';\n\nconst columns = [\n  { dataField: 'title' },\n  { dataField: 'date', sort: true },\n  {\n    dataField: 'account',\n    formatter: a => a.name,\n  },\n  {\n    dataField: 'totalAmount',\n    formatter: Amount.format,\n    align: 'right',\n    headerAlign: 'right',\n  },\n  {\n    dataField: 'actions',\n    isDummyColumn: true,\n    formatter: (cell, row) => (\n      <span>\n        <UpdateExpenseButton expense={row} />\n        <DeleteExpenseButton expense={row} />\n      </span>\n    ),\n    style: {\n      whiteSpace: 'nowrap',\n      width: '1%',\n    },\n  },\n];\n\nconst rowClasses = (row, rowIndex) => {\n  return rowIndex % 2 === 0 && 'table-striped';\n};\n\nconst expandRow = {\n  className: 'background-color-white',\n  renderer: row => (\n    <table className=\"table table-sm mb-0\">\n      <tbody>\n        {row.categories.map((category, idx) => (\n          <tr key={idx}>\n            <td className=\"pl-3\">{category.category.name}</td>\n            <td>{Amount.format(category.amount)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  ),\n};\n\nfunction getExpenses(...filters) {\n  return data =>\n    filters.reduce(\n      (expenses, filter) => expenses.filter(filter),\n      data.budget.currentMonth.expenses\n    );\n}\n\nfunction filterByAccount(account) {\n  return expense => expense.account.id === account;\n}\n\nconst defaultSorted = [\n  {\n    dataField: 'date',\n    order: 'desc',\n  },\n];\n\nexport function ExpensesTablePanel({\n  readTitle,\n  createButton,\n  accountFilter,\n  hiddenColumns,\n  ...props\n}) {\n  const query = useGetCurrentExpenses();\n  const filter = getExpenses(\n    accountFilter ? filterByAccount(accountFilter) : e => e\n  );\n  const hideColumns = columns.map(c => ({\n    ...c,\n    hidden: hiddenColumns && hiddenColumns.some(hc => c.dataField === hc),\n  }));\n\n  return (\n    <QueryTablePanel\n      {...props}\n      query={query}\n      getData={filter}\n      buttons={createButton}\n      columns={hideColumns}\n      keyField=\"id\"\n      expandRow={expandRow}\n      rowClasses={rowClasses}\n      striped={false}\n      readTitle={readTitle}\n      readColumnNames={d => d.expenses.table.columns}\n      defaultSorted={defaultSorted}\n    />\n  );\n}\n","import React from 'react';\nimport { OpenModalButton } from '../sbadmin2';\nimport CreateButton from '../sbadmin2/utilities/CreateButton';\nimport { useCreateExpense } from '../gql/expenses';\nimport { useDictionary } from '../sbadmin2';\nimport { ExpenseModal } from './ExpenseModal';\n\nexport function CreateExpenseButton({ account }) {\n  const [createExpense] = useCreateExpense();\n  const { expenses } = useDictionary();\n\n  return (\n    <OpenModalButton\n      button={props => <CreateButton {...props} />}\n      modalContent={props => (\n        <ExpenseModal\n          init={{\n            name: null,\n            account: {},\n            date: null,\n            categories: [],\n          }}\n          defaultValues={{ account }}\n          title={expenses.modal.createTitle}\n          onSave={createExpense}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n","import React, { useState } from 'react';\n\nimport { Page } from '../sbadmin2';\n\nimport { Row, Col } from 'react-bootstrap';\nimport { AccountsTablePanel } from './AccountsTablePanel';\nimport { ExpensesTablePanel } from '../Expenses/ExpensesTablePanel';\nimport { CreateExpenseButton } from '../Expenses/CreateExpenseButton';\n\nexport default function Accounts() {\n  const [selectedAccount, setSelectedAccount] = useState(null);\n\n  return (\n    <Page>\n      <Page.Header readTitle={d => d.sidebar.pages.accounts} />\n      <Row>\n        <Col sm={5}>\n          <AccountsTablePanel onSelectAcount={a => setSelectedAccount(a)} />\n        </Col>\n        <Col>\n          {!selectedAccount ? null : (\n            <ExpensesTablePanel\n              readTitle={d =>\n                d.accounts.expensesTableTitle(selectedAccount.name)\n              }\n              createButton={<CreateExpenseButton account={selectedAccount} />}\n              accountFilter={selectedAccount.id}\n              hiddenColumns={['account']}\n            />\n          )}\n        </Col>\n      </Row>\n    </Page>\n  );\n}\n","import React, { useState } from 'react';\nimport { Form, Row } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { FormControl } from './FormControl';\n\nexport function OptionalFormControl({\n  initEnabled,\n  label,\n  inline,\n  formData,\n  ...props\n}) {\n  const [enabled, setEnabled] = useState(initEnabled);\n  const toggleEnabled = () => setEnabled(v => !v);\n  return (\n    <Form.Group className=\"mb-3\" as={!!inline && Row}>\n      <Form.Label column={!!inline}>\n        <Form.Check custom type=\"switch\">\n          <Form.Check.Input checked={enabled} onChange={toggleEnabled} />\n          <Form.Check.Label onClick={toggleEnabled}>{label}</Form.Check.Label>\n        </Form.Check>\n      </Form.Label>\n      {enabled && (\n        <FormControl.Input\n          autoFocus\n          formData={formData}\n          inline={inline}\n          {...props}\n        />\n      )}\n    </Form.Group>\n  );\n}\n\nOptionalFormControl.propTypes = {\n  initEnabled: PropTypes.bool,\n  formData: PropTypes.shape({ current: PropTypes.any, init: PropTypes.any }),\n  feedback: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  inline: PropTypes.number,\n};\n\nOptionalFormControl.defaultProps = {\n  inline: 0,\n};\n","import PropTypes from 'prop-types';\n\nexport const Amount = PropTypes.number;\n\nexport const Account = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n});\n\nexport const Expense = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  date: PropTypes.string,\n  totalBalance: Amount.isRequired,\n  location: PropTypes.string,\n  account: Account,\n});\n\nexport const Envelope = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n});\n\nexport const Category = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  envelope: Envelope,\n});\n","import React from 'react';\nimport Amount from '../../model/Amount';\nimport { FormControl } from '../sbadmin2/utilities/FormControl';\nimport { OptionalFormControl } from '../sbadmin2/utilities/OptionalFormControl';\nimport { FormInModal } from '../sbadmin2/utilities/FormInModal';\nimport { useFormData } from '../sbadmin2/utilities/useFormData';\nimport PropTypes from 'prop-types';\nimport * as model from '../../model/propTypes';\nimport { useDictionary } from '../sbadmin2/language';\n\nexport function EnvelopeModal({ init, ...props }) {\n  const { envelopes } = useDictionary();\n  const formData = useFormData({\n    name: { $init: init.name },\n    limit: { $init: Amount.format(init.limit, false), $process: Amount.parse },\n  });\n  return (\n    <FormInModal formData={formData} autoFocusRef={formData.name} {...props}>\n      <FormControl\n        label={envelopes.modal.labels.name}\n        inline={9}\n        feedback=\"Provide a name for the envelope\"\n        required\n        formData={formData.name}\n      />\n      <OptionalFormControl\n        initEnabled={!!init.limit}\n        inline={9}\n        label={envelopes.modal.labels.limit}\n        feedback=\"Provide a limit for the envelope\"\n        type=\"number\"\n        required\n        formData={formData.limit}\n        step=\"0.01\"\n      />\n    </FormInModal>\n  );\n}\n\nEnvelopeModal.propTypes = {\n  init: PropTypes.shape({\n    name: PropTypes.string,\n    limit: model.Amount,\n  }).isRequired,\n  onSave: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { OpenModalButton } from '../sbadmin2';\nimport CreateButton from '../sbadmin2/utilities/CreateButton';\nimport { useCreateEnvelope } from '../gql/envelopes';\nimport { EnvelopeModal } from './EnvelopeModal';\nimport { useDictionary } from '../sbadmin2/language';\nimport PropTypes from 'prop-types';\n\nexport function CreateEnvelopeButton({ onClickRef }) {\n  const [createEnvelope] = useCreateEnvelope();\n  const { envelopes } = useDictionary();\n  return (\n    <OpenModalButton\n      onClickRef={onClickRef}\n      button={props => <CreateButton {...props} />}\n      modalContent={props => (\n        <EnvelopeModal\n          title={envelopes.modal.createTitle}\n          init={{ name: '', limit: null }}\n          onSave={createEnvelope}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nCreateEnvelopeButton.propTypes = {\n  onClickRef: PropTypes.shape({ current: PropTypes.any }),\n};\n","import React from 'react';\nimport { OpenModalButton, ClickableIcon, Icon } from '../sbadmin2';\nimport { useUpdateEnvelope } from '../gql/envelopes';\nimport { EnvelopeModal } from './EnvelopeModal';\nimport PropTypes from 'prop-types';\nimport { useDictionary } from '../sbadmin2/language';\nimport { Variant } from '../sbadmin2/bootstrap';\n\nexport function UpdateEnvelopeButton({ envelope }) {\n  const [updateEnvelope] = useUpdateEnvelope();\n  const { envelopes } = useDictionary();\n\n  const onSave = input => {\n    updateEnvelope(envelope.id, input);\n  };\n  return (\n    <OpenModalButton\n      button={props => (\n        <ClickableIcon icon={Icon.Edit} variant={Variant.primary} {...props} />\n      )}\n      modalContent={props => (\n        <EnvelopeModal\n          title={envelopes.modal.editTitle}\n          init={envelope}\n          onSave={onSave}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nUpdateEnvelopeButton.propTypes = {\n  envelope: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n  }),\n};\n","import React from 'react';\nimport { useGetEnvelopes } from '../gql/envelopes';\nimport { CreateEnvelopeButton } from './CreateEnvelopeButton';\nimport Amount from '../../model/Amount';\nimport { UpdateEnvelopeButton } from './UpdateEnvelopeButton';\nimport { QueryTablePanel } from '../gql/QueryTablePanel';\nimport { Variant } from '../sbadmin2/bootstrap';\nimport { Icon, ClickableIcon } from '../sbadmin2';\n\nconst columns = [\n  { dataField: 'name', sort: true },\n  {\n    dataField: 'limit',\n    formatter: Amount.format,\n    align: 'right',\n    headerAlign: 'right',\n  },\n  {\n    dataField: 'balance',\n    formatter: Amount.format,\n    align: 'right',\n    headerAlign: 'right',\n  },\n  {\n    dataField: 'overLimit',\n    align: 'right',\n    headerAlign: 'right',\n    formatter: (cell, row) =>\n      row.limit !== null && row.limit < row.balance\n        ? Amount.format(row.balance - row.limit)\n        : '',\n  },\n  {\n    dataField: 'actions',\n    isDummyColumn: true,\n    formatter: (cell, row) => (\n      <span>\n        <UpdateEnvelopeButton envelope={row} />\n        <ClickableIcon icon={Icon.Archive} variant={Variant.secondary} />\n      </span>\n    ),\n    style: {\n      whiteSpace: 'nowrap',\n      width: '1%',\n    },\n  },\n];\n\nconst defaultSorted = [\n  {\n    dataField: 'name',\n    order: 'asc',\n  },\n];\n\nexport function EnvelopesListPanel({ createFunRef }) {\n  const query = useGetEnvelopes();\n  return (\n    <QueryTablePanel\n      query={query}\n      buttons={<CreateEnvelopeButton openRef={createFunRef} />}\n      getData={data => data.envelopes}\n      columns={columns}\n      keyField=\"id\"\n      readTitle={d => d.envelopes.table.title}\n      readColumnNames={d => d.envelopes.table.columns}\n      defaultSorted={defaultSorted}\n    />\n  );\n}\n","import React from 'react';\nimport { FormInModal } from '../sbadmin2/utilities/FormInModal';\nimport { useFormData } from '../sbadmin2/utilities/useFormData';\nimport { FormControl } from '../sbadmin2/utilities/FormControl';\nimport PropTypes from 'prop-types';\nimport { useGetEnvelopes } from '../gql/envelopes';\nimport { WithQuery } from '../gql/WithQuery';\nimport { Combobox } from '../sbadmin2/utilities/Combobox';\nimport { InlineFormControl } from '../sbadmin2/utilities/InlineFormControl';\nimport { useDictionary } from '../sbadmin2/language';\n\nexport function CategoryModal({ init, ...props }) {\n  const query = useGetEnvelopes();\n  const { categories } = useDictionary();\n  const formData = useFormData({\n    name: { $init: init.name },\n    envelopeID: {\n      $init: init.envelope.id,\n    },\n    description: { $init: init.description },\n  });\n  return (\n    <FormInModal autoFocusRef={formData.name} formData={formData} {...props}>\n      <WithQuery query={query}>\n        {({ data }) => (\n          <>\n            <FormControl\n              label={categories.modal.labels.name}\n              inline={9}\n              formData={formData.name}\n              feedback=\"Provide name\"\n            />\n            <InlineFormControl\n              size={9}\n              label={categories.modal.labels.envelope}\n            >\n              <Combobox\n                allowedValues={data.envelopes.map(({ id, name }) => ({\n                  id,\n                  label: name,\n                }))}\n                _ref={formData.envelopeID}\n                defaultValue={formData.envelopeID.default()}\n              />\n            </InlineFormControl>\n            <FormControl\n              label={categories.modal.labels.description}\n              inline={9}\n              formData={formData.description}\n              feedback=\"Provide description\"\n            />\n          </>\n        )}\n      </WithQuery>\n    </FormInModal>\n  );\n}\n\nCategoryModal.propTypes = {\n  init: PropTypes.shape({\n    name: PropTypes.string,\n    envelope: PropTypes.shape({ id: PropTypes.string }).isRequired,\n  }),\n  onSave: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { OpenModalButton } from '../sbadmin2';\nimport CreateButton from '../sbadmin2/utilities/CreateButton';\nimport { useCreateCategory } from '../gql/categories';\nimport { CategoryModal } from './CategoryModal';\nimport { useDictionary } from '../sbadmin2/language';\nimport PropTypes from 'prop-types';\n\nexport function CreateCategoryButton({ onClickRef }) {\n  const [createCategory] = useCreateCategory();\n  const { categories } = useDictionary();\n  return (\n    <OpenModalButton\n      onClickRef={onClickRef}\n      button={props => <CreateButton {...props} />}\n      modalContent={props => (\n        <CategoryModal\n          title={categories.modal.createTitle}\n          init={{ name: '', envelope: { id: null }, description: '' }}\n          onSave={createCategory}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nCreateCategoryButton.propTypes = {\n  onClickRef: PropTypes.shape({ current: PropTypes.any }),\n};\n","import React from 'react';\nimport { OpenModalButton, ClickableIcon, Icon } from '../sbadmin2';\nimport { CategoryModal } from './CategoryModal';\nimport PropTypes from 'prop-types';\nimport { useUpdateCategory } from '../gql/categories';\nimport { useDictionary } from '../sbadmin2/language';\nimport { Variant } from '../sbadmin2/bootstrap';\n\nexport function UpdateCategoryButton({ category }) {\n  const [updateEnvelope] = useUpdateCategory();\n  const { categories } = useDictionary();\n  const onSave = input => {\n    updateEnvelope(category.id, input);\n  };\n  return (\n    <OpenModalButton\n      button={props => (\n        <ClickableIcon icon={Icon.Edit} variant={Variant.primary} {...props} />\n      )}\n      modalContent={props => (\n        <CategoryModal\n          title={categories.modal.editTitle}\n          init={category}\n          onSave={onSave}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nUpdateCategoryButton.propTypes = {\n  category: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n  }),\n};\n","import React from 'react';\nimport { useGetCategories } from '../gql/categories';\nimport { QueryTablePanel } from '../gql/QueryTablePanel';\nimport { CreateCategoryButton } from './CreateCategoryButton';\nimport { UpdateCategoryButton } from './UpdateCategoryButton';\nimport { ClickableIcon, Icon } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\n\nconst columns = [\n  { dataField: 'name', sort: true },\n  {\n    dataField: 'envelope',\n    formatter: a => a.name,\n    sort: true,\n  },\n  { dataField: 'description' },\n  {\n    dataField: 'actions',\n    isDummyColumn: true,\n    formatter: (cell, row) => (\n      <span>\n        <UpdateCategoryButton category={row} />\n        <ClickableIcon icon={Icon.Archive} variant={Variant.secondary} />\n      </span>\n    ),\n    style: {\n      whiteSpace: 'nowrap',\n      width: '1%',\n    },\n  },\n];\n\nconst defaultSorted = [\n  {\n    dataField: 'name',\n    order: 'asc',\n  },\n];\n\nexport function CategoriesListPanel({ createFunRef }) {\n  const query = useGetCategories();\n  return (\n    <QueryTablePanel\n      keyField=\"id\"\n      columns={columns}\n      buttons={<CreateCategoryButton openRef={createFunRef} />}\n      query={query}\n      getData={data => data.categories}\n      readTitle={d => d.categories.table.title}\n      readColumnNames={d => d.categories.table.columns}\n      defaultSorted={defaultSorted}\n    />\n  );\n}\n","import React, { useRef } from 'react';\nimport { Page } from '../sbadmin2';\nimport { EnvelopesListPanel } from './EnvelopesListPanel';\nimport { CategoriesListPanel } from '../Categories/CategoriesListPanel';\nimport { GlobalHotKeys } from 'react-hotkeys';\n\nconst keyMap = {\n  createEnvelope: 'e',\n  createCategory: 'c',\n};\n\nconst handlers = (createEnvelopeFunRef, createCategoryFunRef) => ({\n  createEnvelope: () => createEnvelopeFunRef.current(),\n  createCategory: () => createCategoryFunRef.current(),\n});\n\nexport default function EnvelopesPage() {\n  const createEnvelopeFunRef = useRef();\n  const createCategoryFunRef = useRef();\n  return (\n    <Page>\n      <GlobalHotKeys\n        keyMap={keyMap}\n        handlers={handlers(createEnvelopeFunRef, createCategoryFunRef)}\n      />\n      <Page.Header readTitle={d => d.sidebar.pages.envelopes} />\n      <EnvelopesListPanel createFunRef={createEnvelopeFunRef} />\n      <CategoriesListPanel createFunRef={createCategoryFunRef} />\n    </Page>\n  );\n}\n","import React from 'react';\nimport { Page } from '../sbadmin2';\nimport { CreateExpenseButton } from './CreateExpenseButton';\nimport { ExpensesTablePanel } from './ExpensesTablePanel';\n\nexport default function ExpensesPage() {\n  return (\n    <Page>\n      <Page.Header readTitle={d => d.sidebar.pages.expenses} />\n      <ExpensesTablePanel\n        readTitle={d => d.expenses.table.title}\n        createButton={<CreateExpenseButton />}\n      />\n    </Page>\n  );\n}\n","import React, { useRef } from 'react';\nimport { Page, ClickableIcon, Icon, OpenModalButton } from './sbadmin2';\nimport CreateButton from './sbadmin2/utilities/CreateButton';\nimport { FormControl } from './sbadmin2/utilities/FormControl';\nimport { FormInModal } from './sbadmin2/utilities/FormInModal';\nimport { useFormData } from './sbadmin2/utilities/useFormData';\nimport Amount from '../model/Amount';\nimport Month from '../model/Month';\nimport {\n  useCreateTransfer,\n  useGetCurrentTransfers,\n  useUpdateTransfer,\n  useDeleteTranfer,\n} from './gql/transfers';\nimport { QueryTablePanel } from './gql/QueryTablePanel';\nimport { useGetAccounts } from './gql/accounts';\nimport { useBudget } from './gql/budget';\nimport { WithQuery } from './gql/WithQuery';\nimport { GlobalHotKeys } from 'react-hotkeys';\nimport { Combobox } from './sbadmin2/utilities/Combobox';\nimport { InlineFormControl } from './sbadmin2/utilities/InlineFormControl';\nimport { useDictionary } from './sbadmin2';\nimport { Variant } from './sbadmin2/bootstrap';\n\nconst columns = [\n  { dataField: 'title' },\n  {\n    dataField: 'fromAccount',\n    formatter: a => a && a.name,\n  },\n  {\n    dataField: 'toAccount',\n    formatter: a => a.name,\n  },\n  {\n    dataField: 'amount',\n    align: 'right',\n    headerAlign: 'right',\n    formatter: Amount.format,\n  },\n  {\n    dataField: 'date',\n    align: 'right',\n    headerAlign: 'right',\n  },\n  {\n    dataField: 'actions',\n    isDummyColumn: true,\n    formatter: (cell, row) => (\n      <span>\n        <UpdateTransferButton transfer={row} />\n        <DeleteTransferButton transfer={row} />\n      </span>\n    ),\n    style: {\n      whiteSpace: 'nowrap',\n      width: '1%',\n    },\n  },\n];\n\nfunction TransferModal({ init, ...props }) {\n  const { selectedBudget } = useBudget();\n  const { transfers } = useDictionary();\n  const query = useGetAccounts();\n  const formData = useFormData({\n    title: { $init: init.title },\n    date: { $init: init.date },\n    amount: {\n      $init: Amount.format(init.amount, false),\n      $process: Amount.parse,\n    },\n    fromAccountID: {\n      $init: init.fromAccount && init.fromAccount.id,\n      $process: v => (v === '' ? null : v),\n    },\n    toAccountID: { $init: init.toAccount.id },\n  });\n  const month = Month.parse(selectedBudget.currentMonth.month);\n  const first = month.firstDay();\n  const last = month.lastDay();\n  return (\n    <FormInModal formData={formData} autoFocusRef={formData.title} {...props}>\n      <WithQuery query={query}>\n        {({ data }) => (\n          <>\n            <FormControl\n              required\n              label={transfers.modal.labels.title}\n              inline={10}\n              formData={formData.title}\n              feedback=\"Provide title\"\n            />\n            <FormControl\n              label={transfers.modal.labels.date}\n              inline={10}\n              formData={formData.date}\n              feedback=\"Provide date\"\n              type=\"date\"\n              required\n              min={first.format()}\n              max={last.format()}\n            />\n            <FormControl\n              inline={10}\n              label={transfers.modal.labels.amount}\n              feedback=\"Provide amount\"\n              type=\"number\"\n              required\n              formData={formData.amount}\n              step=\"0.01\"\n            />\n            <InlineFormControl\n              size={10}\n              label={transfers.modal.labels.fromAccount}\n            >\n              <Combobox\n                allowedValues={data.accounts.map(({ id, name }) => ({\n                  id,\n                  label: name,\n                }))}\n                _ref={formData.fromAccountID}\n                defaultValue={formData.fromAccountID.default()}\n              />\n            </InlineFormControl>\n            <InlineFormControl\n              size={10}\n              label={transfers.modal.labels.toAccount}\n            >\n              <Combobox\n                allowedValues={data.accounts.map(({ id, name }) => ({\n                  id,\n                  label: name,\n                }))}\n                _ref={formData.toAccountID}\n                defaultValue={formData.toAccountID.default()}\n              />\n            </InlineFormControl>\n          </>\n        )}\n      </WithQuery>\n    </FormInModal>\n  );\n}\n\nfunction DeleteTransferButton({ transfer }) {\n  const [deleteTransfer] = useDeleteTranfer();\n  return (\n    <ClickableIcon\n      icon={Icon.Trash}\n      variant={Variant.secondary}\n      onClick={() => deleteTransfer(transfer.id)}\n    />\n  );\n}\n\nfunction UpdateTransferButton({ transfer }) {\n  const [updateTransfer] = useUpdateTransfer();\n  const { transfers } = useDictionary();\n  return (\n    <OpenModalButton\n      button={props => (\n        <ClickableIcon icon={Icon.Edit} variant={Variant.primary} {...props} />\n      )}\n      modalContent={props => (\n        <TransferModal\n          init={transfer}\n          title={transfers.modal.editTitle}\n          onSave={input => updateTransfer(transfer.id, input)}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nfunction CreateTransferButton({ openRef }) {\n  const [createTransfer] = useCreateTransfer();\n  const { transfers } = useDictionary();\n\n  return (\n    <OpenModalButton\n      button={props => <CreateButton {...props} ref={openRef} />}\n      modalContent={props => (\n        <TransferModal\n          init={{\n            title: null,\n            fromAccount: { id: null },\n            toAccount: { id: null },\n            amount: null,\n            date: null,\n          }}\n          title={transfers.modal.createTitle}\n          onSave={createTransfer}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nconst keyMap = {\n  openModal: 'n',\n};\nconst keyHandlers = openCreateModal => ({\n  openModal: () => openCreateModal.current.click(),\n});\n\nexport default function Transfers() {\n  const query = useGetCurrentTransfers();\n  const openCreateModal = useRef();\n\n  return (\n    <Page>\n      <GlobalHotKeys keyMap={keyMap} handlers={keyHandlers(openCreateModal)} />\n      <Page.Header readTitle={d => d.sidebar.pages.transfers} />\n      <QueryTablePanel\n        query={query}\n        getData={data => data.budget.currentMonth.transfers}\n        buttons={<CreateTransferButton openRef={openCreateModal} />}\n        columns={columns}\n        keyField=\"id\"\n        readTitle={d => d.transfers.table.title}\n        readColumnNames={d => d.transfers.table.columns}\n      />\n    </Page>\n  );\n}\n","import React, { useRef } from 'react';\nimport { Page, ClickableIcon, Icon, OpenModalButton } from './sbadmin2';\nimport CreateButton from './sbadmin2/utilities/CreateButton';\nimport { FormControl } from './sbadmin2/utilities/FormControl';\nimport { OptionalFormControl } from './sbadmin2/utilities/OptionalFormControl';\nimport { FormInModal } from './sbadmin2/utilities/FormInModal';\nimport { useFormData } from './sbadmin2/utilities/useFormData';\nimport Amount from '../model/Amount';\nimport {\n  useCreatePlan,\n  useGetCurrentPlans,\n  useUpdatePlan,\n  useDeletePlan,\n} from './gql/plans';\nimport { QueryTablePanel } from './gql/QueryTablePanel';\nimport { useGetEnvelopes } from './gql/envelopes';\nimport { WithQuery } from './gql/WithQuery';\nimport { GlobalHotKeys } from 'react-hotkeys';\nimport { InlineFormControl } from './sbadmin2/utilities/InlineFormControl';\nimport { Combobox } from './sbadmin2/utilities/Combobox';\nimport { useDictionary } from './sbadmin2';\nimport { Variant } from './sbadmin2/bootstrap';\n\nconst columns = [\n  { dataField: 'title' },\n  {\n    dataField: 'fromEnvelope',\n    formatter: a => a && a.name,\n  },\n  {\n    dataField: 'toEnvelope',\n    formatter: a => a.name,\n  },\n  {\n    dataField: 'currentAmount',\n    formatter: Amount.format,\n    align: 'right',\n    headerAlign: 'right',\n  },\n  {\n    dataField: 'recurringAmount',\n    formatter: a =>\n      a !== null ? <i className=\"fas fa-fw fa-sync-alt\" /> : null,\n  },\n  {\n    dataField: 'actions',\n    isDummyColumn: true,\n    formatter: (cell, row) => (\n      <span>\n        <UpdatePlanButton plan={row} />\n        <DeletePlanButton plan={row} />\n      </span>\n    ),\n    style: {\n      whiteSpace: 'nowrap',\n      width: '1%',\n    },\n  },\n];\n\nfunction PlanModal({ init, ...props }) {\n  const query = useGetEnvelopes();\n  const { plans } = useDictionary();\n  const formData = useFormData({\n    title: { $init: init.title },\n    currentAmount: {\n      $init: Amount.format(init.currentAmount, false),\n      $process: Amount.parse,\n    },\n    recurringAmount: {\n      $init: Amount.format(init.recurringAmount, false),\n      $default: fd => Amount.format(fd.currentAmount.value()),\n      $process: Amount.parse,\n    },\n    fromEnvelopeID: {\n      $init: init.fromEnvelope !== null ? init.fromEnvelope.id : '',\n      $process: v => (v === '' ? null : v),\n    },\n    toEnvelopeID: { $init: init.toEnvelope.id },\n  });\n  return (\n    <FormInModal formData={formData} autoFocusRef={formData.title} {...props}>\n      <WithQuery query={query}>\n        {({ data }) => (\n          <>\n            <FormControl\n              required\n              label={plans.modal.labels.title}\n              inline={10}\n              formData={formData.title}\n              feedback=\"Provide title\"\n            />\n            <FormControl\n              inline={8}\n              label={plans.modal.labels.amount}\n              feedback=\"Provide amount\"\n              type=\"number\"\n              required\n              formData={formData.currentAmount}\n              step=\"0.01\"\n            />\n            <OptionalFormControl\n              initEnabled={init.recurringAmount !== null}\n              inline={8}\n              label={plans.modal.labels.recurring}\n              feedback=\"Provide amount for recurring plans\"\n              type=\"number\"\n              required\n              formData={formData.recurringAmount}\n              step=\"0.01\"\n            />\n            <InlineFormControl size={8} label={plans.modal.labels.fromEnvelope}>\n              <Combobox\n                _ref={formData.fromEnvelopeID}\n                defaultValue={formData.fromEnvelopeID.default()}\n                allowedValues={data.envelopes.map(({ id, name }) => ({\n                  id,\n                  label: name,\n                }))}\n              />\n            </InlineFormControl>\n            <InlineFormControl size={8} label={plans.modal.labels.toEnvelope}>\n              <Combobox\n                _ref={formData.toEnvelopeID}\n                defaultValue={formData.toEnvelopeID.default()}\n                allowedValues={data.envelopes.map(({ id, name }) => ({\n                  id,\n                  label: name,\n                }))}\n              />\n            </InlineFormControl>\n          </>\n        )}\n      </WithQuery>\n    </FormInModal>\n  );\n}\n\nfunction UpdatePlanButton({ plan }) {\n  const [updatePlan] = useUpdatePlan();\n  const { plans } = useDictionary();\n\n  return (\n    <OpenModalButton\n      button={props => (\n        <ClickableIcon icon={Icon.Edit} variant={Variant.primary} {...props} />\n      )}\n      modalContent={props => (\n        <PlanModal\n          init={plan}\n          title={plans.modal.editTitle}\n          onSave={input => updatePlan(plan.id, input)}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nfunction DeletePlanButton({ plan }) {\n  const [deletePlan] = useDeletePlan();\n  return (\n    <ClickableIcon\n      icon={Icon.Trash}\n      variant={Variant.secondary}\n      onClick={() => deletePlan(plan.id)}\n    />\n  );\n}\n\nfunction CreatePlanButton({ openRef }) {\n  const [createPlan] = useCreatePlan();\n  const { plans } = useDictionary();\n\n  return (\n    <OpenModalButton\n      button={props => <CreateButton ref={openRef} {...props} />}\n      renderModal={props => (\n        <PlanModal\n          init={{\n            title: null,\n            fromEnvelope: { id: null },\n            toEnvelope: { id: null },\n            currentAmount: null,\n            recurringAmount: null,\n            date: null,\n          }}\n          title={plans.modal.createTitle}\n          onSave={createPlan}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nconst keyMap = {\n  create: 'n',\n};\n\nconst handlers = openCreateModalRef => ({\n  create: () => openCreateModalRef.current(),\n});\n\nexport default function Plans() {\n  const openCreateModalRef = useRef();\n  const query = useGetCurrentPlans();\n\n  return (\n    <Page>\n      <GlobalHotKeys keyMap={keyMap} handlers={handlers(openCreateModalRef)} />\n      <Page.Header readTitle={d => d.sidebar.pages.plans} />\n      <QueryTablePanel\n        query={query}\n        getData={data => data.budget.currentMonth.plans}\n        buttons={<CreatePlanButton openRef={openCreateModalRef} />}\n        columns={columns}\n        keyField=\"id\"\n        readTitle={d => d.plans.table.title}\n        readColumnNames={d => d.plans.table.columns}\n      />\n    </Page>\n  );\n}\n","import React from 'react';\n\nexport function Gauge({ className, variant, title, value, faIcon }) {\n  return (\n    <div className={className}>\n      <div className={`card border-left-${variant} shadow h-100 py-2`}>\n        <div className=\"card-body\">\n          <div className=\"row no-gutters align-items-center\">\n            <div className=\"col mr-2\">\n              <div\n                className={`text-xs font-weight-bold text-${variant} text-uppercase mb-1`}\n              >\n                {title}\n              </div>\n              <div className=\"h5 mb-0 font-weight-bold text-gray-800\">\n                {value}\n              </div>\n            </div>\n            <div className=\"col-auto\">\n              <i className={`fas fa-${faIcon} fa-2x text-gray-300`} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Page, Panel, SplitButton, useDictionary, Icon } from './sbadmin2';\nimport { Gauge } from './sbadmin2/Gauge';\nimport { useGetCurrentMonthlyReport } from './gql/monthlyReport';\nimport { WithQuery } from './gql/WithQuery';\nimport { useGetEnvelopes } from './gql/envelopes';\nimport { useGetAccounts } from './gql/accounts';\nimport Amount from '../model/Amount';\nimport { Row } from 'react-bootstrap';\nimport Month from '../model/Month';\nimport { useCloseCurrentMonth } from './gql/budget';\nimport { Variant } from './sbadmin2/bootstrap';\n\nfunction Gauges({ className, month }) {\n  const { dashboard } = useDictionary();\n  return (\n    <div className={className}>\n      <Row>\n        <Gauge\n          className=\"col-6 col-lg-12 mb-4\"\n          variant=\"primary\"\n          title={dashboard.planned}\n          value={Amount.format(month.totalPlannedAmount)}\n          faIcon=\"clipboard-list\"\n        />\n        <Gauge\n          className=\"col-6 col-lg-12 mb-4\"\n          variant=\"primary\"\n          title={dashboard.incomes}\n          value={Amount.format(month.totalIncomeAmount)}\n          faIcon=\"briefcase\"\n        />\n        <Gauge\n          className=\"col-6 col-lg-12 mb-4\"\n          variant=\"primary\"\n          title={dashboard.leftToPlan}\n          value={Amount.format(\n            month.totalIncomeAmount - month.totalPlannedAmount\n          )}\n          faIcon=\"balance-scale\"\n        />\n        <Gauge\n          className=\"col-6 col-lg-12 mb-4\"\n          variant=\"primary\"\n          title={dashboard.expenses}\n          value={Amount.format(month.totalExpenseAmount)}\n          faIcon=\"receipt\"\n        />\n      </Row>\n    </div>\n  );\n}\n\nconst severityIcon = {\n  ERROR: 'exclamation-circle',\n  WARNING: 'exclamation-triangle',\n  INFO: 'info-circle',\n};\n\nconst severityVariant = {\n  ERROR: 'danger',\n  WARNING: 'warning',\n  INFO: 'primary',\n};\n\nfunction ProblemMessage({ problem }) {\n  const envelopesQuery = useGetEnvelopes();\n  const accountsQuery = useGetAccounts();\n  const { dashboard } = useDictionary();\n\n  return (\n    <WithQuery query={envelopesQuery}>\n      {({ data: envelopesData }) => (\n        <WithQuery query={accountsQuery}>\n          {({ data: accountsData }) =>\n            problem.__typename === 'Misplanned'\n              ? problem.overplanned\n                ? dashboard.problems.overplanned\n                : dashboard.problems.underplanned\n              : problem.__typename === 'NegativeBalanceOnEnvelope'\n              ? dashboard.problems.expensesExceedPlans(\n                  envelopesData.envelopes.find(e => e.id === problem.id).name\n                )\n              : problem.__typename === 'EnvelopeOverLimit'\n              ? dashboard.problems.envelopeOverLimit(\n                  envelopesData.envelopes.find(e => e.id === problem.id).name\n                )\n              : problem.__typename === 'NegativeBalanceOnAccount'\n              ? dashboard.problems.negativeAccountBalance(\n                  accountsData.accounts.find(a => a.id === problem.id).name\n                )\n              : problem.__typename === 'MonthStillInProgress'\n              ? dashboard.problems.monthNotEnded\n              : problem.__typename\n          }\n        </WithQuery>\n      )}\n    </WithQuery>\n  );\n}\n\nfunction Problem({ problem }) {\n  return (\n    <li className={`list-group-item text-${severityVariant[problem.severity]}`}>\n      <i className={`fas fa-fw fa-${severityIcon[problem.severity]} mr-1`} />\n      <ProblemMessage problem={problem} />\n    </li>\n  );\n}\n\nfunction NoProblems() {\n  const { dashboard } = useDictionary();\n  return (\n    <li className=\"list-group-item text-success\">\n      <i className=\"fas fa-fw fa-check-circle mr-1\" />\n      {dashboard.noProblems}\n    </li>\n  );\n}\n\nfunction MonthProblems({ className, problems }) {\n  return (\n    <Panel className={className}>\n      <Panel.Header>\n        <div className=\"d-flex justify-content-between align-items-center\">\n          <Panel.Title readTitle={d => d.dashboard.problems.title} />\n        </div>\n      </Panel.Header>\n      <Panel.Body>\n        <ul className=\"list-group list-group-flush\">\n          {problems.length > 0 ? (\n            problems.map((problem, idx) => (\n              <Problem key={idx} problem={problem} />\n            ))\n          ) : (\n            <NoProblems />\n          )}\n        </ul>\n      </Panel.Body>\n    </Panel>\n  );\n}\n\nfunction StartNextMonthButton({ disabled, warn }) {\n  const [closeCurrentMonth] = useCloseCurrentMonth();\n  const { dashboard } = useDictionary();\n  return (\n    <SplitButton\n      icon={Icon.ClipboardCheck}\n      variant={\n        disabled ? Variant.secondary : warn ? Variant.warning : Variant.success\n      }\n      disabled={disabled}\n      onClick={() => closeCurrentMonth()}\n    >\n      {dashboard.buttons.closeMonth}\n    </SplitButton>\n  );\n}\n\nfunction CurrentMonth({ className, month }) {\n  const { dashboard, months } = useDictionary();\n  const parsed = Month.parse(month.month);\n\n  return (\n    <Panel className={className}>\n      <Panel.Header>\n        <div className=\"d-flex justify-content-between align-items-center\">\n          <Panel.Title\n            title={\n              <span>\n                {dashboard.currentMonth}:{' '}\n                <strong>\n                  <em>\n                    {months[parsed.month - 1]} {parsed.year}\n                  </em>\n                </strong>\n              </span>\n            }\n          />\n          <div>\n            <StartNextMonthButton\n              disabled={month.problems.some(p => p.severity === 'ERROR')}\n              warn={month.problems.length > 0}\n            />\n          </div>\n        </div>\n      </Panel.Header>\n    </Panel>\n  );\n}\n\nexport function MonthDashboardPage() {\n  const query = useGetCurrentMonthlyReport();\n  return (\n    <Page>\n      <WithQuery query={query}>\n        {({ data }) => (\n          <Row>\n            <CurrentMonth\n              className=\"col-12 d-lg-none px-0\"\n              month={data.budget.currentMonth}\n            />\n            <Gauges\n              className=\"col-12 col-lg-3\"\n              month={data.budget.currentMonth}\n            />\n            <MonthProblems\n              className=\"col-12 d-lg-none px-0\"\n              problems={data.budget.currentMonth.problems}\n            />\n            <Row className=\"col-12 col-lg-9 flex-lg-column\">\n              <CurrentMonth\n                className=\"d-none d-lg-block\"\n                month={data.budget.currentMonth}\n              />\n              <MonthProblems\n                className=\"d-none d-lg-block flex-grow-1\"\n                problems={data.budget.currentMonth.problems}\n              />\n            </Row>\n          </Row>\n        )}\n      </WithQuery>\n    </Page>\n  );\n}\n","export default {\n  buttons: {\n    create: 'Dodaj',\n    cancel: 'Anuluj',\n    save: 'Zapisz',\n  },\n  sidebar: {\n    sections: {\n      currentMonth: 'Bieżący miesiąc',\n      budget: 'Budżet',\n    },\n    pages: {\n      dashboard: 'Podsumowanie',\n      expenses: 'Wydatki',\n      transfers: 'Przelewy',\n      plans: 'Plany',\n      accounts: 'Konta',\n      envelopes: 'Koperty',\n    },\n  },\n  topbar: {\n    budgetLabel: 'Budżet',\n    alertsLabel: 'Powiadomienia',\n    messagesLabel: 'Wiadomości',\n  },\n  dashboard: {\n    planned: 'Zaplanowano',\n    incomes: 'Wpływy',\n    leftToPlan: 'Pozostało do zaplanowania',\n    expenses: 'Wydatki',\n    currentMonth: 'Bieżący miesiąc',\n    noProblems: 'Wszystko w porządku',\n    problems: {\n      title: 'Problemy',\n      overplanned: 'Plany na bieżący miesiąc przekraczają wydatki',\n      underplanned: 'Część środków jest nierozplanowana',\n      expensesExceedPlans: envelope =>\n        `Wydatki przekroczyły zaplanowany budżet na kopercie \"${envelope}\"`,\n      envelopeOverLimit: envelope =>\n        `Limit dla koperty \"${envelope}\" został przekroczony`,\n      negativeAccountBalance: account =>\n        `Bilans na koncie \"${account}\" jest ujemny`,\n      monthNotEnded: 'Miesiąc się jeszcze nie skończył',\n    },\n    buttons: {\n      closeMonth: 'Zamknij miesiąc',\n    },\n  },\n  accounts: {\n    table: {\n      title: 'Konta',\n      columns: {\n        balance: 'Bilans',\n        name: 'Nazwa',\n      },\n    },\n    expensesTableTitle: account => `Wydatki dla konta \"${account}\"`,\n    modal: {\n      createTitle: 'Dodaj nowe konto',\n      editTitle: 'Edytuj konto',\n      labels: {\n        name: 'Nazwa',\n      },\n    },\n  },\n  envelopes: {\n    table: {\n      title: 'Koperty',\n      columns: {\n        balance: 'Bilans',\n        name: 'Nazwa',\n        limit: 'Limit',\n        overLimit: 'Ponad limit',\n      },\n    },\n    modal: {\n      createTitle: 'Dodaj nową kopertę',\n      editTitle: 'Edytuj kopertę',\n      labels: {\n        name: 'Nazwa',\n        limit: 'Limit',\n      },\n    },\n  },\n  categories: {\n    table: {\n      title: 'Kategorie',\n      columns: {\n        name: 'Nazwa',\n        envelope: 'Koperta',\n        description: 'Opis',\n      },\n    },\n    modal: {\n      createTitle: 'Dodaj nową kategorię',\n      editTitle: 'Edytuj kategorię',\n      labels: {\n        name: 'Nazwa',\n        envelope: 'Koperta',\n        description: 'Opis',\n      },\n    },\n  },\n  plans: {\n    table: {\n      title: 'Plany',\n      columns: {\n        title: 'Tytuł',\n        fromEnvelope: 'Z',\n        toEnvelope: 'Do',\n        currentAmount: 'Kwota',\n      },\n    },\n    modal: {\n      createTitle: 'Dodaj nowy plan',\n      editTitle: 'Edytuj plan',\n      labels: {\n        title: 'Tytuł',\n        fromEnvelope: 'Z',\n        toEnvelope: 'Do',\n        amount: 'Kwota',\n        recurring: 'Cyklicznie',\n      },\n    },\n  },\n  transfers: {\n    table: {\n      title: 'Przelewy',\n      columns: {\n        title: 'Tytuł',\n        fromAccount: 'Z',\n        toAccount: 'Do',\n        amount: 'Kwota',\n        date: 'Data',\n      },\n    },\n    modal: {\n      createTitle: 'Dodaj nowy przelew',\n      editTitle: 'Edytuj przelew',\n      labels: {\n        title: 'Tytuł',\n        fromAccount: 'Z',\n        toAccount: 'Do',\n        amount: 'Kwota',\n        date: 'Data',\n      },\n    },\n  },\n  expenses: {\n    table: {\n      title: 'Wydatki',\n      columns: {\n        title: 'Tytuł',\n        totalAmount: 'Kwota',\n        date: 'Data',\n        account: 'Konto',\n      },\n    },\n    modal: {\n      createTitle: 'Dodaj nowy wydatek',\n      editTitle: 'Edytuj wydatek',\n      labels: {\n        title: 'Tytuł',\n        fromAccount: 'Z',\n        toAccount: 'Do',\n        account: 'Konto',\n        date: 'Data',\n        categories: 'Kategorie',\n        amount: 'Kwota',\n        category: 'Kategoria',\n      },\n    },\n  },\n  months: [\n    'Styczeń',\n    'Luty',\n    'Marzec',\n    'Kwiecień',\n    'Maj',\n    'Czerwiec',\n    'Lipiec',\n    'Sierpień',\n    'Wrzesień',\n    'Październik',\n    'Listopad',\n    'Grudzień',\n  ],\n};\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Topbar from '../Topbar';\nimport { SBAdmin2 } from '../sbadmin2';\nimport { sidebarConfig } from './sidebarConfig';\nimport { BudgetProvider, BudgetContext } from '../gql/budget';\nimport Accounts from '../Accounts/Accounts';\nimport Envelopes from '../Envelopes/EnvelopesPage';\nimport ExpensesPage from '../Expenses/ExpensesPage';\nimport Transfers from '../Transfers';\nimport Plans from '../Plans';\nimport { MonthDashboardPage } from '../MonthDashboardPage';\nimport pl from '../../lang/pl';\nimport { useAuth0 } from '../../react-auth0-spa';\n\nconst dictionaries = {\n  pl,\n};\n\nexport default function App() {\n  const { user, logout } = useAuth0();\n  return (\n    <BudgetProvider>\n      <SBAdmin2\n        sidebarProps={{\n          renderBrandName: () => 'Budget',\n          renderBrandIcon: () => <i className=\"fas fa-bold\" />,\n          config: sidebarConfig(pl),\n        }}\n        topbar={Topbar}\n        copyright={'Budget 2019'}\n        dictionaries={dictionaries}\n        user={user}\n        logout={logout}\n      >\n        <BudgetContext.Consumer>\n          {({ selectedBudget }) =>\n            selectedBudget && (\n              <Switch>\n                <Route path=\"/accounts\" component={Accounts} />\n                <Route path=\"/envelopes\" component={Envelopes} />\n                <Route path=\"/expenses\" component={ExpensesPage} />\n                <Route path=\"/transfers\" component={Transfers} />\n                <Route path=\"/plans\" component={Plans} />\n                <Route path=\"/\" component={MonthDashboardPage} />\n              </Switch>\n            )\n          }\n        </BudgetContext.Consumer>\n      </SBAdmin2>\n    </BudgetProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createHttpLink } from 'apollo-link-http';\nimport { ApolloLink } from 'apollo-link';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { onError } from 'apollo-link-error';\nimport { setContext } from 'apollo-link-context';\n\nimport { IntrospectionFragmentMatcher } from 'apollo-cache-inmemory';\nimport introspectionQueryResultData from './fragmentTypes.json';\nimport { useAuth0 } from './react-auth0-spa.js';\nimport React, { useEffect } from 'react';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nconst fragmentMatcher = new IntrospectionFragmentMatcher({\n  introspectionQueryResultData,\n});\n\nexport function isSubscriptionOperation({ query }) {\n  const definition = getMainDefinition(query);\n  return (\n    definition.kind === 'OperationDefinition' &&\n    definition.operation === 'subscription'\n  );\n}\n\nexport function createClient(token) {\n  const graphqlApiUrl = process.env.REACT_APP_GQL_URL;\n  // const graphqlApiUrl = 'http://localhost:8080/query';\n  const httpLink = createHttpLink({ uri: graphqlApiUrl });\n  const authLink = setContext((_, { headers }) => {\n    // get the authentication token from local storage if it exists\n    // return the headers to the context so httpLink can read them\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    };\n  });\n  const cache = new InMemoryCache({ fragmentMatcher });\n\n  const errorLink = onError(({ graphQLErrors, networkError }) => {\n    if (process.env.REACT_APP_ENV !== 'production') {\n      if (graphQLErrors) {\n        graphQLErrors.map(({ message, locations, path }) =>\n          console.log(\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n          )\n        );\n      }\n\n      if (networkError) console.log(`[Network error]: ${networkError}`);\n    }\n  });\n\n  // const link = split(isSubscriptionOperation, wsLink, httpLink);\n  const link = authLink.concat(httpLink);\n\n  return new ApolloClient({\n    uri: graphqlApiUrl,\n    cache,\n    link: ApolloLink.from([errorLink, link]),\n    connectToDevTools: true,\n  });\n}\n\nexport function AuthApolloProvider({ children }) {\n  const { isAuthenticated, loading, loginWithRedirect, token } = useAuth0();\n\n  useEffect(() => {\n    if (loading) {\n      return;\n    }\n    if (!isAuthenticated) {\n      loginWithRedirect({});\n      return;\n    }\n  }, [isAuthenticated, loginWithRedirect, loading]);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!isAuthenticated || !token) {\n    return <div />;\n  }\n\n  return (\n    <ApolloProvider client={createClient(token)}>{children}</ApolloProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sb-admin-2.css';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport { AuthApolloProvider, createClient } from './apollo';\nimport { Auth0Provider, Auth0Context } from './react-auth0-spa';\nimport config from './auth_config.json';\nimport { Beta } from './components/Beta';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = appState => {\n  window.history.replaceState(\n    {},\n    document.title,\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\nconst redirectURI = `${window.location.origin}${process.env.PUBLIC_URL}`;\n\nconst ProdAuthorizationProvider = ({ children }) => (\n  <Auth0Provider\n    domain={config.domain}\n    client_id={config.clientId}\n    redirect_uri={redirectURI}\n    onRedirectCallback={onRedirectCallback}\n    audience={config.audience}\n    scope=\"beta\"\n    returnTo={redirectURI}\n  >\n    <AuthApolloProvider>{children}</AuthApolloProvider>\n  </Auth0Provider>\n);\n\nconst DevAuthorizationProvider = ({ children }) => (\n  <Auth0Context.Provider\n    value={{\n      isAuthenticated: true,\n      loading: false,\n      loginWithRedirect: () => {},\n      user: {\n        name: 'Valerie Luna',\n        picture: 'https://source.unsplash.com/QAB-WJcbgJk/60x60',\n        locale: 'pl',\n      },\n      getTokenScopes: () => Promise.resolve(['beta']),\n      logout: () => {},\n    }}\n  >\n    <ApolloProvider client={createClient()}>{children}</ApolloProvider>\n  </Auth0Context.Provider>\n);\n\nconst authDisabled = process.env.REACT_APP_INSECURE_AUTH_DISABLED;\nconst AuthorizationProvider =\n  authDisabled !== 'true'\n    ? ProdAuthorizationProvider\n    : DevAuthorizationProvider;\n\nReactDOM.render(\n  <AuthorizationProvider>\n    <Beta>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n      </BrowserRouter>\n    </Beta>\n  </AuthorizationProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { useAuth0 } from '../react-auth0-spa';\nimport React, { useState, useEffect } from 'react';\n\nexport function Beta({ children }) {\n  const { getTokenScopes } = useAuth0();\n  const [scope, setScope] = useState();\n\n  useEffect(() => {\n    getTokenScopes().then(setScope);\n  }, [setScope, getTokenScopes]);\n\n  if (!scope) {\n    return <div></div>;\n  }\n\n  const isBetaUser = scope.some(v => v === 'beta');\n\n  if (isBetaUser) {\n    return children;\n  }\n  return <div>This conent is available only to beta users</div>;\n}\n"],"sourceRoot":""}