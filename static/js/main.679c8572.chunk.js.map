{"version":3,"sources":["react-auth0-spa.js","apollo.js","lang/pl.js","components/sbadmin2/components/Combobox/Combobox.tsx","components/sbadmin2/components/IconButton/IconButton.tsx","components/sbadmin2/components/OpenModalButton/OpenModalButton.tsx","components/sbadmin2/context.js","components/sbadmin2/language.js","util/capitalize.js","components/sbadmin2/components/Page/PageHeader.js","components/sbadmin2/components/Page/Page.js","components/sbadmin2/components/Panel/PanelTitle.js","components/sbadmin2/components/Panel/Panel.js","components/sbadmin2/components/SplitButton/SplitButton.tsx","components/sbadmin2/components/Panel/PanelHeader.js","components/sbadmin2/components/Panel/PanelBody.js","components/sbadmin2/components/Table/Table.tsx","components/sbadmin2/components/TablePanel/TablePanel.js","components/sbadmin2/NotFoundPage.js","components/sbadmin2/Sidebar/SidebarCollapsibleLink.js","components/sbadmin2/Sidebar/SidebarSimpleLink.js","components/sbadmin2/Sidebar/SidebarGroup.js","components/sbadmin2/Sidebar/Sidebar.js","components/sbadmin2/SBAdmin2.js","components/sbadmin2/utilities/FormControl.js","components/sbadmin2/bootstrap.js","components/common/CancelButton.js","components/common/SaveButton.js","components/sbadmin2/utilities/FormInModal.js","components/common/CreateButton.js","util/immutable.js","components/gql/monthlyReport.js","components/gql/envelopes.js","components/gql/plans.js","components/gql/transfers.js","components/gql/budget.js","components/gql/accounts.js","components/gql/expenses.js","model/Amount.js","model/Day.js","model/Month.js","components/sbadmin2/utilities/Spinner.js","components/gql/WithQuery.js","components/sbadmin2/utilities/InlineFormControl.js","components/sbadmin2/utilities/useFormData.js","components/gql/categories.js","components/Expenses/AmountInput.js","components/Expenses/CategoriesInput.js","components/Expenses/ExpenseModal.js","components/Expenses/CreateExpenseButton.js","components/context/Month.jsx","components/common/RefreshButton.js","components/gql/QueryTablePanel.js","components/Expenses/DeleteExpenseButton.js","components/Expenses/UpdateExpenseButton.jsx","components/Expenses/ExpensesTablePanel.js","components/Transfers/TransferModal.js","components/Transfers/CreateTransferButton.js","components/Transfers/UpdateTransferButton.js","components/Transfers/DeleteTransferButton.js","components/Transfers/TransfersTablePanel.js","components/Accounts/AccountModal.js","components/Accounts/CreateAccountButton.js","components/Accounts/UpdateAccountButton.js","components/Accounts/AccountsTablePanel.js","components/Accounts/CollapsiblePanel.js","components/Accounts/AccountsPage.js","components/sbadmin2/utilities/OptionalFormControl.js","model/propTypes.js","components/Envelopes/EnvelopeModal.js","components/Envelopes/CreateEnvelopeButton.js","components/Envelopes/UpdateEnvelopeButton.js","components/Envelopes/EnvelopesListPanel.js","components/Categories/CategoryModal.js","components/Categories/CreateCategoryButton.js","components/Categories/UpdateCategoryButton.js","components/Categories/CategoriesListPanel.js","components/Envelopes/EnvelopesPage.js","components/sbadmin2/components/ContextSwitcher/ContextSwitcher.jsx","components/common/MonthSwitcher.js","components/Expenses/ExpensesPage.js","components/MonthDashboardPage/StartNextMonthButton.js","components/MonthDashboardPage/CurrentMonth.js","components/sbadmin2/Gauge.js","components/MonthDashboardPage/Gauges.js","components/MonthDashboardPage/MonthProblems.js","components/MonthDashboardPage/MonthDashboardPage.js","components/Plans/PlanModal.js","components/Plans/CreatePlanButton.js","components/Plans/DeletePlanButton.js","components/Plans/UpdatePlanButton.js","components/Plans/PlansPage.js","components/sbadmin2/Topbar/TopbarContext.js","components/sbadmin2/Topbar/Topbar.js","components/sbadmin2/Topbar/TopbarMenu.js","components/sbadmin2/Topbar/TopbarUser.js","components/sbadmin2/Topbar/TopbarContextSwitcher.js","components/TopbarBudgetSwitcher.js","components/Topbar.js","components/Transfers/TransfersPage.js","components/App/sidebarConfig.js","components/App/App.js","serviceWorker.js","index.js","components/Beta.js"],"names":["DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","Auth0Provider","children","onRedirectCallback","returnTo","initOptions","useState","isAuthenticated","setIsAuthenticated","user","setUser","token","setToken","auth0Client","setAuth0","loading","setLoading","popupOpen","setPopupOpen","useEffect","a","async","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","appState","getUser","getTokenSilently","initAuth0","Provider","value","loginWithPopup","params","console","error","getIdTokenClaims","loginWithRedirect","getTokenWithPopup","logout","p","getTokenScopes","claimsString","split","claims","JSON","parse","atob","scope","fragmentMatcher","IntrospectionFragmentMatcher","introspectionQueryResultData","createClient","graphqlApiUrl","process","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","cache","InMemoryCache","errorLink","onError","graphQLErrors","networkError","REACT_APP_ENV","map","message","locations","path","log","link","concat","ApolloClient","ApolloLink","from","connectToDevTools","AuthApolloProvider","client","buttons","create","cancel","save","sidebar","sections","currentMonth","budget","pages","dashboard","expenses","transfers","plans","accounts","envelopes","topbar","budgetLabel","alertsLabel","messagesLabel","planned","incomes","leftToPlan","noProblems","problems","overplanned","underplanned","expensesExceedPlans","envelope","envelopeOverLimit","negativeAccountBalance","account","monthNotEnded","closeMonth","table","columns","balance","name","expensesTableTitle","inTransfersTableTitle","outTransfersTableTitle","modal","createTitle","editTitle","labels","limit","overLimit","categories","description","fromEnvelope","toEnvelope","currentAmount","amount","recurring","fromAccount","toAccount","date","totalAmount","category","months","Combobox","disabled","allowedValues","_ref","defaultID","defaultValue","className","required","ariaLabel","variant","prependLabel","valueByID","id","find","v","valueByLabel","useCallback","label","show","setShow","filter","setFilter","dropdownRef","useRef","filtered","toLowerCase","onInputChange","e","target","selected","current","handleClickOutside","event","contains","isClickedInside","addEventListener","removeEventListener","Dropdown","ref","onToggle","isOpen","classnames","Toggle","as","props","FormControl","type","onChange","aria-label","tabIndex","Menu","Item","eventKey","key","onClick","forwardRef","InputGroup","IconButton","icon","borderless","size","prefix","classes","preventDefault","OpenModalButton","Button","button","ModalContent","modalContent","onHide","Modal","SBAdmin2Context","SBAdmin2Provider","sidebarToggled","setSidebarToggled","toggleSidebar","useSBAdmin2","DictionaryContext","DictionaryProvider","dictionaries","locale","useDictionary","withDictionary","prop","Component","readPropName","string","readDict","charAt","toUpperCase","slice","newProps","dictionary","Page","Header","PageHeader","classNames","Panel","SplitButton","Title","PanelTitle","Body","addColumnNames","c","text","dataField","columnNames","bootstrap4","TablePanel","headerButtons","panelClassName","Wrapper","wrapper","wrapperProps","hiddenColumns","data","filters","wihtouHidden","headerClasses","length","hidden","some","hc","filteredData","row","every","f","filtersMatch","striped","hover","bordered","defaultProps","NotFoundPage","data-text","to","SidebarCollapsibleLink","parent","faIcon","isActive","routes","oneOfRoutsMatchesLocation","useLocation","active","iconClasses","data-toggle","data-target","aria-expanded","aria-controls","data-parent","Fragment","SidebarSimpleLink","exact","SidebarGroup","group","entries","entry","undefined","Sidebar","renderBrandName","renderBrandIcon","config","toggled","idx","SBAdmin2","sidebarProps","copyright","Topbar","component","inline","Form","Group","Row","Label","column","Input","formData","feedback","wrap","Col","sm","child","Control","default","Feedback","Variant","secondary","primary","danger","success","warning","white","Size","lg","CancelButton","faTrash","SaveButton","faSave","FormInModal","onSave","validated","setValidated","form","handleSave","stopPropagation","isValid","checkValidity","changed","input","firstInput","getElementsByTagName","focus","onSubmit","closeButton","Footer","CreateButton","faPlus","removeFromListByID","list","elementId","findIndex","MONTHLY_REPORT_FRAGMENT","gql","GET_MONTHLY_REPORT","GET_ENVELOPES","CREATE_ENVELOPE","UPDATE_ENVELOPE","useGetEnvelopes","selectedBudget","useBudget","useQuery","variables","budgetID","PLAN_FRAGMENT","GET_CURRENT_PLANS","CREATE_PLAN","UPDATE_PLAN","DELETE_PLAN","TRANSFER_FRAGMENT","GET_CURRENT_TRANSFERS","CREATE_TRANSFER","UPDATE_TRANSFER","DELETE_TRANSFER","BudgetContext","GET_BUDGETS","storageKey","BudgetProvider","setSelectedBudget","sessionStorage","setItem","budgets","lastChosenID","getItem","lastChosen","b","CLOSE_CURRENT_MONTH","GET_ACCOUNTS","useGetAccounts","CREATE_ACCOUNT","UPDATE_ACCOUNT","EXPENSE_FRAGMENT","GET_CURRENT_EXPENSES","GET_EXPENSES","CREATE_EXPENSE","UPDATE_EXPENSE","DELETE_EXPENSE","Amount","number","math","replace","Math","round","kSeparator","fixed","toFixed","parts","join","Day","year","month","day","this","String","padStart","Date","getYear","getMonth","getDate","monthNames","Month","Number","Spinner","role","ErrorMessageList","errorMessage","subErrors","ErrorMessage","result","errors","WithQuery","query","showError","InlineFormControl","createFormData","model","rerender","getRoot","Object","prototype","hasOwnProperty","call","$model","$init","_originalPush","push","removeAt","splice","arrayFormData","$process","$default","_default","init","simpleFormData","$includeAllValues","keys","reduce","acc","k","compositeFormData","useFormData","setValue","GET_CATEGORIES","CREATE_CATEGORY","UPDATE_CATEGORY","useGetCategories","AmountInput","placeholder","setIsValid","newValue","CategoriesInput","categoryFormData","categoryID","faMinus","ExpenseModal","accountsQuery","accountID","format","first","firstDay","last","lastDay","accountsData","min","max","CreateExpenseButton","useMutation","update","createExpense","readQuery","writeQuery","refetchQueries","mutation","rest","useCreateExpense","MonthContext","useMonth","MonthProvider","selectedMonth","setSelectedMonth","RefreshButton","faSyncAlt","QueryTablePanel","getData","refetch","DeleteExpenseButton","expense","deleteExpense","useDeleteExpense","UpdateExpenseButton","useUpdateExpense","updateExpense","faEdit","sort","formatter","align","headerAlign","isDummyColumn","cell","style","whiteSpace","width","rowClasses","rowIndex","expandRow","renderer","defaultSorted","order","ExpensesTablePanel","readTitle","createButton","accountFilter","useGetExpenses","d","monthlyReport","keyField","readColumnNames","TransferModal","fromAccountID","toAccountID","step","CreateTransferButton","createTransfer","useCreateTransfer","UpdateTransferButton","transfer","useUpdateTransfer","updateTransfer","DeleteTransferButton","deleteTransfer","useDeleteTranfer","TransfersTablePanel","toAccountFilter","fromAccountFilter","useGetCurrentTransfers","AccountModal","CreateAccountButton","createAccount","useCreateAccount","UpdateAccountButton","useUpdateAccount","updateAccount","cursor","AccountsTablePanel","onSelectAcount","selectRow","mode","clickToSelect","hideSelectColumn","onSelect","CollapsibleContext","CollapsiblePanel","initialyShown","toggle","s","AccountsPage","selectedAccount","setSelectedAccount","OptionalFormControl","initEnabled","enabled","setEnabled","toggleEnabled","Check","custom","checked","autoFocus","faChevronUp","faChevronDown","Collapse","in","PropTypes","Account","shape","isRequired","Envelope","totalBalance","EnvelopeModal","CreateEnvelopeButton","onClickRef","createEnvelope","useCreateEnvelope","UpdateEnvelopeButton","useUpdateEnvelope","updateEnvelope","faArchive","EnvelopesListPanel","CategoryModal","envelopeID","CreateCategoryButton","createCategory","useCreateCategory","UpdateCategoryButton","useUpdateCategory","CategoriesListPanel","keyMap","handlers","createEnvelopeFunRef","createCategoryFunRef","EnvelopesPage","createFunRef","ContextSwitcher","displayBg","labelBg","showLabel","labelClasses","Prepend","Text","append","ButtonGroup","GET_AVAILABLE_REPORTS","MonthSwitcher","availableReports","reverse","m","parsed","ExpensesPage","StartNextMonthButton","warn","useCloseCurrentMonth","closeCurrentMonth","faClipboardCheck","CurrentMonth","severity","Gauge","Gauges","totalPlannedAmount","totalIncomeAmount","totalExpenseAmount","severityVariant","ERROR","WARNING","INFO","severityIcon","MonthProblems","problem","Problem","NoProblems","ProblemMessage","envelopesQuery","envelopesData","__typename","MonthDashboardPage","fetchPolicy","useGetMonthlyReport","PlanModal","recurringAmount","fd","fromEnvelopeID","toEnvelopeID","CreatePlanButton","createPlan","useCreatePlan","DeletePlanButton","plan","deletePlan","useDeletePlan","UpdatePlanButton","useUpdatePlan","updatePlan","sortValue","PlansPage","useGetCurrentPlans","TopbarContextExpanded","renderContext","TopbarContextMinimized","aria-haspopup","aria-labelledby","TopbarContext","minified","renderMenus","renderUser","faIconContextMinified","TopbarMenuCounter","counter","badge","TopbarMenu","TopbarUser","alt","src","picture","TopbarContextSwitcher","TopbarBudgetSwitcher","pictureUrl","TransfersPage","sidebarConfig","pl","Boolean","hostname","match","targetUrl","redirectURI","origin","AuthorizationProvider","REACT_APP_INSECURE_AUTH_DISABLED","domain","client_id","clientId","redirect_uri","audience","Promise","resolve","ReactDOM","render","setScope","then","basename","Consumer","Envelopes","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.679c8572.chunk.js","sourcesContent":["import createAuth0Client from '@auth0/auth0-spa-js';\nimport PropTypes from 'prop-types';\nimport React, { useContext, useEffect, useState } from 'react';\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n  window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext();\nexport const useAuth0 = () => useContext(Auth0Context);\nexport const Auth0Provider = ({\n  children,\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n  returnTo,\n  ...initOptions\n}) => {\n  const [isAuthenticated, setIsAuthenticated] = useState();\n  const [user, setUser] = useState();\n  const [token, setToken] = useState();\n  const [auth0Client, setAuth0] = useState();\n  const [loading, setLoading] = useState(true);\n  const [popupOpen, setPopupOpen] = useState(false);\n\n  useEffect(() => {\n    const initAuth0 = async () => {\n      const auth0FromHook = await createAuth0Client(initOptions);\n      setAuth0(auth0FromHook);\n\n      if (window.location.search.includes('code=')) {\n        const { appState } = await auth0FromHook.handleRedirectCallback();\n        onRedirectCallback(appState);\n      }\n\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\n\n      setIsAuthenticated(isAuthenticated);\n\n      if (isAuthenticated) {\n        const user = await auth0FromHook.getUser();\n        setUser(user);\n\n        const token = await auth0FromHook.getTokenSilently();\n        setToken(token);\n      }\n\n      setLoading(false);\n    };\n    initAuth0();\n    // eslint-disable-next-line\n  }, []);\n\n  const loginWithPopup = async (params = {}) => {\n    setPopupOpen(true);\n    try {\n      await auth0Client.loginWithPopup(params);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setPopupOpen(false);\n    }\n    const user = await auth0Client.getUser();\n    setUser(user);\n    setIsAuthenticated(true);\n  };\n\n  const handleRedirectCallback = async () => {\n    setLoading(true);\n    await auth0Client.handleRedirectCallback();\n    const user = await auth0Client.getUser();\n    setLoading(false);\n    setIsAuthenticated(true);\n    setUser(user);\n  };\n  return (\n    <Auth0Context.Provider\n      value={{\n        token,\n        isAuthenticated,\n        user,\n        loading,\n        popupOpen,\n        loginWithPopup,\n        handleRedirectCallback,\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\n        logout: (...p) => auth0Client.logout({ ...p, returnTo }),\n        getTokenScopes: async (...p) => {\n          const token = await auth0Client.getTokenSilently(...p);\n          const claimsString = token.split('.')[1];\n          const claims = JSON.parse(atob(claimsString));\n          const scope = claims.scope.split(' ');\n          return scope;\n        },\n      }}\n    >\n      {children}\n    </Auth0Context.Provider>\n  );\n};\n\nAuth0Provider.propTypes = {\n  children: PropTypes.node,\n  onRedirectCallback: PropTypes.func,\n  returnTo: PropTypes.string.isRequired,\n};\n","import { ApolloProvider } from '@apollo/react-hooks';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { IntrospectionFragmentMatcher } from 'apollo-cache-inmemory';\nimport ApolloClient from 'apollo-client';\nimport { ApolloLink } from 'apollo-link';\nimport { setContext } from 'apollo-link-context';\nimport { onError } from 'apollo-link-error';\nimport { createHttpLink } from 'apollo-link-http';\nimport { getMainDefinition } from 'apollo-utilities';\nimport PropTypes from 'prop-types';\nimport React, { useEffect } from 'react';\n\nimport introspectionQueryResultData from './fragmentTypes.json';\nimport { useAuth0 } from './react-auth0-spa.js';\n\nconst fragmentMatcher = new IntrospectionFragmentMatcher({\n  introspectionQueryResultData,\n});\n\nexport function isSubscriptionOperation({ query }) {\n  const definition = getMainDefinition(query);\n  return (\n    definition.kind === 'OperationDefinition' &&\n    definition.operation === 'subscription'\n  );\n}\n\nexport function createClient(token) {\n  const graphqlApiUrl = process.env.REACT_APP_GQL_URL;\n  // const graphqlApiUrl = 'http://localhost:8080/query';\n  const httpLink = createHttpLink({ uri: graphqlApiUrl });\n  const authLink = setContext((_, { headers }) => {\n    // get the authentication token from local storage if it exists\n    // return the headers to the context so httpLink can read them\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    };\n  });\n  const cache = new InMemoryCache({ fragmentMatcher });\n\n  const errorLink = onError(({ graphQLErrors, networkError }) => {\n    if (process.env.REACT_APP_ENV !== 'production') {\n      if (graphQLErrors) {\n        graphQLErrors.map(({ message, locations, path }) =>\n          console.log(\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n          )\n        );\n      }\n\n      if (networkError) console.log(`[Network error]: ${networkError}`);\n    }\n  });\n\n  // const link = split(isSubscriptionOperation, wsLink, httpLink);\n  const link = authLink.concat(httpLink);\n\n  return new ApolloClient({\n    uri: graphqlApiUrl,\n    cache,\n    link: ApolloLink.from([errorLink, link]),\n    connectToDevTools: true,\n  });\n}\n\nexport function AuthApolloProvider({ children }) {\n  const { isAuthenticated, loading, loginWithRedirect, token } = useAuth0();\n\n  useEffect(() => {\n    if (loading) {\n      return;\n    }\n    if (!isAuthenticated) {\n      loginWithRedirect({});\n      return;\n    }\n  }, [isAuthenticated, loginWithRedirect, loading]);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!isAuthenticated || !token) {\n    return <div />;\n  }\n\n  return (\n    <ApolloProvider client={createClient(token)}>{children}</ApolloProvider>\n  );\n}\n\nAuthApolloProvider.propTypes = {\n  children: PropTypes.node,\n};\n","export default {\n  buttons: {\n    create: 'Dodaj',\n    cancel: 'Anuluj',\n    save: 'Zapisz',\n  },\n  sidebar: {\n    sections: {\n      currentMonth: 'Bieżący miesiąc',\n      budget: 'Budżet',\n    },\n    pages: {\n      dashboard: 'Podsumowanie',\n      expenses: 'Wydatki',\n      transfers: 'Przelewy',\n      plans: 'Plany',\n      accounts: 'Konta',\n      envelopes: 'Koperty',\n    },\n  },\n  topbar: {\n    budgetLabel: 'Budżet',\n    alertsLabel: 'Powiadomienia',\n    messagesLabel: 'Wiadomości',\n  },\n  dashboard: {\n    planned: 'Zaplanowano',\n    incomes: 'Wpływy',\n    leftToPlan: 'Pozostało do zaplanowania',\n    expenses: 'Wydatki',\n    currentMonth: 'Bieżący miesiąc',\n    noProblems: 'Wszystko w porządku',\n    problems: {\n      title: 'Problemy',\n      overplanned: 'Plany na bieżący miesiąc przekraczają wpływy',\n      underplanned: 'Część środków jest nierozplanowana',\n      expensesExceedPlans: envelope =>\n        `Wydatki przekroczyły zaplanowany budżet na kopercie \"${envelope}\"`,\n      envelopeOverLimit: envelope =>\n        `Limit dla koperty \"${envelope}\" został przekroczony`,\n      negativeAccountBalance: account =>\n        `Bilans na koncie \"${account}\" jest ujemny`,\n      monthNotEnded: 'Miesiąc się jeszcze nie skończył',\n    },\n    buttons: {\n      closeMonth: 'Zamknij miesiąc',\n    },\n  },\n  accounts: {\n    table: {\n      title: 'Konta',\n      columns: {\n        balance: 'Bilans',\n        name: 'Nazwa',\n      },\n    },\n    expensesTableTitle: 'Wydatki',\n    inTransfersTableTitle: 'Przelewy przychodzące',\n    outTransfersTableTitle: 'Przelewy wychodzące',\n    modal: {\n      createTitle: 'Dodaj nowe konto',\n      editTitle: 'Edytuj konto',\n      labels: {\n        name: 'Nazwa',\n      },\n    },\n  },\n  envelopes: {\n    table: {\n      title: 'Koperty',\n      columns: {\n        balance: 'Bilans',\n        name: 'Nazwa',\n        limit: 'Limit',\n        overLimit: 'Ponad limit',\n      },\n    },\n    modal: {\n      createTitle: 'Dodaj nową kopertę',\n      editTitle: 'Edytuj kopertę',\n      labels: {\n        name: 'Nazwa',\n        limit: 'Limit',\n      },\n    },\n  },\n  categories: {\n    table: {\n      title: 'Kategorie',\n      columns: {\n        name: 'Nazwa',\n        envelope: 'Koperta',\n        description: 'Opis',\n      },\n    },\n    modal: {\n      createTitle: 'Dodaj nową kategorię',\n      editTitle: 'Edytuj kategorię',\n      labels: {\n        name: 'Nazwa',\n        envelope: 'Koperta',\n        description: 'Opis',\n      },\n    },\n  },\n  plans: {\n    table: {\n      title: 'Plany',\n      columns: {\n        title: 'Tytuł',\n        fromEnvelope: 'Z',\n        toEnvelope: 'Do',\n        currentAmount: 'Kwota',\n      },\n    },\n    modal: {\n      createTitle: 'Dodaj nowy plan',\n      editTitle: 'Edytuj plan',\n      labels: {\n        title: 'Tytuł',\n        fromEnvelope: 'Z',\n        toEnvelope: 'Do',\n        amount: 'Kwota',\n        recurring: 'Cyklicznie',\n      },\n    },\n  },\n  transfers: {\n    table: {\n      title: 'Przelewy',\n      columns: {\n        title: 'Tytuł',\n        fromAccount: 'Z',\n        toAccount: 'Do',\n        amount: 'Kwota',\n        date: 'Data',\n      },\n    },\n    modal: {\n      createTitle: 'Dodaj nowy przelew',\n      editTitle: 'Edytuj przelew',\n      labels: {\n        title: 'Tytuł',\n        fromAccount: 'Z',\n        toAccount: 'Do',\n        amount: 'Kwota',\n        date: 'Data',\n      },\n    },\n  },\n  expenses: {\n    table: {\n      title: 'Wydatki',\n      columns: {\n        title: 'Tytuł',\n        totalAmount: 'Kwota',\n        date: 'Data',\n        account: 'Konto',\n      },\n    },\n    modal: {\n      createTitle: 'Dodaj nowy wydatek',\n      editTitle: 'Edytuj wydatek',\n      labels: {\n        title: 'Tytuł',\n        fromAccount: 'Z',\n        toAccount: 'Do',\n        account: 'Konto',\n        date: 'Data',\n        categories: 'Kategorie',\n        amount: 'Kwota',\n        category: 'Kategoria',\n      },\n    },\n  },\n  months: [\n    'Styczeń',\n    'Luty',\n    'Marzec',\n    'Kwiecień',\n    'Maj',\n    'Czerwiec',\n    'Lipiec',\n    'Sierpień',\n    'Wrzesień',\n    'Październik',\n    'Listopad',\n    'Grudzień',\n  ],\n};\n","import './Combobox.css';\n\nimport classnames from 'classnames';\nimport React, {\n  ButtonHTMLAttributes,\n  ChangeEvent,\n  ReactNode,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { Button, Dropdown, FormControl, InputGroup } from 'react-bootstrap';\n\nimport { Variant } from '../../bootstrap.typed';\n\ninterface Props {\n  disabled?: boolean;\n  allowedValues: { id: string; label: string }[];\n  _ref?: { current: any };\n  defaultValue?: string;\n  className?: string;\n  required?: boolean;\n  'aria-label': string;\n  variant?: Variant;\n  prependLabel?: string;\n}\n\nexport default function Combobox({\n  disabled,\n  allowedValues,\n  _ref,\n  defaultValue: defaultID,\n  className,\n  required,\n  'aria-label': ariaLabel,\n  variant = 'secondary',\n  prependLabel,\n}: Props) {\n  function valueByID(id: string) {\n    return allowedValues.find(v => v.id === id);\n  }\n\n  const valueByLabel = useCallback(\n    label => allowedValues.find(v => v.label === label),\n    [allowedValues]\n  );\n\n  const [show, setShow] = useState(false);\n\n  const defaultValue = defaultID ? valueByID(defaultID) : { label: '' };\n  const [filter, setFilter] = useState(defaultValue ? defaultValue.label : '');\n\n  const dropdownRef = useRef<HTMLDivElement>();\n\n  const filtered = filter\n    ? allowedValues.filter(v =>\n        v.label.toLowerCase().includes(filter.toLowerCase())\n      )\n    : allowedValues;\n\n  useEffect(() => {\n    if (_ref) {\n      _ref.current = { value: defaultID };\n    }\n  }, [_ref, defaultID]);\n\n  useEffect(() => {\n    function isClickedInside(event: MouseEvent) {\n      return (\n        !dropdownRef.current ||\n        dropdownRef.current!.contains(event.target as Node)\n      );\n    }\n\n    function handleClickOutside(event: MouseEvent) {\n      if (isClickedInside(event)) {\n        return;\n      }\n      setShow(false);\n      if (!valueByLabel(filter)) {\n        setFilter('');\n      }\n    }\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, [filter, valueByLabel]);\n\n  function onInputChange(e: ChangeEvent<HTMLInputElement>) {\n    const label = e.target.value;\n    setFilter(label);\n    const selected = valueByLabel(label);\n    if (selected && _ref) {\n      _ref.current = { value: selected.id };\n    } else {\n      setShow(true);\n    }\n  }\n\n  function onClick(id: string) {\n    const selected = valueByID(id);\n    if (selected) {\n      setFilter(selected.label);\n    }\n    if (_ref) {\n      _ref.current = { value: id };\n    }\n  }\n\n  return (\n    <Dropdown\n      // @ts-ignore\n      ref={dropdownRef}\n      show={show}\n      onToggle={isOpen => {\n        setShow(isOpen);\n      }}\n      className={classnames('combobox', className)}\n    >\n      <Dropdown.Toggle\n        // @ts-ignore\n        as={Toggle}\n      >\n        {({ className, ...props }: ButtonHTMLAttributes<HTMLButtonElement>) => (\n          <>\n            <FormControl\n              value={filter}\n              type='text'\n              onChange={onInputChange}\n              disabled={disabled}\n              required={required}\n              aria-label={ariaLabel}\n            />\n            <Button\n              variant={variant}\n              className={classnames(\n                'dropdown-toggle-split',\n                'no-arrow',\n                className\n              )}\n              tabIndex={-1}\n              disabled={disabled}\n              type='button'\n              {...props}\n            />\n          </>\n        )}\n      </Dropdown.Toggle>\n      <Dropdown.Menu>\n        {filtered.map(v => (\n          <Dropdown.Item\n            eventKey={v.id}\n            key={v.id}\n            onClick={() => onClick(v.id)}\n          >\n            {v.label}\n          </Dropdown.Item>\n        ))}\n      </Dropdown.Menu>\n    </Dropdown>\n  );\n}\n\ninterface ToggleProps {\n  children(props: object): ReactNode;\n}\n\nconst Toggle = forwardRef(({ children, ...props }: ToggleProps, ref) => {\n  return (\n    <InputGroup\n      // @ts-ignore\n      ref={ref}\n    >\n      {children(props)}\n    </InputGroup>\n  );\n});\n","import { IconProp } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport classnames from 'classnames';\nimport React, { MouseEvent } from 'react';\n\nimport { Size, Variant } from '../../bootstrap.typed';\n\ninterface Props {\n  icon: IconProp;\n  variant: Variant;\n  onClick(event: MouseEvent<HTMLButtonElement>): void;\n  className?: string;\n  borderless?: boolean;\n  size?: Size;\n}\n\nexport default function IconButton({\n  icon,\n  variant,\n  className,\n  onClick,\n  borderless,\n  size,\n  ...props\n}: Props) {\n  const prefix = borderless ? 'text' : 'btn';\n  const classes = classnames('btn', className, {\n    [`${prefix}-${variant}`]: variant,\n    [`${prefix}-${size}`]: size,\n    'bg-transparent': borderless,\n    'border-0': borderless,\n    'p-0': borderless,\n    'mx-1': borderless,\n  });\n\n  function handleOnClick(e: MouseEvent<HTMLButtonElement>) {\n    e.preventDefault();\n    onClick && onClick(e);\n  }\n\n  return (\n    <button className={classes} onClick={handleOnClick} {...props}>\n      <FontAwesomeIcon icon={icon} />\n    </button>\n  );\n}\n","import React, { ComponentType, MouseEvent, useState } from 'react';\nimport { Modal } from 'react-bootstrap';\n\ninterface ButtonProps {\n  onClick(event: MouseEvent<HTMLButtonElement>): void;\n}\n\ninterface ModalContentProps {\n  onHide(): void;\n}\n\ninterface Props {\n  button: ComponentType<ButtonProps>;\n  modalContent: ComponentType<ModalContentProps>;\n}\n\nexport default function OpenModalButton({\n  button: Button,\n  modalContent: ModalContent,\n  ...props\n}: Props) {\n  const [show, setShow] = useState<boolean>(false);\n  const onHide = () => setShow(false);\n  const onClick = () => setShow(true);\n\n  return (\n    <span>\n      <Button onClick={onClick} />\n      <Modal show={show} onHide={onHide} {...props}>\n        <ModalContent onHide={onHide} />\n      </Modal>\n    </span>\n  );\n}\n","import PropTypes from 'prop-types';\nimport React, { useContext, useState } from 'react';\n\nconst SBAdmin2Context = React.createContext();\n\nexport function SBAdmin2Provider({ user, logout, children }) {\n  const [sidebarToggled, setSidebarToggled] = useState(false);\n  return (\n    <SBAdmin2Context.Provider\n      value={{\n        sidebarToggled,\n        user,\n        logout,\n        toggleSidebar: () => setSidebarToggled(current => !current),\n      }}\n    >\n      {children}\n    </SBAdmin2Context.Provider>\n  );\n}\n\nSBAdmin2Provider.propTypes = {\n  children: PropTypes.node,\n  logout: PropTypes.func.isRequired,\n  user: PropTypes.shape({\n    picture: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport const useSBAdmin2 = () => useContext(SBAdmin2Context);\n","import React, { createContext, useContext } from 'react';\nimport { useSBAdmin2 } from './context';\nimport PropTypes from 'prop-types';\nimport { capitalize } from '../../util/capitalize';\n\nexport const DictionaryContext = createContext();\n\nexport function DictionaryProvider({ dictionaries, children }) {\n  const { user } = useSBAdmin2();\n  return (\n    <DictionaryContext.Provider value={dictionaries[user.locale]}>\n      {children}\n    </DictionaryContext.Provider>\n  );\n}\n\nDictionaryProvider.propTypes = {\n  dictionaries: PropTypes.object,\n  children: PropTypes.node,\n};\n\nexport const useDictionary = () => useContext(DictionaryContext);\n\nexport function withDictionary(prop, Component, readPropName) {\n  return props => {\n    readPropName = readPropName || `read${capitalize(prop)}`;\n    const readDict = props[readPropName];\n    const newProps = { ...props };\n    delete newProps[readPropName];\n    const dictionary = useDictionary();\n    if (readDict) {\n      newProps[prop] = readDict(dictionary);\n    }\n    return <Component {...newProps} />;\n  };\n}\n","export function capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { withDictionary } from '../../language';\n\nfunction PageHeader({ children, title }) {\n  return (\n    <h1 className='h3 mb-4 text-gray-800 d-flex justify-content-between'>\n      {title}\n      {children && <div>{children}</div>}\n    </h1>\n  );\n}\n\nPageHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default withDictionary('title', PageHeader);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PageHeader from './PageHeader';\n\nexport default function Page({ children }) {\n  return <div className=\"container-fluid\">{children}</div>;\n}\n\nPage.propTypes = {\n  children: PropTypes.node,\n};\n\nPage.Header = PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { withDictionary } from '../../language';\n\nfunction PanelTitle({ children, title, className }) {\n  const classNames = classnames(\n    'm-0',\n    'font-weight-bold',\n    'text-primary',\n    className\n  );\n  return (\n    <h6 className={classNames}>\n      {children}\n      {title}\n    </h6>\n  );\n}\n\nPanelTitle.propTypes = {\n  title: PropTypes.node.isRequired,\n  className: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default withDictionary('title', PanelTitle);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport PanelTitle from './PanelTitle';\nimport PanelHeader from './PanelHeader';\nimport PanelBody from './PanelBody';\n\nexport default function Panel({ children, className }) {\n  return (\n    <div className={classnames('card', 'shadow', 'mb-4', className)}>\n      {children}\n    </div>\n  );\n}\n\nPanel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n};\n\nPanel.Title = PanelTitle;\nPanel.Header = PanelHeader;\nPanel.Body = PanelBody;\n","import { IconProp } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport classnames from 'classnames';\nimport React, { ButtonHTMLAttributes } from 'react';\n\nimport { Size, Variant } from '../../bootstrap.typed';\n\ninterface Props {\n  icon: IconProp;\n  variant: Variant;\n  size?: Size;\n  className?: string;\n  disabled?: boolean;\n  _ref?: { current: any };\n  children?: string;\n}\n\nexport default function SplitButton({\n  icon,\n  variant,\n  size,\n  className,\n  disabled,\n  _ref,\n  children,\n  ...props\n}: Props & ButtonHTMLAttributes<HTMLButtonElement>) {\n  const classNames = classnames('btn', 'btn-icon-split', className, {\n    disabled,\n    [`btn-${size}`]: size,\n    [`btn-${variant}`]: variant,\n  });\n\n  return (\n    <button\n      className={classNames}\n      disabled={disabled}\n      ref={_ref}\n      aria-label={children}\n      {...props}\n    >\n      <span className='icon text-white-50'>\n        <FontAwesomeIcon icon={icon} />\n      </span>\n      <span className='text'>{children}</span>\n    </button>\n  );\n}\n","import React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport default function PanelHeader({ className, ...props }) {\n  return <div className={classnames(className, 'card-header')} {...props} />;\n}\n\nPanelHeader.propTypes = {\n  className: PropTypes.string,\n};\n","import React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport default function PanelBody({ className, children }) {\n  return <div className={classnames(className, 'card-body')}>{children}</div>;\n}\n\nPanelBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n};\n","import React from 'react';\nimport BootstrapTable, {\n  BootstrapTableProps,\n  Column,\n} from 'react-bootstrap-table-next';\n\nimport { withDictionary } from '../../language';\n\ninterface Dictionary {\n  [key: string]: string;\n}\n\ninterface Props<fieldIds extends string = string>\n  extends BootstrapTableProps<fieldIds> {\n  columnNames: Dictionary;\n}\n\nfunction Table({ columns, columnNames, ...props }: Props) {\n  return (\n    <BootstrapTable\n      bootstrap4\n      columns={addColumnNames(columns, columnNames)}\n      {...props}\n    />\n  );\n}\n\nfunction addColumnNames<fieldIds extends string = string>(\n  columns: Column<fieldIds>[],\n  dictionary: Dictionary\n) {\n  return columns.map(c => ({ ...c, text: dictionary[c.dataField] || '' }));\n}\n\nexport default withDictionary('columnNames', Table);\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { withDictionary } from '../../language';\nimport Panel from '../Panel/Panel';\nimport Table from '../Table/Table';\n\nfunction TablePanel({\n  title,\n  columns,\n  headerButtons,\n  panelClassName,\n  wrapper: Wrapper,\n  wrapperProps,\n  hiddenColumns,\n  data,\n  filters,\n  ...props\n}) {\n  const paddedFirstColumn = {\n    ...columns[0],\n    classes: 'pl-3',\n    headerClasses: 'pl-3',\n  };\n  const modifiedColumns = [\n    paddedFirstColumn,\n    ...columns.slice(1, columns.length),\n  ];\n  const wihtouHidden = modifiedColumns.map(c => ({\n    ...c,\n    hidden: hiddenColumns && hiddenColumns.some(hc => c.dataField === hc),\n  }));\n\n  function filtersMatch(row) {\n    return filters.every(f => f(row));\n  }\n\n  const filteredData = data.filter(row => filtersMatch(row));\n\n  return (\n    <Wrapper className={panelClassName} {...wrapperProps}>\n      <Wrapper.Header className='p-2 pl-3'>\n        <div className='d-flex justify-content-between align-items-center'>\n          <Wrapper.Title title={title} className='table-panel--title' />\n          <div>{headerButtons}</div>\n        </div>\n      </Wrapper.Header>\n\n      <Wrapper.Body className='p-0'>\n        <Table\n          classes='table-layout-auto table-sm m-0'\n          striped\n          hover\n          bordered={false}\n          columns={wihtouHidden}\n          data={filteredData}\n          {...props}\n        />\n      </Wrapper.Body>\n    </Wrapper>\n  );\n}\n\nTablePanel.propTypes = {\n  wrapper: PropTypes.elementType,\n  wrapperProps: PropTypes.object,\n  title: PropTypes.string.isRequired,\n  headerButtons: PropTypes.node,\n  columns: PropTypes.array.isRequired,\n  panelClassName: PropTypes.string,\n  hiddenColumns: PropTypes.arrayOf(PropTypes.string),\n  filters: PropTypes.arrayOf(PropTypes.func),\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nTablePanel.defaultProps = {\n  wrapper: Panel,\n  wrapperProps: {},\n  hiddenColumns: [],\n  filters: [],\n};\n\nexport default withDictionary('title', TablePanel);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Page from './components/Page/Page';\n\nexport function NotFoundPage() {\n  return (\n    <Page>\n      <div className=\"text-center\">\n        <div className=\"error mx-auto\" data-text=\"404\">\n          404\n        </div>\n        <p className=\"lead text-gray-800 mb-5\">Page Not Found</p>\n        <p className=\"text-gray-500 mb-0\">\n          It looks like you found a glitch in the matrix...\n        </p>\n        <Link to=\"/\">&larr; Back to Dashboard</Link>\n      </div>\n    </Page>\n  );\n}\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useLocation } from 'react-router';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nfunction oneOfRoutsMatchesLocation(sections, location) {\n  return sections.some(({ routes }) =>\n    routes.some(({ to }) => location.pathname === to)\n  );\n}\n\nexport default function SidebarCollapsibleLink({\n  name,\n  parent,\n  sections,\n  faIcon,\n}) {\n  const location = useLocation();\n  const isActive = oneOfRoutsMatchesLocation(sections, location);\n  const classNames = classnames('nav-item', { active: isActive });\n  const id = 'sidebar--' + name;\n  const iconClasses = classnames('fas', 'fa-fw', `fa-${faIcon}`);\n  return (\n    <li className={classNames}>\n      <span\n        className=\"nav-link collapsed\"\n        data-toggle=\"collapse\"\n        data-target={'#' + id}\n        aria-expanded=\"true\"\n        aria-controls={id}\n      >\n        <i className={iconClasses}></i>\n        <span>{name}</span>\n      </span>\n      <div id={id} className=\"collapse\" data-parent={'#' + parent}>\n        <div className=\"bg-white py-2 collapse-inner rounded\">\n          {sections.map(({ name, routes }) => {\n            return (\n              <React.Fragment key={name}>\n                <h6 className=\"collapse-header\">{name}:</h6>\n                {routes.map(({ to, label }) => {\n                  return (\n                    <NavLink key={label} className=\"collapse-item\" to={to}>\n                      {label}\n                    </NavLink>\n                  );\n                })}\n              </React.Fragment>\n            );\n          })}\n        </div>\n      </div>\n    </li>\n  );\n}\n\nSidebarCollapsibleLink.propTypes = {\n  faIcon: PropTypes.string,\n  name: PropTypes.string,\n  parent: PropTypes.string,\n  sections: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      routes: PropTypes.arrayOf(\n        PropTypes.shape({\n          label: PropTypes.string,\n          to: PropTypes.string,\n        })\n      ).isRequired,\n    })\n  ),\n};\n","import React from 'react';\nimport classnames from 'classnames';\nimport { NavLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport default function SidebarSimpleLink({ name, to, faIcon }) {\n  const iconClasses = classnames('fas', 'fa-fw', `fa-${faIcon}`);\n  return (\n    <li className=\"nav-item\">\n      <NavLink className=\"nav-link\" exact to={to}>\n        <i className={iconClasses} />\n        <span>{name}</span>\n      </NavLink>\n    </li>\n  );\n}\n\nSidebarSimpleLink.propTypes = {\n  faIcon: PropTypes.string,\n  name: PropTypes.string,\n  to: PropTypes.string,\n};\n","import React from 'react';\nimport SidebarCollapsibleLink from './SidebarCollapsibleLink';\nimport SidebarSimpleLink from './SidebarSimpleLink';\nimport PropTypes from 'prop-types';\n\nexport function SidebarGroup({ group }) {\n  return (\n    <>\n      <hr className=\"sidebar-divider my-1\" />\n      {group.name && <div className=\"sidebar-heading\">{group.name}</div>}\n      {group.entries.map(entry =>\n        entry.to !== undefined ? (\n          <SidebarSimpleLink key={entry.name} {...entry} />\n        ) : (\n          <SidebarCollapsibleLink\n            key={entry.name}\n            parent=\"accordionSidebar\"\n            {...entry}\n          />\n        )\n      )}\n    </>\n  );\n}\n\nSidebarGroup.propTypes = {\n  group: PropTypes.shape({\n    name: PropTypes.string,\n    entries: PropTypes.arrayOf(\n      PropTypes.oneOfType([\n        PropTypes.shape(SidebarCollapsibleLink.propTypes),\n        PropTypes.shape(SidebarSimpleLink.propTypes),\n      ])\n    ).isRequired,\n  }),\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { SidebarGroup } from './SidebarGroup';\nimport { useSBAdmin2 } from '../context';\nimport './Sidebar.css';\n\nexport default function Sidebar({ renderBrandName, renderBrandIcon, config }) {\n  const { sidebarToggled, toggleSidebar } = useSBAdmin2();\n  const classNames = classnames(\n    'navbar-nav',\n    'bg-gradient-primary',\n    'sidebar',\n    'sidebar-dark',\n    'accordion',\n    { toggled: sidebarToggled }\n  );\n  return (\n    <ul className={classNames} id=\"accordionSidebar\">\n      <Link\n        className=\"sidebar-brand d-flex align-items-center justify-content-center\"\n        to=\"/\"\n      >\n        <div className=\"sidebar-brand-icon rotate-n-15\">\n          {renderBrandIcon()}\n        </div>\n        <div className=\"sidebar-brand-text mx-3\">{renderBrandName()}</div>\n      </Link>\n\n      {config.map((group, idx) => (\n        <SidebarGroup key={group.name || idx} group={group} />\n      ))}\n\n      <hr className=\"sidebar-divider d-none d-md-block\" />\n\n      <div className=\"text-center d-none d-md-inline\">\n        <button\n          className=\"rounded-circle border-0\"\n          id=\"sidebarToggle\"\n          onClick={toggleSidebar}\n        ></button>\n      </div>\n    </ul>\n  );\n}\n\nSidebar.propTypes = {\n  config: PropTypes.arrayOf(SidebarGroup.propTypes.group).isRequired,\n  renderBrandIcon: PropTypes.func.isRequired,\n  renderBrandName: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { SBAdmin2Provider } from './context';\nimport PropTypes from 'prop-types';\nimport { Switch, Route } from 'react-router-dom';\nimport { NotFoundPage } from './NotFoundPage';\nimport Sidebar from './Sidebar/Sidebar';\nimport { DictionaryProvider } from './language';\n\nexport function SBAdmin2({\n  sidebarProps,\n  topbar,\n  user,\n  logout,\n  children,\n  dictionaries,\n  copyright,\n}) {\n  const Topbar = topbar;\n  return (\n    <SBAdmin2Provider user={user} logout={logout}>\n      <DictionaryProvider dictionaries={dictionaries}>\n        <div id=\"wrapper\">\n          <Sidebar {...sidebarProps} />\n          <div id=\"content-wrapper\" className=\"d-flex flex-column\">\n            <div id=\"content\">\n              <Topbar />\n              <Switch>\n                {children}\n                <Route component={NotFoundPage} />\n              </Switch>\n            </div>\n          </div>\n        </div>\n        <footer className=\"sticky-footer bg-white\">\n          <div className=\"container my-auto\">\n            <div className=\"copyright text-center my-auto\">\n              <span>Copyright &copy; {copyright}</span>\n            </div>\n          </div>\n        </footer>\n      </DictionaryProvider>\n    </SBAdmin2Provider>\n  );\n}\n\nSBAdmin2.propTypes = {\n  children: PropTypes.any,\n  copyright: PropTypes.string,\n  sidebarProps: PropTypes.shape(Sidebar.propTypes).isRequired,\n  topbar: PropTypes.elementType.isRequired,\n  user: PropTypes.shape({\n    locale: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    picture: PropTypes.string.isRequired,\n  }).isRequired,\n  logout: PropTypes.func.isRequired,\n  dictionaries: PropTypes.object,\n};\n","import React from 'react';\nimport { Form, Row, Col } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport function FormControl({ label, inline, ...props }) {\n  return (\n    <Form.Group className=\"mb-3\" as={!!inline && Row}>\n      <Form.Label column={!!inline}>{label}</Form.Label>\n      <FormControl.Input inline={inline} {...props} />\n    </Form.Group>\n  );\n}\n\nFormControl.Input = ({ inline, formData, feedback, children, ...props }) => {\n  const wrap = inline ? c => <Col sm={inline}>{c}</Col> : c => c;\n  const child = children || (\n    <Form.Control ref={formData} defaultValue={formData.default()} {...props} />\n  );\n  return wrap(\n    <>\n      {child}\n      <Form.Control.Feedback type=\"invalid\">{feedback}</Form.Control.Feedback>\n    </>\n  );\n};\n\nFormControl.propTypes = {\n  formData: PropTypes.shape({ current: PropTypes.any, init: PropTypes.any }),\n  feedback: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  inline: PropTypes.number,\n};\n\nFormControl.defaultProps = {\n  inline: 0,\n};\n","export const Variant = {\n  secondary: 'secondary',\n  primary: 'primary',\n  danger: 'danger',\n  success: 'success',\n  warning: 'warning',\n  white: 'white',\n};\n\nexport const Size = {\n  sm: 'sm',\n  lg: 'lg',\n};\n","import { faTrash } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react';\n\nimport { SplitButton, useDictionary } from '../sbadmin2';\nimport { Size, Variant } from '../sbadmin2/bootstrap';\n\nexport default function CancelButton(props) {\n  const { buttons } = useDictionary();\n  return (\n    <SplitButton\n      variant={Variant.secondary}\n      icon={faTrash}\n      size={Size.sm}\n      type='button'\n      {...props}\n    >\n      {buttons.cancel}\n    </SplitButton>\n  );\n}\n","import { faSave } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react';\n\nimport { SplitButton, useDictionary } from '../sbadmin2';\nimport { Size, Variant } from '../sbadmin2/bootstrap';\n\nexport default function SaveButton(props) {\n  const { buttons } = useDictionary();\n\n  return (\n    <SplitButton\n      icon={faSave}\n      size={Size.sm}\n      variant={Variant.primary}\n      type='submit'\n      {...props}\n    >\n      {buttons.save}\n    </SplitButton>\n  );\n}\n","import PropTypes from 'prop-types';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Form, Modal } from 'react-bootstrap';\n\nimport CancelButton from '../../common/CancelButton';\nimport SaveButton from '../../common/SaveButton';\n\nexport function FormInModal({ title, onHide, onSave, formData, children }) {\n  const [validated, setValidated] = useState(false);\n  const form = useRef();\n\n  useEffect(() => {\n    if (form.current) {\n      const firstInput = form.current.getElementsByTagName('input')[0];\n      if (firstInput) {\n        firstInput.focus();\n      }\n    }\n  }, []);\n\n  function handleSave(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    const isValid = form.current.checkValidity();\n    setValidated(true);\n    if (!isValid) {\n      return;\n    }\n    if (formData.changed()) {\n      const input = formData.value();\n      onSave(input);\n    }\n    onHide();\n    setValidated(false);\n  }\n\n  return (\n    <Form validated={validated} ref={form} onSubmit={handleSave}>\n      <Modal.Header\n        closeButton\n        className='m-0 font-weight-bold text-primary bg-light'\n      >\n        <Modal.Title>{title}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>{children}</Modal.Body>\n      <Modal.Footer className=' bg-light'>\n        <CancelButton onClick={onHide} />\n        <SaveButton onClick={handleSave} />\n      </Modal.Footer>\n    </Form>\n  );\n}\n\nFormInModal.propTypes = {\n  children: PropTypes.node.isRequired,\n  onHide: PropTypes.func.isRequired,\n  onSave: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  formData: PropTypes.any.isRequired,\n};\n","import { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react';\n\nimport { IconButton } from '../sbadmin2';\nimport { Size, Variant } from '../sbadmin2/bootstrap';\n\nexport default function CreateButton(props) {\n  return (\n    <IconButton\n      icon={faPlus}\n      size={Size.sm}\n      variant={Variant.primary}\n      type='button'\n      {...props}\n    />\n  );\n}\n","export function addToList(list, element) {\n  return [...list, element]\n}\n\nexport function removeFromList(list, element) {\n  const idx = list.indexOf(element);\n  if (idx === -1) {\n    return list\n  }\n  return [...list.slice(0, idx), ...list.slice(idx+1, list.length)]\n}\n\nexport function removeFromListByID(list, elementId) {\n  const idx = list.findIndex(e => e.id === elementId);\n  if (idx === -1) {\n    return list\n  }\n  return [...list.slice(0, idx), ...list.slice(idx+1, list.length)]\n}\n\nexport function replaceOnList(list, idx, element) {\n  if (idx < 0 || idx > list.length) {\n    return list\n  }\n  return [...list.slice(0, idx), element, ...list.slice(idx+1, list.length)]\n}\n\nexport function replaceOnListByID(list, element) {\n  const idx = list.findIndex(e => e.id === element.id);\n\n  if (idx === -1) {\n    return list\n  }\n\n  return [...list.slice(0, idx), element, ...list.slice(idx+1, list.length)]\n}","import { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { useBudget } from './budget';\n\nconst MONTHLY_REPORT_FRAGMENT = gql`\n  fragment MonthlyReport on MonthlyReport {\n    month\n    totalPlannedAmount\n    totalIncomeAmount\n    totalExpenseAmount\n    problems {\n      severity\n      ... on EnvelopeOverLimit {\n        id\n      }\n      ... on NegativeBalanceOnAccount {\n        id\n      }\n      ... on NegativeBalanceOnEnvelope {\n        id\n      }\n      ... on Misplanned {\n        overplanned\n      }\n    }\n  }\n`;\n\nexport const GET_MONTHLY_REPORT = gql`\n  query GetMonthlyReport($budgetID: ID!, $month: Month!) {\n    monthlyReport(budgetID: $budgetID, month: $month) {\n      ...MonthlyReport\n    }\n  }\n  ${MONTHLY_REPORT_FRAGMENT}\n`;\n\nexport function useGetMonthlyReport(month) {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_MONTHLY_REPORT, {\n    variables: { budgetID: selectedBudget.id, month },\n    fetchPolicy: 'network-only',\n  });\n}\n","import gql from 'graphql-tag';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { useBudget } from './budget';\n\nexport const GET_ENVELOPES = gql`\n  query GetEnvelopes($budgetID: ID!) {\n    envelopes(budgetID: $budgetID) {\n      id\n      name\n      balance\n      limit\n    }\n  }\n`;\n\nconst CREATE_ENVELOPE = gql`\n  mutation CreateEnvelope($budgetID: ID!, $input: EnvelopeInput!) {\n    createEnvelope(budgetID: $budgetID, in: $input) {\n      id\n      name\n      balance\n      limit\n    }\n  }\n`;\n\nconst UPDATE_ENVELOPE = gql`\n  mutation UpdateEnvelope($budgetID: ID!, $id: ID!, $input: EnvelopeUpdate!) {\n    updateEnvelope(budgetID: $budgetID, id: $id, in: $input) {\n      id\n      name\n      balance\n      limit\n    }\n  }\n`;\n\nexport function useCreateEnvelope() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_ENVELOPE, {\n    update: (cache, { data: { createEnvelope } }) => {\n      const { envelopes } = cache.readQuery({\n        query: GET_ENVELOPES,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_ENVELOPES,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          envelopes: envelopes.concat([createEnvelope]),\n        },\n      });\n    },\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useUpdateEnvelope() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_ENVELOPE);\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useGetEnvelopes() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_ENVELOPES, {\n    variables: { budgetID: selectedBudget.id },\n  });\n}\n","import { useMutation, useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { removeFromListByID } from '../../util/immutable';\nimport { useBudget } from './budget';\nimport { GET_ENVELOPES } from './envelopes';\nimport { GET_MONTHLY_REPORT } from './monthlyReport';\n\nconst PLAN_FRAGMENT = gql`\n  fragment Plan on Plan {\n    id\n    title\n    fromEnvelope {\n      id\n      name\n    }\n    toEnvelope {\n      id\n      name\n    }\n    currentAmount\n    recurringAmount\n  }\n`;\n\nexport const GET_CURRENT_PLANS = gql`\n  query getCurrentPlans($budgetID: ID!) {\n    budget(budgetID: $budgetID) {\n      currentMonth {\n        plans {\n          ...Plan\n        }\n      }\n    }\n  }\n  ${PLAN_FRAGMENT}\n`;\n\nexport function useGetCurrentPlans() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_CURRENT_PLANS, {\n    variables: { budgetID: selectedBudget.id },\n  });\n}\n\nconst CREATE_PLAN = gql`\n  mutation createPlan($budgetID: ID!, $input: PlanInput!) {\n    createPlan(budgetID: $budgetID, in: $input) {\n      ...Plan\n    }\n  }\n  ${PLAN_FRAGMENT}\n`;\n\nexport function useCreatePlan() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_PLAN, {\n    update: (cache, { data: { createPlan } }) => {\n      const { budget } = cache.readQuery({\n        query: GET_CURRENT_PLANS,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_CURRENT_PLANS,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          budget: {\n            ...budget,\n            currentMonth: {\n              ...budget.currentMonth,\n              plans: budget.currentMonth.plans.concat([createPlan]),\n            },\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      },\n    ],\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nconst UPDATE_PLAN = gql`\n  mutation updatePlan($budgetID: ID!, $id: ID!, $input: PlanUpdate!) {\n    updatePlan(budgetID: $budgetID, id: $id, in: $input) {\n      ...Plan\n    }\n  }\n  ${PLAN_FRAGMENT}\n`;\n\nexport function useUpdatePlan() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_PLAN, {\n    refetchQueries: () => [\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      },\n    ],\n  });\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nconst DELETE_PLAN = gql`\n  mutation deletePlan($budgetID: ID!, $id: ID!) {\n    deletePlan(budgetID: $budgetID, id: $id) {\n      id\n    }\n  }\n`;\n\nexport function useDeletePlan() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(DELETE_PLAN, {\n    update: (cache, { data: { deletePlan } }) => {\n      const { budget } = cache.readQuery({\n        query: GET_CURRENT_PLANS,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_CURRENT_PLANS,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          budget: {\n            ...budget,\n            currentMonth: {\n              ...budget.currentMonth,\n              plans: removeFromListByID(\n                budget.currentMonth.plans,\n                deletePlan.id\n              ),\n            },\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: { budgetID: selectedBudget.id },\n      },\n    ],\n  });\n  const wrapper = id => {\n    mutation({ variables: { budgetID: selectedBudget.id, id } });\n  };\n  return [wrapper, ...rest];\n}\n","import { useMutation, useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { removeFromListByID } from '../../util/immutable';\nimport { GET_ACCOUNTS } from './accounts';\nimport { useBudget } from './budget';\nimport { GET_MONTHLY_REPORT } from './monthlyReport';\n\nconst TRANSFER_FRAGMENT = gql`\n  fragment Transfer on Transfer {\n    id\n    title\n    fromAccount {\n      id\n      name\n    }\n    toAccount {\n      id\n      name\n    }\n    amount\n    date\n  }\n`;\n\nexport const GET_CURRENT_TRANSFERS = gql`\n  query getCurrentTransfers($budgetID: ID!) {\n    budget(budgetID: $budgetID) {\n      currentMonth {\n        transfers {\n          ...Transfer\n        }\n      }\n    }\n  }\n  ${TRANSFER_FRAGMENT}\n`;\n\nexport function useGetCurrentTransfers() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_CURRENT_TRANSFERS, {\n    variables: { budgetID: selectedBudget.id },\n  });\n}\n\nconst CREATE_TRANSFER = gql`\n  mutation createTransfer($budgetID: ID!, $input: TransferInput!) {\n    createTransfer(budgetID: $budgetID, in: $input) {\n      ...Transfer\n    }\n  }\n  ${TRANSFER_FRAGMENT}\n`;\n\nexport function useCreateTransfer() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_TRANSFER, {\n    update: (cache, { data: { createTransfer } }) => {\n      const { budget } = cache.readQuery({\n        query: GET_CURRENT_TRANSFERS,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_CURRENT_TRANSFERS,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          budget: {\n            ...budget,\n            currentMonth: {\n              ...budget.currentMonth,\n              transfers: budget.currentMonth.transfers.concat([createTransfer]),\n            },\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      },\n    ],\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nconst UPDATE_TRANSFER = gql`\n  mutation updateTransfer($budgetID: ID!, $id: ID!, $input: TransferUpdate!) {\n    updateTransfer(budgetID: $budgetID, id: $id, in: $input) {\n      ...Transfer\n    }\n  }\n  ${TRANSFER_FRAGMENT}\n`;\n\nexport function useUpdateTransfer() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_TRANSFER, {\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      },\n    ],\n  });\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nconst DELETE_TRANSFER = gql`\n  mutation deleteTransfer($budgetID: ID!, $id: ID!) {\n    deleteTransfer(budgetID: $budgetID, id: $id) {\n      id\n    }\n  }\n`;\n\nexport function useDeleteTranfer() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(DELETE_TRANSFER, {\n    update: (cache, { data: { deleteTransfer } }) => {\n      const { budget } = cache.readQuery({\n        query: GET_CURRENT_TRANSFERS,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_CURRENT_TRANSFERS,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          budget: {\n            ...budget,\n            currentMonth: {\n              ...budget.currentMonth,\n              transfers: removeFromListByID(\n                budget.currentMonth.transfers,\n                deleteTransfer.id\n              ),\n            },\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: { budgetID: selectedBudget.id },\n      },\n    ],\n  });\n  const wrapper = id => {\n    mutation({ variables: { budgetID: selectedBudget.id, id } });\n  };\n  return [wrapper, ...rest];\n}\n","import { useMutation, useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport PropTypes from 'prop-types';\nimport React, { createContext, useContext, useEffect, useState } from 'react';\n\nimport { GET_CURRENT_EXPENSES } from './expenses';\nimport { GET_MONTHLY_REPORT } from './monthlyReport';\nimport { GET_CURRENT_PLANS } from './plans';\nimport { GET_CURRENT_TRANSFERS } from './transfers';\n\nexport const BudgetContext = createContext();\nexport const useBudget = () => useContext(BudgetContext);\n\nconst GET_BUDGETS = gql`\n  query GetBudgets {\n    budgets {\n      id\n      name\n      currentMonth {\n        month\n      }\n    }\n  }\n`;\n\nconst storageKey = 'LAST-CHOSEN-BUDGET-ID';\n\nexport function BudgetProvider({ children }) {\n  const [selectedBudget, setSelectedBudget] = useState(null);\n  const { loading, error, data } = useQuery(GET_BUDGETS);\n\n  useEffect(() => {\n    if (selectedBudget) {\n      sessionStorage.setItem(storageKey, selectedBudget.id);\n    }\n  }, [selectedBudget]);\n\n  useEffect(() => {\n    if (!selectedBudget && data && data.budgets) {\n      const lastChosenID = sessionStorage.getItem(storageKey);\n      const lastChosen = data.budgets.find(b => b.id === lastChosenID);\n      if (lastChosen) {\n        setSelectedBudget(lastChosen);\n      }\n    }\n  }, [data, selectedBudget]);\n\n  const value = {\n    selectedBudget,\n    setSelectedBudget,\n    loading,\n    error,\n    budgets: !loading && !error ? data.budgets : [],\n  };\n\n  if (error) {\n    console.error(error);\n  }\n  return (\n    <BudgetContext.Provider value={value}>{children}</BudgetContext.Provider>\n  );\n}\n\nBudgetProvider.propTypes = {\n  children: PropTypes.node,\n};\n\nconst CLOSE_CURRENT_MONTH = gql`\n  mutation closeMonth($budgetID: ID!) {\n    closeCurrentMonth(budgetID: $budgetID) {\n      id\n    }\n  }\n`;\n\nexport function useCloseCurrentMonth() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CLOSE_CURRENT_MONTH, {\n    refetchQueries: () => [\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth,\n        },\n      },\n      {\n        query: GET_CURRENT_PLANS,\n        variables: { budgetID: selectedBudget.id },\n      },\n      {\n        query: GET_CURRENT_TRANSFERS,\n        variables: { budgetID: selectedBudget.id },\n      },\n      {\n        query: GET_CURRENT_EXPENSES,\n        variables: { budgetID: selectedBudget.id },\n      },\n    ],\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n","import gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { useBudget } from './budget';\n\nexport const GET_ACCOUNTS = gql`\n  query GetAccounts($budgetID: ID!) {\n    accounts(budgetID: $budgetID) {\n      id\n      name\n      balance\n    }\n  }\n`;\n\nexport function useGetAccounts() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_ACCOUNTS, {\n    variables: { budgetID: selectedBudget.id },\n  });\n}\n\nconst CREATE_ACCOUNT = gql`\n  mutation CreateAccount($budgetID: ID!, $input: AccountInput!) {\n    createAccount(budgetID: $budgetID, in: $input) {\n      id\n      name\n      balance\n    }\n  }\n`;\n\nexport function useCreateAccount() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_ACCOUNT, {\n    update: (cache, { data: { createAccount } }) => {\n      const { accounts } = cache.readQuery({\n        query: GET_ACCOUNTS,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_ACCOUNTS,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          accounts: accounts.concat([createAccount]),\n        },\n      });\n    },\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nconst UPDATE_ACCOUNT = gql`\n  mutation UpdateAccount($budgetID: ID!, $id: ID!, $input: AccountUpdate!) {\n    updateAccount(budgetID: $budgetID, id: $id, in: $input) {\n      id\n      name\n      balance\n    }\n  }\n`;\n\nexport function useUpdateAccount() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_ACCOUNT);\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n","import { useMutation, useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { removeFromListByID } from '../../util/immutable';\nimport { GET_ACCOUNTS } from './accounts';\nimport { useBudget } from './budget';\nimport { GET_ENVELOPES } from './envelopes';\nimport { GET_MONTHLY_REPORT } from './monthlyReport';\n\nconst EXPENSE_FRAGMENT = gql`\n  fragment Expense on Expense {\n    id\n    title\n    account {\n      id\n      name\n    }\n    categories {\n      category {\n        id\n        name\n      }\n      amount\n    }\n    totalAmount\n    date\n  }\n`;\n\nexport const GET_CURRENT_EXPENSES = gql`\n  query getCurrentExpenses($budgetID: ID!) {\n    budget(budgetID: $budgetID) {\n      currentMonth {\n        expenses {\n          ...Expense\n        }\n      }\n    }\n  }\n\n  ${EXPENSE_FRAGMENT}\n`;\n\nexport const GET_EXPENSES = gql`\n  query getExpenses($budgetID: ID!, $month: Month!) {\n    monthlyReport(budgetID: $budgetID, month: $month) {\n      expenses {\n        ...Expense\n      }\n    }\n  }\n\n  ${EXPENSE_FRAGMENT}\n`;\n\nconst CREATE_EXPENSE = gql`\n  mutation createExpense($budgetID: ID!, $input: ExpenseInput!) {\n    createExpense(budgetID: $budgetID, in: $input) {\n      ...Expense\n    }\n  }\n\n  ${EXPENSE_FRAGMENT}\n`;\n\nconst UPDATE_EXPENSE = gql`\n  mutation updateExpense($budgetID: ID!, $id: ID!, $input: ExpenseUpdate!) {\n    updateExpense(budgetID: $budgetID, id: $id, in: $input) {\n      ...Expense\n    }\n  }\n\n  ${EXPENSE_FRAGMENT}\n`;\n\nexport function useCreateExpense() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_EXPENSE, {\n    update: (cache, { data: { createExpense } }) => {\n      const { budget } = cache.readQuery({\n        query: GET_CURRENT_EXPENSES,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_CURRENT_EXPENSES,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          budget: {\n            ...budget,\n            currentMonth: {\n              ...budget.currentMonth,\n              expenses: budget.currentMonth.expenses.concat([createExpense]),\n            },\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      },\n    ],\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useUpdateExpense() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_EXPENSE, {\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      },\n    ],\n  });\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useGetCurrentExpenses() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_CURRENT_EXPENSES, {\n    variables: { budgetID: selectedBudget.id },\n  });\n}\n\nexport function useGetExpenses(month) {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_EXPENSES, {\n    variables: { budgetID: selectedBudget.id, month },\n  });\n}\n\nconst DELETE_EXPENSE = gql`\n  mutation deleteExpense($budgetID: ID!, $id: ID!) {\n    deleteExpense(budgetID: $budgetID, id: $id) {\n      id\n    }\n  }\n`;\n\nexport function useDeleteExpense() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(DELETE_EXPENSE, {\n    update: (cache, { data: { deleteExpense } }) => {\n      const { budget } = cache.readQuery({\n        query: GET_CURRENT_EXPENSES,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_CURRENT_EXPENSES,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          budget: {\n            ...budget,\n            currentMonth: {\n              ...budget.currentMonth,\n              expenses: removeFromListByID(\n                budget.currentMonth.expenses,\n                deleteExpense.id\n              ),\n            },\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: { budgetID: selectedBudget.id },\n      },\n    ],\n  });\n  const wrapper = id => {\n    mutation({ variables: { budgetID: selectedBudget.id, id } });\n  };\n  return [wrapper, ...rest];\n}\n","import * as math from 'mathjs';\n\nexport default class Amount {\n  static parse(string) {\n    if (string === null || string === '') {\n      return null;\n    }\n    const number = math.evaluate(string.replace(/,/, '.'));\n    return Math.round(number * 100);\n  }\n\n  static isValid(string) {\n    if (string === null || string === '') {\n      return true;\n    }\n\n    try {\n      math.parse(string.replace(/,/, '.'));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  static zero() {\n    return 0;\n  }\n\n  static format(amount, kSeparator = true) {\n    if (amount === null) {\n      return null;\n    }\n    const fixed = (amount / 100).toFixed(2);\n    if (!kSeparator) {\n      return fixed;\n    }\n    var parts = fixed.split('.');\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\n    return parts.join('.');\n  }\n}\n","export default class Day {\n  constructor(year, month, day) {\n    this.year = year;\n    this.month = month;\n    this.day = day;\n  }\n\n  static fromDate(date) {\n    return new Date(date.getYear(), date.getMonth(), date.getDate());\n  }\n\n  format() {\n    return `${this.year}-${String(this.month).padStart(2, '0')}-${String(\n      this.day\n    ).padStart(2, '0')}`;\n  }\n}\n","import Day from './Day';\n\nconst monthNames = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nexport default class Month {\n  constructor(year, month) {\n    this.year = year;\n    this.month = month;\n  }\n  static parse(string) {\n    const [year, month] = string.split('-');\n    return new Month(Number(year), Number(month));\n  }\n\n  firstDay() {\n    return new Day(this.year, this.month, 1);\n  }\n\n  lastDay() {\n    const date = new Date(this.year, this.month, 0);\n    return new Day(this.year, this.month, date.getDate());\n  }\n\n  pretty() {\n    return `${monthNames[this.month - 1]} ${this.year}`;\n  }\n}\n","import classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { Size, Variant } from '../bootstrap';\n\nexport default function Spinner({ size, variant }) {\n  const classNames = classnames('spinner-border', {\n    [`spinner-border-${size}`]: size,\n    [`text-${variant}`]: variant,\n  });\n  return (\n    <div className={classNames} role='status'>\n      <span className='sr-only'>Loading...</span>\n    </div>\n  );\n}\n\nSpinner.propTypes = {\n  size: PropTypes.oneOf(Object.keys(Size)),\n  variant: PropTypes.oneOf(Object.keys(Variant)),\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Spinner from '../sbadmin2/utilities/Spinner';\n\nfunction ErrorMessageList({ errorMessage, subErrors }) {\n  return (\n    <>\n      {errorMessage}\n      <ul>\n        {subErrors.map((e, idx) => (\n          <li key={idx}>{e}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\nErrorMessageList.propTypes = {\n  errorMessage: PropTypes.string.isRequired,\n  subErrors: PropTypes.arrayOf(PropTypes.string),\n};\n\nfunction ErrorMessage({ error }) {\n  const subErrors = error.networkError\n    ? error.networkError.result\n      ? error.networkError.result.errors\n      : [`${error.networkError}`]\n    : error.graphQLErrors.map(e => `${e.path.join('.')}: ${e.message}`);\n  console.error(error);\n  return (\n    <div className='text-danger'>\n      <i className='fas fa-fw fa-exclamation-triangle' />\n      <ErrorMessageList errorMessage={error.message} subErrors={subErrors} />\n    </div>\n  );\n}\n\nErrorMessage.propTypes = {\n  error: PropTypes.shape({\n    networkError: PropTypes.shape({\n      result: PropTypes.shape({\n        errors: PropTypes.array,\n      }),\n    }),\n    graphQLErrors: PropTypes.arrayOf(\n      PropTypes.shape({\n        path: PropTypes.arrayOf(PropTypes.string),\n        message: PropTypes.string,\n      })\n    ),\n    message: PropTypes.string,\n  }),\n};\n\nexport function WithQuery({ query, showError, children, ...props }) {\n  const { loading, error } = query;\n  return loading ? (\n    <Spinner {...props} />\n  ) : error ? (\n    showError && <ErrorMessage error={error} />\n  ) : (\n    children(query)\n  );\n}\n\nWithQuery.propTypes = {\n  children: PropTypes.func.isRequired,\n  query: PropTypes.shape({\n    loading: PropTypes.bool.isRequired,\n    error: PropTypes.any,\n  }),\n  showError: PropTypes.bool,\n};\n\nWithQuery.defaultProps = {\n  showError: true,\n};\n","import React from 'react';\nimport { Form, Row, Col } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport function InlineFormControl({ label, size, feedback, children }) {\n  return (\n    <Form.Group as={Row}>\n      <Form.Label column>{label}</Form.Label>\n      <Col sm={size}>\n        {children}\n        {feedback && (\n          <Form.Control.Feedback type=\"invalid\">\n            {feedback}\n          </Form.Control.Feedback>\n        )}\n      </Col>\n    </Form.Group>\n  );\n}\n\nInlineFormControl.propTypes = {\n  children: PropTypes.element,\n  feedback: PropTypes.string,\n  label: PropTypes.string.isRequired,\n  size: PropTypes.number,\n};\n\nInlineFormControl.defaultProps = {\n  inline: 0,\n};\n","import { useState, useRef } from 'react';\n\nfunction simpleFormData({ $init, $process, $default }, getRoot) {\n  const process = $process || (v => v);\n  const formData = { current: null };\n  const _default =\n    typeof $default === 'function' ? () => $default(getRoot()) : () => $default;\n\n  formData.value = () => {\n    if (formData.current === null) {\n      return null;\n    }\n    return process(formData.current.value);\n  };\n\n  formData.changed = () => {\n    if (formData.current === null) {\n      return $init !== null;\n    }\n    return formData.current.value !== $init;\n  };\n\n  formData.default = () =>\n    $init !== null && $init !== undefined ? $init : _default();\n\n  formData.init = () => $init;\n\n  return formData;\n}\n\nfunction arrayFormData({ $model, $init }, rerender, getRoot) {\n  const formData = $init.map(v => createFormData($model(v), rerender), getRoot);\n  formData._originalPush = formData.push;\n\n  formData.value = () => {\n    return formData.map(v => v.value());\n  };\n\n  formData.changed = () => {\n    return formData.length !== $init.length || formData.some(v => v.changed());\n  };\n\n  formData.push = v => {\n    formData._originalPush(createFormData($model(v), rerender));\n    rerender();\n  };\n\n  formData.removeAt = idx => {\n    formData.splice(idx, 1);\n    rerender();\n  };\n\n  return formData;\n}\n\nfunction compositeFormData({ $includeAllValues, ...model }, rerender, getRoot) {\n  const formData = Object.keys(model).reduce(\n    (acc, key) => ({\n      ...acc,\n      [key]: createFormData(model[key], rerender, getRoot),\n    }),\n    {}\n  );\n\n  formData.changed = () => {\n    return Object.keys(model).some(k => formData[k].changed());\n  };\n\n  formData.value = () => {\n    return Object.keys(model).reduce((acc, key) => {\n      if (!formData[key].changed() && !$includeAllValues) {\n        return acc;\n      }\n      return { ...acc, [key]: formData[key].value() };\n    }, {});\n  };\n\n  return formData;\n}\n\nfunction createFormData(model, rerender, getRoot) {\n  if (Object.prototype.hasOwnProperty.call(model, '$init')) {\n    if (Object.prototype.hasOwnProperty.call(model, '$model')) {\n      return arrayFormData(model, rerender, getRoot);\n    }\n    return simpleFormData(model, getRoot);\n  }\n  return compositeFormData(model, rerender, getRoot);\n}\n\nexport function useFormData(model) {\n  const [, setValue] = useState(false);\n  const rerender = () => setValue(v => !v);\n  let formData,\n    getRoot = () => formData;\n  formData = createFormData(model, rerender, getRoot);\n  const ref = useRef(formData);\n  return ref.current;\n}\n","import gql from 'graphql-tag';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { useBudget } from './budget';\n\nconst GET_CATEGORIES = gql`\n  query GetCategories($budgetID: ID!) {\n    categories(budgetID: $budgetID) {\n      id\n      name\n      envelope {\n        id\n        name\n      }\n      description\n    }\n  }\n`;\n\nconst CREATE_CATEGORY = gql`\n  mutation CreateCategory($budgetID: ID!, $input: CategoryInput!) {\n    createCategory(budgetID: $budgetID, in: $input) {\n      id\n      name\n      envelope {\n        id\n        name\n      }\n      description\n    }\n  }\n`;\n\nconst UPDATE_CATEGORY = gql`\n  mutation UpdateCategory($budgetID: ID!, $id: ID!, $input: CategoryUpdate!) {\n    updateCategory(budgetID: $budgetID, id: $id, in: $input) {\n      id\n      name\n      envelope {\n        id\n        name\n      }\n      description\n    }\n  }\n`;\n\nexport function useCreateCategory() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_CATEGORY, {\n    update: (cache, { data: { createCategory } }) => {\n      const { categories } = cache.readQuery({\n        query: GET_CATEGORIES,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_CATEGORIES,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          categories: categories.concat([createCategory]),\n        },\n      });\n    },\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useUpdateCategory() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_CATEGORY);\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useGetCategories() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_CATEGORIES, {\n    variables: { budgetID: selectedBudget.id },\n  });\n}\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from 'react-bootstrap';\nimport Amount from '../../model/Amount';\n\nexport function AmountInput({ placeholder, formData }) {\n  const [isValid, setIsValid] = useState(false);\n  const [value, setValue] = useState(formData.default() || '');\n  useEffect(() => {\n    formData.current = { value };\n  }, [formData, value]);\n  function onChange(e) {\n    const newValue = e.target.value;\n    setValue(newValue);\n    setIsValid(Amount.isValid(newValue));\n  }\n  return (\n    <Form.Control\n      required\n      type=\"text\"\n      placeholder={placeholder}\n      value={value}\n      onChange={onChange}\n      isValid={isValid}\n    />\n  );\n}\n\nAmountInput.propTypes = {\n  formData: PropTypes.shape({\n    default: PropTypes.func.isRequired,\n    current: PropTypes.shape({ value: PropTypes.string }),\n  }),\n  placeholder: PropTypes.string,\n};\n","import { faMinus, faPlus } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Col, Form, Row } from 'react-bootstrap';\n\nimport { useGetCategories } from '../gql/categories';\nimport { WithQuery } from '../gql/WithQuery';\nimport { Combobox, IconButton, useDictionary } from '../sbadmin2';\nimport { Size, Variant } from '../sbadmin2/bootstrap';\nimport { AmountInput } from './AmountInput';\n\nexport function CategoriesInput({ formData }) {\n  const query = useGetCategories();\n  const { expenses } = useDictionary();\n  return (\n    <WithQuery query={query}>\n      {({ data }) => (\n        <>\n          <small className='d-flex align-items-center mb-3'>\n            {expenses.modal.labels.categories}\n            <IconButton\n              icon={faPlus}\n              variant={Variant.primary}\n              size={Size.sm}\n              onClick={() =>\n                formData.push({\n                  category: { id: null },\n                  amount: null,\n                })\n              }\n              type='button'\n              borderless\n            />\n          </small>\n          {formData.map((categoryFormData, idx) => (\n            <Form.Group\n              as={Row}\n              key={categoryFormData.categoryID.init() || idx}\n              className='d-flex align-items-center'\n            >\n              <Col sm={6}>\n                <Combobox\n                  _ref={categoryFormData.categoryID}\n                  defaultValue={categoryFormData.categoryID.init()}\n                  allowedValues={data.categories.map(({ id, name }) => ({\n                    id,\n                    label: name,\n                  }))}\n                  required\n                />\n              </Col>\n              <Col className='pr-0'>\n                <AmountInput\n                  placeholder={expenses.modal.labels.amount}\n                  formData={categoryFormData.amount}\n                />\n              </Col>\n              <Col sm={1} className='px-0'>\n                <IconButton\n                  icon={faMinus}\n                  variant={Variant.danger}\n                  size={Size.sm}\n                  onClick={() => formData.removeAt(idx)}\n                  type='button'\n                />\n              </Col>\n            </Form.Group>\n          ))}\n        </>\n      )}\n    </WithQuery>\n  );\n}\n\nCategoriesInput.propTypes = {\n  formData: PropTypes.array.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Amount from '../../model/Amount';\nimport Month from '../../model/Month';\nimport { useGetAccounts } from '../gql/accounts';\nimport { useBudget } from '../gql/budget';\nimport { WithQuery } from '../gql/WithQuery';\nimport { useDictionary } from '../sbadmin2';\nimport { Combobox } from '../sbadmin2';\nimport { FormControl } from '../sbadmin2/utilities/FormControl';\nimport { FormInModal } from '../sbadmin2/utilities/FormInModal';\nimport { InlineFormControl } from '../sbadmin2/utilities/InlineFormControl';\nimport { useFormData } from '../sbadmin2/utilities/useFormData';\nimport { CategoriesInput } from './CategoriesInput';\n\nexport function ExpenseModal({ account, init, ...props }) {\n  const { selectedBudget } = useBudget();\n  const { expenses } = useDictionary();\n  const accountsQuery = useGetAccounts();\n  const formData = useFormData({\n    title: { $init: init.title },\n    date: { $init: init.date },\n    accountID: {\n      $init: init.account.id,\n      $default: account && account.id,\n    },\n    categories: {\n      $init: init.categories,\n      $model: c => ({\n        categoryID: { $init: c.category.id },\n        amount: {\n          $init: Amount.format(c.amount, false),\n          $process: Amount.parse,\n        },\n        $includeAllValues: true,\n      }),\n    },\n  });\n  const month = Month.parse(selectedBudget.currentMonth.month);\n  const first = month.firstDay();\n  const last = month.lastDay();\n\n  return (\n    <FormInModal formData={formData} {...props}>\n      <WithQuery query={accountsQuery}>\n        {({ data: accountsData }) => (\n          <>\n            <FormControl\n              label={expenses.modal.labels.title}\n              inline={10}\n              formData={formData.title}\n              feedback='Provide name'\n              required\n            />\n            <FormControl\n              label={expenses.modal.labels.date}\n              inline={10}\n              formData={formData.date}\n              feedback='Provide date'\n              type='date'\n              required\n              min={first.format()}\n              max={last.format()}\n            />\n            <InlineFormControl label={expenses.modal.labels.account} size={9}>\n              <Combobox\n                _ref={formData.accountID}\n                defaultValue={formData.accountID.default()}\n                allowedValues={accountsData.accounts.map(({ id, name }) => ({\n                  id,\n                  label: name,\n                }))}\n                disabled={!!account}\n                required\n              />\n            </InlineFormControl>\n            <CategoriesInput formData={formData.categories} />\n          </>\n        )}\n      </WithQuery>\n    </FormInModal>\n  );\n}\n\nExpenseModal.propTypes = {\n  account: PropTypes.shape({\n    id: PropTypes.string,\n  }),\n  init: PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    date: PropTypes.string,\n    account: PropTypes.shape({\n      id: PropTypes.string,\n    }),\n    categories: PropTypes.array,\n  }),\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport CreateButton from '../common/CreateButton';\nimport { useCreateExpense } from '../gql/expenses';\nimport { OpenModalButton } from '../sbadmin2';\nimport { useDictionary } from '../sbadmin2';\nimport { ExpenseModal } from './ExpenseModal';\n\nexport function CreateExpenseButton({ account }) {\n  const [createExpense] = useCreateExpense();\n  const { expenses } = useDictionary();\n\n  return (\n    <OpenModalButton\n      button={props => <CreateButton {...props} />}\n      modalContent={props => (\n        <ExpenseModal\n          init={{\n            name: null,\n            account: {},\n            date: null,\n            categories: [],\n          }}\n          account={account}\n          title={expenses.modal.createTitle}\n          onSave={createExpense}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nCreateExpenseButton.propTypes = {\n  account: PropTypes.any,\n};\n","import React, { createContext, useContext, useState } from 'react';\n\nexport const MonthContext = createContext();\nexport const useMonth = () => useContext(MonthContext);\n\nexport function MonthProvider({ currentMonth, children }) {\n  const [selectedMonth, setSelectedMonth] = useState(currentMonth);\n  const value = {\n    currentMonth,\n    selectedMonth,\n    setSelectedMonth,\n  };\n  return (\n    <MonthContext.Provider value={value}>{children}</MonthContext.Provider>\n  );\n}\n","import { faSyncAlt } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react';\n\nimport { IconButton } from '../sbadmin2';\nimport { Size, Variant } from '../sbadmin2/bootstrap';\n\nexport default function RefreshButton(props) {\n  return (\n    <IconButton\n      icon={faSyncAlt}\n      size={Size.sm}\n      variant={Variant.secondary}\n      type='button'\n      {...props}\n    />\n  );\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport RefreshButton from '../common/RefreshButton';\nimport { WithQuery } from '../gql/WithQuery';\nimport { TablePanel } from '../sbadmin2';\n\nexport function QueryTablePanel({ query, buttons, getData, ...props }) {\n  return (\n    <WithQuery query={query} size='sm' showError={false}>\n      {({ refetch, data }) => (\n        <TablePanel\n          headerButtons={\n            <>\n              <RefreshButton onClick={() => refetch()} className='mr-1' />\n              {buttons}\n            </>\n          }\n          data={getData(data)}\n          {...props}\n        />\n      )}\n    </WithQuery>\n  );\n}\n\nQueryTablePanel.propTypes = {\n  buttons: PropTypes.node,\n  getData: PropTypes.func.isRequired,\n  query: PropTypes.shape({\n    data: PropTypes.any,\n    refetch: PropTypes.func,\n  }).isRequired,\n};\n","import { faTrash } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useDeleteExpense } from '../gql/expenses';\nimport { IconButton } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\n\nexport function DeleteExpenseButton({ expense }) {\n  const [deleteExpense] = useDeleteExpense();\n  return (\n    <IconButton\n      icon={faTrash}\n      variant={Variant.danger}\n      onClick={() => deleteExpense(expense.id)}\n      borderless\n    />\n  );\n}\n\nDeleteExpenseButton.propTypes = {\n  expense: PropTypes.shape({ id: PropTypes.any }).isRequired,\n};\n","import { faEdit } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useUpdateExpense } from '../gql/expenses';\nimport { IconButton, OpenModalButton } from '../sbadmin2';\nimport { useDictionary } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\nimport { ExpenseModal } from './ExpenseModal';\n\nexport function UpdateExpenseButton({ expense }) {\n  const [updateExpense] = useUpdateExpense();\n  const { expenses } = useDictionary();\n  return (\n    <OpenModalButton\n      button={props => (\n        <IconButton\n          icon={faEdit}\n          variant={Variant.primary}\n          {...props}\n          borderless\n        />\n      )}\n      modalContent={props => (\n        <ExpenseModal\n          init={expense}\n          title={expenses.modal.editTitle}\n          onSave={input => updateExpense(expense.id, input)}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nUpdateExpenseButton.propTypes = {\n  expense: PropTypes.shape({\n    id: PropTypes.string,\n  }),\n};\n","import React from 'react';\n\nimport Amount from '../../model/Amount';\nimport { useMonth } from '../context/Month';\nimport { useGetExpenses } from '../gql/expenses';\nimport { QueryTablePanel } from '../gql/QueryTablePanel';\nimport { DeleteExpenseButton } from './DeleteExpenseButton';\nimport { UpdateExpenseButton } from './UpdateExpenseButton';\n\nconst columns = [\n  { dataField: 'title' },\n  { dataField: 'date', sort: true },\n  {\n    dataField: 'account',\n    formatter: a => a.name,\n  },\n  {\n    dataField: 'totalAmount',\n    formatter: Amount.format,\n    align: 'right',\n    headerAlign: 'right',\n  },\n  {\n    dataField: 'actions',\n    isDummyColumn: true,\n    formatter: (cell, row) => (\n      <span>\n        <UpdateExpenseButton expense={row} />\n        <DeleteExpenseButton expense={row} />\n      </span>\n    ),\n    style: {\n      whiteSpace: 'nowrap',\n      width: '1%',\n    },\n  },\n];\n\nconst rowClasses = (row, rowIndex) => {\n  return rowIndex % 2 === 0 && 'table-striped';\n};\n\nconst expandRow = {\n  className: 'background-color-white',\n  renderer: row => (\n    <table className='table table-sm mb-0'>\n      <tbody>\n        {row.categories.map((category, idx) => (\n          <tr key={idx}>\n            <td className='pl-3'>{category.category.name}</td>\n            <td>{Amount.format(category.amount)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  ),\n};\n\nconst defaultSorted = [\n  {\n    dataField: 'date',\n    order: 'desc',\n  },\n];\n\nexport function ExpensesTablePanel({\n  readTitle,\n  createButton,\n  accountFilter,\n  ...props\n}) {\n  const { selectedMonth } = useMonth();\n  const query = useGetExpenses(selectedMonth);\n\n  let filters = [];\n  if (accountFilter) {\n    filters.push(row => row.account.id === accountFilter);\n  }\n\n  return (\n    <QueryTablePanel\n      {...props}\n      query={query}\n      getData={d => d.monthlyReport.expenses}\n      buttons={createButton}\n      columns={columns}\n      keyField='id'\n      expandRow={expandRow}\n      rowClasses={rowClasses}\n      striped={false}\n      readTitle={readTitle}\n      readColumnNames={d => d.expenses.table.columns}\n      defaultSorted={defaultSorted}\n      filters={filters}\n    />\n  );\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Amount from '../../model/Amount';\nimport Month from '../../model/Month';\nimport { useGetAccounts } from '../gql/accounts';\nimport { useBudget } from '../gql/budget';\nimport { WithQuery } from '../gql/WithQuery';\nimport { Combobox, useDictionary } from '../sbadmin2';\nimport { FormControl } from '../sbadmin2/utilities/FormControl';\nimport { FormInModal } from '../sbadmin2/utilities/FormInModal';\nimport { InlineFormControl } from '../sbadmin2/utilities/InlineFormControl';\nimport { useFormData } from '../sbadmin2/utilities/useFormData';\n\nexport function TransferModal({ toAccount, fromAccount, init, ...props }) {\n  const { selectedBudget } = useBudget();\n  const { transfers } = useDictionary();\n  const query = useGetAccounts();\n  const formData = useFormData({\n    title: { $init: init.title },\n    date: { $init: init.date },\n    amount: {\n      $init: Amount.format(init.amount, false),\n      $process: Amount.parse,\n    },\n    fromAccountID: {\n      $init: init.fromAccount && init.fromAccount.id,\n      $process: v => (v === '' ? null : v),\n      $default: fromAccount && fromAccount.id,\n    },\n    toAccountID: {\n      $init: init.toAccount.id,\n      $default: toAccount && toAccount.id,\n    },\n  });\n\n  const month = Month.parse(selectedBudget.currentMonth.month);\n  const first = month.firstDay();\n  const last = month.lastDay();\n  return (\n    <FormInModal formData={formData} {...props}>\n      <WithQuery query={query}>\n        {({ data }) => (\n          <>\n            <FormControl\n              required\n              label={transfers.modal.labels.title}\n              inline={10}\n              formData={formData.title}\n              feedback='Provide title'\n            />\n            <FormControl\n              label={transfers.modal.labels.date}\n              inline={10}\n              formData={formData.date}\n              feedback='Provide date'\n              type='date'\n              required\n              min={first.format()}\n              max={last.format()}\n            />\n            <FormControl\n              inline={10}\n              label={transfers.modal.labels.amount}\n              feedback='Provide amount'\n              type='number'\n              required\n              formData={formData.amount}\n              step='0.01'\n            />\n            <InlineFormControl\n              size={10}\n              label={transfers.modal.labels.fromAccount}\n            >\n              <Combobox\n                allowedValues={data.accounts.map(({ id, name }) => ({\n                  id,\n                  label: name,\n                }))}\n                _ref={formData.fromAccountID}\n                defaultValue={formData.fromAccountID.default()}\n                disabled={!!fromAccount}\n              />\n            </InlineFormControl>\n            <InlineFormControl\n              size={10}\n              label={transfers.modal.labels.toAccount}\n            >\n              <Combobox\n                allowedValues={data.accounts.map(({ id, name }) => ({\n                  id,\n                  label: name,\n                }))}\n                _ref={formData.toAccountID}\n                defaultValue={formData.toAccountID.default()}\n                disabled={!!toAccount}\n              />\n            </InlineFormControl>\n          </>\n        )}\n      </WithQuery>\n    </FormInModal>\n  );\n}\n\nTransferModal.propTypes = {\n  fromAccount: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }),\n  init: PropTypes.shape({\n    title: PropTypes.string,\n    date: PropTypes.string,\n    amount: PropTypes.number,\n    fromAccount: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n    }),\n    toAccount: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n    }),\n  }),\n  toAccount: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }),\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport CreateButton from '../common/CreateButton';\nimport { useCreateTransfer } from '../gql/transfers';\nimport { OpenModalButton } from '../sbadmin2';\nimport { useDictionary } from '../sbadmin2';\nimport { TransferModal } from './TransferModal';\n\nexport function CreateTransferButton({ toAccount, fromAccount }) {\n  const [createTransfer] = useCreateTransfer();\n  const { transfers } = useDictionary();\n  return (\n    <OpenModalButton\n      button={props => <CreateButton {...props} />}\n      modalContent={props => (\n        <TransferModal\n          init={{\n            title: null,\n            fromAccount: { id: null },\n            toAccount: { id: null },\n            amount: null,\n            date: null,\n          }}\n          title={transfers.modal.createTitle}\n          onSave={createTransfer}\n          toAccount={toAccount}\n          fromAccount={fromAccount}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nCreateTransferButton.propTypes = {\n  fromAccount: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }),\n  toAccount: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }),\n};\n","import { faEdit } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useUpdateTransfer } from '../gql/transfers';\nimport { IconButton, OpenModalButton } from '../sbadmin2';\nimport { useDictionary } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\nimport { TransferModal } from './TransferModal';\n\nexport function UpdateTransferButton({ transfer }) {\n  const [updateTransfer] = useUpdateTransfer();\n  const { transfers } = useDictionary();\n  return (\n    <OpenModalButton\n      button={props => (\n        <IconButton\n          icon={faEdit}\n          variant={Variant.primary}\n          borderless\n          {...props}\n        />\n      )}\n      modalContent={props => (\n        <TransferModal\n          init={transfer}\n          title={transfers.modal.editTitle}\n          onSave={input => updateTransfer(transfer.id, input)}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nUpdateTransferButton.propTypes = {\n  transfer: PropTypes.shape({\n    id: PropTypes.string,\n  }),\n};\n","import { faTrash } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useDeleteTranfer } from '../gql/transfers';\nimport { IconButton } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\n\nexport function DeleteTransferButton({ transfer }) {\n  const [deleteTransfer] = useDeleteTranfer();\n  return (\n    <IconButton\n      icon={faTrash}\n      variant={Variant.danger}\n      onClick={() => deleteTransfer(transfer.id)}\n      borderless\n    />\n  );\n}\n\nDeleteTransferButton.propTypes = {\n  transfer: PropTypes.shape({ id: PropTypes.any }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useGetCurrentTransfers } from '../gql/transfers';\nimport { QueryTablePanel } from '../gql/QueryTablePanel';\nimport { UpdateTransferButton } from './UpdateTransferButton';\nimport { DeleteTransferButton } from './DeleteTransferButton';\nimport Amount from '../../model/Amount';\n\nconst columns = [\n  { dataField: 'title' },\n  {\n    dataField: 'fromAccount',\n    formatter: a => a && a.name,\n  },\n  {\n    dataField: 'toAccount',\n    formatter: a => a.name,\n  },\n  {\n    dataField: 'amount',\n    align: 'right',\n    headerAlign: 'right',\n    formatter: Amount.format,\n  },\n  {\n    dataField: 'date',\n    align: 'right',\n    headerAlign: 'right',\n  },\n  {\n    dataField: 'actions',\n    isDummyColumn: true,\n    formatter: (cell, row) => (\n      <span>\n        <UpdateTransferButton transfer={row} />\n        <DeleteTransferButton transfer={row} />\n      </span>\n    ),\n    style: {\n      whiteSpace: 'nowrap',\n      width: '1%',\n    },\n  },\n];\n\nexport function TransfersTablePanel({\n  toAccountFilter,\n  fromAccountFilter,\n  createButton,\n  ...props\n}) {\n  const query = useGetCurrentTransfers();\n  let filters = [];\n  if (toAccountFilter) {\n    filters.push(row => row.toAccount.id === toAccountFilter);\n  }\n  if (fromAccountFilter) {\n    filters.push(\n      row => row.fromAccount && row.fromAccount.id === fromAccountFilter\n    );\n  }\n  return (\n    <QueryTablePanel\n      {...props}\n      query={query}\n      getData={data => data.budget.currentMonth.transfers}\n      buttons={createButton}\n      columns={columns}\n      keyField=\"id\"\n      readColumnNames={d => d.transfers.table.columns}\n      filters={filters}\n    />\n  );\n}\n\nTransfersTablePanel.propTypes = {\n  createButton: PropTypes.node.isRequired,\n  fromAccountFilter: PropTypes.string,\n  toAccountFilter: PropTypes.string,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormControl, FormInModal, useDictionary } from '../sbadmin2';\nimport { useFormData } from '../sbadmin2/utilities/useFormData';\n\nexport function AccountModal({ init, ...props }) {\n  const { accounts } = useDictionary();\n  const formData = useFormData({\n    name: { $init: init.name },\n  });\n  return (\n    <FormInModal formData={formData} {...props}>\n      <FormControl\n        label={accounts.modal.labels.name}\n        inline={10}\n        formData={formData.name}\n        feedback=\"Provide name\"\n      />\n    </FormInModal>\n  );\n}\n\nAccountModal.propTypes = {\n  init: PropTypes.shape({ name: PropTypes.string }).isRequired,\n};\n","import React from 'react';\n\nimport CreateButton from '../common/CreateButton';\nimport { useCreateAccount } from '../gql/accounts';\nimport { OpenModalButton } from '../sbadmin2';\nimport { useDictionary } from '../sbadmin2';\nimport { AccountModal } from './AccountModal';\n\nexport function CreateAccountButton() {\n  const [createAccount] = useCreateAccount();\n  const { accounts } = useDictionary();\n  return (\n    <OpenModalButton\n      button={props => <CreateButton {...props} />}\n      modalContent={props => (\n        <AccountModal\n          init={{ name: '' }}\n          title={accounts.modal.createTitle}\n          onSave={createAccount}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n","import './UpdateAccountButton.css';\n\nimport { faEdit } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useUpdateAccount } from '../gql/accounts';\nimport { IconButton, OpenModalButton, useDictionary } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\nimport { AccountModal } from './AccountModal';\n\nexport function UpdateAccountButton({ account }) {\n  const [updateAccount] = useUpdateAccount();\n  const { accounts } = useDictionary();\n  return (\n    <OpenModalButton\n      button={props => (\n        <IconButton\n          className='accounts__update-button'\n          icon={faEdit}\n          variant={Variant.primary}\n          borderless\n          {...props}\n        />\n      )}\n      modalContent={props => (\n        <AccountModal\n          init={account}\n          title={accounts.modal.editTitle}\n          onSave={input => updateAccount(account.id, input)}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nUpdateAccountButton.propTypes = {\n  account: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n  }),\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useGetAccounts } from '../gql/accounts';\nimport { QueryTablePanel } from '../gql/QueryTablePanel';\nimport Amount from '../../model/Amount';\nimport { CreateAccountButton } from './CreateAccountButton';\nimport { UpdateAccountButton } from './UpdateAccountButton';\n\nconst columns = [\n  { dataField: 'name', sort: true },\n  {\n    dataField: 'balance',\n    align: 'right',\n    headerAlign: 'right',\n    formatter: Amount.format,\n  },\n  {\n    dataField: 'actions',\n    isDummyColumn: true,\n    formatter: (cell, row) => (\n      <span>\n        <UpdateAccountButton account={row} />\n        <span style={{ cursor: 'pointer' }}>\n          <i className=\"fas fa-archive fa-fw\" />\n        </span>\n      </span>\n    ),\n    style: {\n      whiteSpace: 'nowrap',\n      width: '1%',\n    },\n  },\n];\n\nconst defaultSorted = [\n  {\n    dataField: 'name',\n    order: 'asc',\n  },\n];\n\nexport function AccountsTablePanel({ onSelectAcount }) {\n  const query = useGetAccounts();\n\n  const selectRow = {\n    mode: 'radio',\n    clickToSelect: true,\n    hideSelectColumn: true,\n    classes: 'text-white bg-primary selected',\n    onSelect: account => onSelectAcount(account),\n  };\n\n  return (\n    <QueryTablePanel\n      query={query}\n      getData={data => data.accounts}\n      buttons={<CreateAccountButton />}\n      columns={columns}\n      keyField=\"id\"\n      readTitle={d => d.accounts.table.title}\n      readColumnNames={d => d.accounts.table.columns}\n      selectRow={selectRow}\n      defaultSorted={defaultSorted}\n    />\n  );\n}\n\nAccountsTablePanel.propTypes = {\n  onSelectAcount: PropTypes.func.isRequired,\n  selectedAccountID: PropTypes.string,\n};\n","import './CollapsiblePanel.css';\n\nimport { faChevronDown, faChevronUp } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { createContext, useContext, useState } from 'react';\nimport { Collapse } from 'react-bootstrap';\n\nimport Panel from '../sbadmin2/components/Panel/Panel';\n\nconst CollapsibleContext = createContext();\n\nexport function CollapsiblePanel({ initialyShown, ...props }) {\n  const [show, setShow] = useState(initialyShown);\n  return (\n    <CollapsibleContext.Provider\n      value={{ show, toggle: () => setShow(s => !s) }}\n    >\n      <Panel {...props} />\n    </CollapsibleContext.Provider>\n  );\n}\n\nCollapsiblePanel.propTypes = {\n  initialyShown: PropTypes.bool,\n};\nCollapsiblePanel.defaultProps = {\n  initialyShown: false,\n};\n\nfunction CollapsiblePanelHeader({ className, ...props }) {\n  const { toggle } = useContext(CollapsibleContext);\n  const classNames = classnames('collapsible-panel__header', className);\n  return (\n    <Panel.Header onClick={() => toggle()} className={classNames} {...props} />\n  );\n}\nCollapsiblePanelHeader.propTypes = {\n  className: PropTypes.string,\n};\nCollapsiblePanel.Header = CollapsiblePanelHeader;\n\nfunction CollapsiblePanelTitle({ children, ...props }) {\n  const { show } = useContext(CollapsibleContext);\n  return (\n    <Panel.Title {...props}>\n      <span className='text-secondary mr-2'>\n        <FontAwesomeIcon icon={show ? faChevronUp : faChevronDown} />\n      </span>\n      {children}\n    </Panel.Title>\n  );\n}\nCollapsiblePanelTitle.propTypes = {\n  children: PropTypes.node,\n};\nCollapsiblePanel.Title = CollapsiblePanelTitle;\n\nfunction CollapsiblePanelBody(props) {\n  const { show } = useContext(CollapsibleContext);\n  return (\n    <Collapse in={show}>\n      <Panel.Body {...props} />\n    </Collapse>\n  );\n}\nCollapsiblePanel.Body = CollapsiblePanelBody;\n","import React, { useState } from 'react';\nimport { Col, Row } from 'react-bootstrap';\n\nimport { CreateExpenseButton } from '../Expenses/CreateExpenseButton';\nimport { ExpensesTablePanel } from '../Expenses/ExpensesTablePanel';\nimport { Page } from '../sbadmin2';\nimport { CreateTransferButton } from '../Transfers/CreateTransferButton';\nimport { TransfersTablePanel } from '../Transfers/TransfersTablePanel';\nimport { AccountsTablePanel } from './AccountsTablePanel';\nimport { CollapsiblePanel } from './CollapsiblePanel';\n\nexport default function AccountsPage() {\n  const [selectedAccount, setSelectedAccount] = useState(null);\n\n  return (\n    <Page>\n      <Page.Header readTitle={d => d.sidebar.pages.accounts} />\n      <Row>\n        <Col sm={5}>\n          <AccountsTablePanel onSelectAcount={a => setSelectedAccount(a)} />\n        </Col>\n        <Col>\n          {!selectedAccount ? null : (\n            <>\n              <h3>{selectedAccount.name}</h3>\n              <TransfersTablePanel\n                readTitle={d => d.accounts.inTransfersTableTitle}\n                createButton={\n                  <CreateTransferButton toAccount={selectedAccount} />\n                }\n                accountFilter={selectedAccount.id}\n                hiddenColumns={['toAccount']}\n                wrapper={CollapsiblePanel}\n                toAccountFilter={selectedAccount.id}\n              />\n              <TransfersTablePanel\n                readTitle={d => d.accounts.outTransfersTableTitle}\n                createButton={\n                  <CreateTransferButton fromAccount={selectedAccount} />\n                }\n                accountFilter={selectedAccount.id}\n                hiddenColumns={['fromAccount']}\n                wrapper={CollapsiblePanel}\n                fromAccountFilter={selectedAccount.id}\n              />\n              <ExpensesTablePanel\n                readTitle={d => d.accounts.expensesTableTitle}\n                createButton={<CreateExpenseButton account={selectedAccount} />}\n                accountFilter={selectedAccount.id}\n                hiddenColumns={['account']}\n                wrapper={CollapsiblePanel}\n                wrapperProps={{ initialyShown: true }}\n              />\n            </>\n          )}\n        </Col>\n      </Row>\n    </Page>\n  );\n}\n","import React, { useState } from 'react';\nimport { Form, Row } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { FormControl } from './FormControl';\n\nexport function OptionalFormControl({\n  initEnabled,\n  label,\n  inline,\n  formData,\n  ...props\n}) {\n  const [enabled, setEnabled] = useState(initEnabled);\n  const toggleEnabled = () => setEnabled(v => !v);\n  return (\n    <Form.Group className=\"mb-3\" as={!!inline && Row}>\n      <Form.Label column={!!inline}>\n        <Form.Check custom type=\"switch\">\n          <Form.Check.Input checked={enabled} onChange={toggleEnabled} />\n          <Form.Check.Label onClick={toggleEnabled}>{label}</Form.Check.Label>\n        </Form.Check>\n      </Form.Label>\n      {enabled && (\n        <FormControl.Input\n          autoFocus\n          formData={formData}\n          inline={inline}\n          {...props}\n        />\n      )}\n    </Form.Group>\n  );\n}\n\nOptionalFormControl.propTypes = {\n  initEnabled: PropTypes.bool,\n  formData: PropTypes.shape({ current: PropTypes.any, init: PropTypes.any }),\n  feedback: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  inline: PropTypes.number,\n};\n\nOptionalFormControl.defaultProps = {\n  inline: 0,\n};\n","import PropTypes from 'prop-types';\n\nexport const Amount = PropTypes.number;\n\nexport const Account = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n});\n\nexport const Expense = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  date: PropTypes.string,\n  totalBalance: Amount.isRequired,\n  location: PropTypes.string,\n  account: Account,\n});\n\nexport const Envelope = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n});\n\nexport const Category = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  envelope: Envelope,\n});\n","import React from 'react';\nimport Amount from '../../model/Amount';\nimport { FormControl } from '../sbadmin2/utilities/FormControl';\nimport { OptionalFormControl } from '../sbadmin2/utilities/OptionalFormControl';\nimport { FormInModal } from '../sbadmin2/utilities/FormInModal';\nimport { useFormData } from '../sbadmin2/utilities/useFormData';\nimport PropTypes from 'prop-types';\nimport * as model from '../../model/propTypes';\nimport { useDictionary } from '../sbadmin2/language';\n\nexport function EnvelopeModal({ init, ...props }) {\n  const { envelopes } = useDictionary();\n  const formData = useFormData({\n    name: { $init: init.name },\n    limit: { $init: Amount.format(init.limit, false), $process: Amount.parse },\n  });\n  return (\n    <FormInModal formData={formData} {...props}>\n      <FormControl\n        label={envelopes.modal.labels.name}\n        inline={9}\n        feedback=\"Provide a name for the envelope\"\n        required\n        formData={formData.name}\n      />\n      <OptionalFormControl\n        initEnabled={!!init.limit}\n        inline={9}\n        label={envelopes.modal.labels.limit}\n        feedback=\"Provide a limit for the envelope\"\n        type=\"number\"\n        required\n        formData={formData.limit}\n        step=\"0.01\"\n      />\n    </FormInModal>\n  );\n}\n\nEnvelopeModal.propTypes = {\n  init: PropTypes.shape({\n    name: PropTypes.string,\n    limit: model.Amount,\n  }).isRequired,\n  onSave: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport CreateButton from '../common/CreateButton';\nimport { useCreateEnvelope } from '../gql/envelopes';\nimport { OpenModalButton } from '../sbadmin2';\nimport { useDictionary } from '../sbadmin2/language';\nimport { EnvelopeModal } from './EnvelopeModal';\n\nexport function CreateEnvelopeButton({ onClickRef }) {\n  const [createEnvelope] = useCreateEnvelope();\n  const { envelopes } = useDictionary();\n  return (\n    <OpenModalButton\n      onClickRef={onClickRef}\n      button={props => <CreateButton {...props} />}\n      modalContent={props => (\n        <EnvelopeModal\n          title={envelopes.modal.createTitle}\n          init={{ name: '', limit: null }}\n          onSave={createEnvelope}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nCreateEnvelopeButton.propTypes = {\n  onClickRef: PropTypes.shape({ current: PropTypes.any }),\n};\n","import { faEdit } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useUpdateEnvelope } from '../gql/envelopes';\nimport { IconButton, OpenModalButton, useDictionary } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\nimport { EnvelopeModal } from './EnvelopeModal';\n\nexport function UpdateEnvelopeButton({ envelope }) {\n  const [updateEnvelope] = useUpdateEnvelope();\n  const { envelopes } = useDictionary();\n\n  const onSave = input => {\n    updateEnvelope(envelope.id, input);\n  };\n  return (\n    <OpenModalButton\n      button={props => (\n        <IconButton\n          icon={faEdit}\n          variant={Variant.primary}\n          borderless\n          {...props}\n        />\n      )}\n      modalContent={props => (\n        <EnvelopeModal\n          title={envelopes.modal.editTitle}\n          init={envelope}\n          onSave={onSave}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nUpdateEnvelopeButton.propTypes = {\n  envelope: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n  }),\n};\n","import { faArchive } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react';\n\nimport Amount from '../../model/Amount';\nimport { useGetEnvelopes } from '../gql/envelopes';\nimport { QueryTablePanel } from '../gql/QueryTablePanel';\nimport { IconButton } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\nimport { CreateEnvelopeButton } from './CreateEnvelopeButton';\nimport { UpdateEnvelopeButton } from './UpdateEnvelopeButton';\n\nconst columns = [\n  { dataField: 'name', sort: true },\n  {\n    dataField: 'limit',\n    formatter: Amount.format,\n    align: 'right',\n    headerAlign: 'right',\n  },\n  {\n    dataField: 'balance',\n    formatter: Amount.format,\n    align: 'right',\n    headerAlign: 'right',\n  },\n  {\n    dataField: 'overLimit',\n    align: 'right',\n    headerAlign: 'right',\n    formatter: (cell, row) =>\n      row.limit !== null && row.limit < row.balance\n        ? Amount.format(row.balance - row.limit)\n        : '',\n  },\n  {\n    dataField: 'actions',\n    isDummyColumn: true,\n    formatter: (cell, row) => (\n      <span>\n        <UpdateEnvelopeButton envelope={row} />\n        <IconButton icon={faArchive} variant={Variant.secondary} borderless />\n      </span>\n    ),\n    style: {\n      whiteSpace: 'nowrap',\n      width: '1%',\n    },\n  },\n];\n\nconst defaultSorted = [\n  {\n    dataField: 'name',\n    order: 'asc',\n  },\n];\n\nexport function EnvelopesListPanel() {\n  const query = useGetEnvelopes();\n  return (\n    <QueryTablePanel\n      query={query}\n      buttons={<CreateEnvelopeButton />}\n      getData={data => data.envelopes}\n      columns={columns}\n      keyField='id'\n      readTitle={d => d.envelopes.table.title}\n      readColumnNames={d => d.envelopes.table.columns}\n      defaultSorted={defaultSorted}\n    />\n  );\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useGetEnvelopes } from '../gql/envelopes';\nimport { WithQuery } from '../gql/WithQuery';\nimport { Combobox } from '../sbadmin2';\nimport { useDictionary } from '../sbadmin2/language';\nimport { FormControl } from '../sbadmin2/utilities/FormControl';\nimport { FormInModal } from '../sbadmin2/utilities/FormInModal';\nimport { InlineFormControl } from '../sbadmin2/utilities/InlineFormControl';\nimport { useFormData } from '../sbadmin2/utilities/useFormData';\n\nexport function CategoryModal({ init, ...props }) {\n  const query = useGetEnvelopes();\n  const { categories } = useDictionary();\n  const formData = useFormData({\n    name: { $init: init.name },\n    envelopeID: {\n      $init: init.envelope.id,\n    },\n    description: { $init: init.description },\n  });\n  return (\n    <FormInModal formData={formData} {...props}>\n      <WithQuery query={query}>\n        {({ data }) => (\n          <>\n            <FormControl\n              label={categories.modal.labels.name}\n              inline={9}\n              formData={formData.name}\n              feedback='Provide name'\n            />\n            <InlineFormControl\n              size={9}\n              label={categories.modal.labels.envelope}\n            >\n              <Combobox\n                allowedValues={data.envelopes.map(({ id, name }) => ({\n                  id,\n                  label: name,\n                }))}\n                _ref={formData.envelopeID}\n                defaultValue={formData.envelopeID.default()}\n              />\n            </InlineFormControl>\n            <FormControl\n              label={categories.modal.labels.description}\n              inline={9}\n              formData={formData.description}\n              feedback='Provide description'\n            />\n          </>\n        )}\n      </WithQuery>\n    </FormInModal>\n  );\n}\n\nCategoryModal.propTypes = {\n  envelope: PropTypes.shape({\n    id: PropTypes.string,\n  }).isRequired,\n  id: PropTypes.string,\n  init: PropTypes.shape({\n    name: PropTypes.string,\n    envelope: PropTypes.shape({\n      id: PropTypes.string,\n    }).isRequired,\n    description: PropTypes.string,\n  }),\n  name: PropTypes.string,\n  onSave: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport CreateButton from '../common/CreateButton';\nimport { useCreateCategory } from '../gql/categories';\nimport { OpenModalButton } from '../sbadmin2';\nimport { useDictionary } from '../sbadmin2/language';\nimport { CategoryModal } from './CategoryModal';\n\nexport function CreateCategoryButton({ onClickRef }) {\n  const [createCategory] = useCreateCategory();\n  const { categories } = useDictionary();\n  return (\n    <OpenModalButton\n      onClickRef={onClickRef}\n      button={props => <CreateButton {...props} />}\n      modalContent={props => (\n        <CategoryModal\n          title={categories.modal.createTitle}\n          init={{ name: '', envelope: { id: null }, description: '' }}\n          onSave={createCategory}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nCreateCategoryButton.propTypes = {\n  onClickRef: PropTypes.shape({ current: PropTypes.any }),\n};\n","import { faEdit } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useUpdateCategory } from '../gql/categories';\nimport { IconButton, OpenModalButton, useDictionary } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\nimport { CategoryModal } from './CategoryModal';\n\nexport function UpdateCategoryButton({ category }) {\n  const [updateEnvelope] = useUpdateCategory();\n  const { categories } = useDictionary();\n  const onSave = input => {\n    updateEnvelope(category.id, input);\n  };\n  return (\n    <OpenModalButton\n      button={props => (\n        <IconButton\n          icon={faEdit}\n          variant={Variant.primary}\n          {...props}\n          borderless\n        />\n      )}\n      modalContent={props => (\n        <CategoryModal\n          title={categories.modal.editTitle}\n          init={category}\n          onSave={onSave}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nUpdateCategoryButton.propTypes = {\n  category: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n  }),\n};\n","import { faArchive } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react';\n\nimport { useGetCategories } from '../gql/categories';\nimport { QueryTablePanel } from '../gql/QueryTablePanel';\nimport { IconButton } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\nimport { CreateCategoryButton } from './CreateCategoryButton';\nimport { UpdateCategoryButton } from './UpdateCategoryButton';\n\nconst columns = [\n  { dataField: 'name', sort: true },\n  {\n    dataField: 'envelope',\n    formatter: a => a.name,\n    sort: true,\n  },\n  { dataField: 'description' },\n  {\n    dataField: 'actions',\n    isDummyColumn: true,\n    formatter: (cell, row) => (\n      <span>\n        <UpdateCategoryButton category={row} />\n        <IconButton icon={faArchive} variant={Variant.secondary} borderless />\n      </span>\n    ),\n    style: {\n      whiteSpace: 'nowrap',\n      width: '1%',\n    },\n  },\n];\n\nconst defaultSorted = [\n  {\n    dataField: 'name',\n    order: 'asc',\n  },\n];\n\nexport function CategoriesListPanel() {\n  const query = useGetCategories();\n  return (\n    <QueryTablePanel\n      keyField='id'\n      columns={columns}\n      buttons={<CreateCategoryButton />}\n      query={query}\n      getData={data => data.categories}\n      readTitle={d => d.categories.table.title}\n      readColumnNames={d => d.categories.table.columns}\n      defaultSorted={defaultSorted}\n    />\n  );\n}\n","import React, { useRef } from 'react';\nimport { Page } from '../sbadmin2';\nimport { EnvelopesListPanel } from './EnvelopesListPanel';\nimport { CategoriesListPanel } from '../Categories/CategoriesListPanel';\nimport { GlobalHotKeys } from 'react-hotkeys';\n\nconst keyMap = {\n  createEnvelope: 'e',\n  createCategory: 'c',\n};\n\nconst handlers = (createEnvelopeFunRef, createCategoryFunRef) => ({\n  createEnvelope: () => createEnvelopeFunRef.current(),\n  createCategory: () => createCategoryFunRef.current(),\n});\n\nexport default function EnvelopesPage() {\n  const createEnvelopeFunRef = useRef();\n  const createCategoryFunRef = useRef();\n  return (\n    <Page>\n      <GlobalHotKeys\n        keyMap={keyMap}\n        handlers={handlers(createEnvelopeFunRef, createCategoryFunRef)}\n      />\n      <Page.Header readTitle={d => d.sidebar.pages.envelopes} />\n      <EnvelopesListPanel createFunRef={createEnvelopeFunRef} />\n      <CategoriesListPanel createFunRef={createCategoryFunRef} />\n    </Page>\n  );\n}\n","import './ContextSwitcher.css';\n\nimport classNames from 'classnames';\nimport classnames from 'classnames';\nimport React, { forwardRef } from 'react';\nimport { Button, ButtonGroup, Dropdown, InputGroup } from 'react-bootstrap';\n\nexport default function ContextSwitcher({\n  className,\n  allowedValues,\n  onChange,\n  label,\n  value,\n  variant,\n  displayBg = 'light',\n  labelBg,\n  showLabel = true,\n  size,\n}) {\n  const labelClasses = classnames('border-0', { [`bg-${labelBg}`]: labelBg });\n\n  return (\n    <Dropdown\n      className={classNames(\n        'context-switcher',\n        'input-group',\n        'align-items-stretch',\n        className,\n        { [`input-group-${size}`]: size }\n      )}\n    >\n      {showLabel && (\n        <InputGroup.Prepend className='context-switcher__label d-flex align-items-stretch'>\n          <InputGroup.Text as='label' className={classnames(labelClasses)}>\n            {label}\n          </InputGroup.Text>\n        </InputGroup.Prepend>\n      )}\n\n      <Dropdown.Toggle as={Toggle} append={showLabel} size={size}>\n        {({ className, ...props }) => (\n          <>\n            <Dropdown.Menu>\n              {allowedValues.map(v => (\n                <Dropdown.Item onClick={() => onChange(v.id)} key={v.id}>\n                  {v.label}\n                </Dropdown.Item>\n              ))}\n            </Dropdown.Menu>\n            <InputGroup.Text\n              className={`bg-${displayBg} border-0 context_switcher__context-display text-dark`}\n              aria-label={label}\n            >\n              {value}\n            </InputGroup.Text>\n            <Button\n              variant={variant}\n              className={classNames(\n                'dropdown-toggle-split no-arrow ',\n                className\n              )}\n              {...props}\n            />\n          </>\n        )}\n      </Dropdown.Toggle>\n    </Dropdown>\n  );\n}\n\nconst Toggle = forwardRef(({ children, append, size, ...props }, ref) => {\n  return (\n    <ButtonGroup\n      className={classnames('context-switcher__toggle-group', {\n        'input-group-append': append,\n        [`btn-group-${size}`]: size,\n      })}\n      ref={ref}\n    >\n      {children(props)}\n    </ButtonGroup>\n  );\n});\n","import { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport React from 'react';\n\nimport Month from '../../model/Month';\nimport { useMonth } from '../context/Month';\nimport { useBudget } from '../gql/budget';\nimport { useDictionary } from '../sbadmin2';\nimport ContextSwitcher from '../sbadmin2/components/ContextSwitcher/ContextSwitcher';\nimport Spinner from '../sbadmin2/utilities/Spinner';\n\nconst GET_AVAILABLE_REPORTS = gql`\n  query availableReports($budgetID: ID!) {\n    availableReports(budgetID: $budgetID)\n  }\n`;\n\nexport default function MonthSwitcher(props) {\n  const { selectedBudget } = useBudget();\n  const { selectedMonth, setSelectedMonth } = useMonth();\n  const { months } = useDictionary();\n  const { loading, error, data } = useQuery(GET_AVAILABLE_REPORTS, {\n    variables: {\n      budgetID: selectedBudget.id,\n    },\n  });\n\n  let value;\n  let allowedValues = [];\n  if (loading) {\n    value = <Spinner size='sm' variant='secondary' />;\n  } else if (error) {\n    value = <i className='fas fa-fw fa-exclamation-triangle text-secondary' />;\n  } else {\n    allowedValues = data.availableReports\n      .sort()\n      .reverse()\n      .map(m => {\n        const parsed = Month.parse(m);\n        const label = `${months[parsed.month - 1]} ${parsed.year}`;\n        return { id: m, label };\n      });\n\n    const parsed = Month.parse(selectedMonth);\n    value = `${months[parsed.month - 1]} ${parsed.year}`;\n  }\n  return (\n    <ContextSwitcher\n      {...props}\n      value={value}\n      allowedValues={allowedValues}\n      onChange={month => setSelectedMonth(month)}\n      displayBg='white'\n      label='Month'\n      showLabel={false}\n      variant='secondary'\n      size='sm'\n    />\n  );\n}\n","import React from 'react';\n\nimport MonthSwitcher from '../common/MonthSwitcher';\nimport { Page } from '../sbadmin2';\nimport { CreateExpenseButton } from './CreateExpenseButton';\nimport { ExpensesTablePanel } from './ExpensesTablePanel';\n\nexport default function ExpensesPage() {\n  return (\n    <Page>\n      <Page.Header readTitle={d => d.sidebar.pages.expenses}>\n        <MonthSwitcher />\n      </Page.Header>\n      <ExpensesTablePanel\n        readTitle={d => d.expenses.table.title}\n        createButton={<CreateExpenseButton />}\n      />\n    </Page>\n  );\n}\n","import { faClipboardCheck } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useCloseCurrentMonth } from '../gql/budget';\nimport { SplitButton, useDictionary } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\n\nexport function StartNextMonthButton({ disabled, warn }) {\n  const [closeCurrentMonth] = useCloseCurrentMonth();\n  const { dashboard } = useDictionary();\n  return (\n    <SplitButton\n      icon={faClipboardCheck}\n      variant={\n        disabled ? Variant.secondary : warn ? Variant.warning : Variant.success\n      }\n      disabled={disabled}\n      onClick={() => closeCurrentMonth()}\n    >\n      {dashboard.buttons.closeMonth}\n    </SplitButton>\n  );\n}\n\nStartNextMonthButton.propTypes = {\n  disabled: PropTypes.bool,\n  warn: PropTypes.bool,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Month from '../../model/Month';\nimport { Panel, useDictionary } from '../sbadmin2';\nimport { StartNextMonthButton } from './StartNextMonthButton';\n\nexport function CurrentMonth({ className, month }) {\n  const { dashboard, months } = useDictionary();\n  const parsed = Month.parse(month.month);\n  return (\n    <Panel className={className}>\n      <Panel.Header>\n        <div className='d-flex justify-content-between align-items-center'>\n          <Panel.Title\n            title={\n              <span>\n                {dashboard.currentMonth}:{' '}\n                <strong>\n                  <em>\n                    {months[parsed.month - 1]} {parsed.year}\n                  </em>\n                </strong>\n              </span>\n            }\n          />\n          <div>\n            <StartNextMonthButton\n              disabled={month.problems.some(p => p.severity === 'ERROR')}\n              warn={month.problems.length > 0}\n            />\n          </div>\n        </div>\n      </Panel.Header>\n    </Panel>\n  );\n}\n\nCurrentMonth.propTypes = {\n  className: PropTypes.string,\n  month: PropTypes.shape({\n    month: PropTypes.string.isRequired,\n    problems: PropTypes.arrayOf(\n      PropTypes.shape({ severity: PropTypes.string.isRequired })\n    ).isRequired,\n  }),\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { Variant } from './bootstrap';\n\nexport function Gauge({ className, variant, title, value, faIcon }) {\n  return (\n    <div className={className}>\n      <div className={`card border-left-${variant} shadow h-100 py-2`}>\n        <div className='card-body'>\n          <div className='row no-gutters align-items-center'>\n            <div className='col mr-2'>\n              <div\n                className={`text-xs font-weight-bold text-${variant} text-uppercase mb-1`}\n              >\n                {title}\n              </div>\n              <div className='h5 mb-0 font-weight-bold text-gray-800'>\n                {value}\n              </div>\n            </div>\n            <div className='col-auto'>\n              <i className={`fas fa-${faIcon} fa-2x text-gray-300`} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nGauge.propTypes = {\n  className: PropTypes.string.isRequired,\n  faIcon: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  variant: PropTypes.PropTypes.oneOf(Object.keys(Variant)),\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Row } from 'react-bootstrap';\n\nimport Amount from '../../model/Amount';\nimport { useDictionary } from '../sbadmin2';\nimport { Gauge } from '../sbadmin2/Gauge';\n\nexport function Gauges({ className, month }) {\n  const { dashboard } = useDictionary();\n  return (\n    <div className={className}>\n      <Row>\n        <Gauge\n          className='col-6 col-lg-12 mb-4'\n          variant='primary'\n          title={dashboard.planned}\n          value={Amount.format(month.totalPlannedAmount)}\n          faIcon='clipboard-list'\n        />\n        <Gauge\n          className='col-6 col-lg-12 mb-4'\n          variant='primary'\n          title={dashboard.incomes}\n          value={Amount.format(month.totalIncomeAmount)}\n          faIcon='briefcase'\n        />\n        <Gauge\n          className='col-6 col-lg-12 mb-4'\n          variant='primary'\n          title={dashboard.leftToPlan}\n          value={Amount.format(\n            month.totalIncomeAmount - month.totalPlannedAmount\n          )}\n          faIcon='balance-scale'\n        />\n        <Gauge\n          className='col-6 col-lg-12 mb-4'\n          variant='primary'\n          title={dashboard.expenses}\n          value={Amount.format(month.totalExpenseAmount)}\n          faIcon='receipt'\n        />\n      </Row>\n    </div>\n  );\n}\n\nGauges.propTypes = {\n  className: PropTypes.string,\n  month: PropTypes.shape({\n    totalPlannedAmount: PropTypes.number,\n    totalIncomeAmount: PropTypes.number,\n    totalExpenseAmount: PropTypes.number,\n  }),\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useGetAccounts } from '../gql/accounts';\nimport { useGetEnvelopes } from '../gql/envelopes';\nimport { WithQuery } from '../gql/WithQuery';\nimport { Panel, useDictionary } from '../sbadmin2';\n\nconst severityVariant = {\n  ERROR: 'danger',\n  WARNING: 'warning',\n  INFO: 'primary',\n};\n\nconst severityIcon = {\n  ERROR: 'exclamation-circle',\n  WARNING: 'exclamation-triangle',\n  INFO: 'info-circle',\n};\n\nexport function MonthProblems({ className, problems }) {\n  return (\n    <Panel className={className}>\n      <Panel.Header>\n        <div className='d-flex justify-content-between align-items-center'>\n          <Panel.Title readTitle={d => d.dashboard.problems.title} />\n        </div>\n      </Panel.Header>\n      <Panel.Body>\n        <ul className='list-group list-group-flush'>\n          {problems.length > 0 ? (\n            problems.map((problem, idx) => (\n              <Problem key={idx} problem={problem} />\n            ))\n          ) : (\n            <NoProblems />\n          )}\n        </ul>\n      </Panel.Body>\n    </Panel>\n  );\n}\n\nMonthProblems.propTypes = {\n  className: PropTypes.string,\n  problems: PropTypes.array.isRequired,\n};\n\nfunction NoProblems() {\n  const { dashboard } = useDictionary();\n  return (\n    <li className='list-group-item text-success'>\n      <i className='fas fa-fw fa-check-circle mr-1' />\n      {dashboard.noProblems}\n    </li>\n  );\n}\n\nfunction Problem({ problem }) {\n  return (\n    <li className={`list-group-item text-${severityVariant[problem.severity]}`}>\n      <i className={`fas fa-fw fa-${severityIcon[problem.severity]} mr-1`} />\n      <ProblemMessage problem={problem} />\n    </li>\n  );\n}\n\nProblem.propTypes = {\n  problem: PropTypes.shape({\n    severity: PropTypes.oneOf(Object.keys(severityVariant)),\n  }),\n};\n\nfunction ProblemMessage({ problem }) {\n  const envelopesQuery = useGetEnvelopes();\n  const accountsQuery = useGetAccounts();\n  const { dashboard } = useDictionary();\n\n  return (\n    <WithQuery query={envelopesQuery}>\n      {({ data: envelopesData }) => (\n        <WithQuery query={accountsQuery}>\n          {({ data: accountsData }) =>\n            problem.__typename === 'Misplanned'\n              ? problem.overplanned\n                ? dashboard.problems.overplanned\n                : dashboard.problems.underplanned\n              : problem.__typename === 'NegativeBalanceOnEnvelope'\n              ? dashboard.problems.expensesExceedPlans(\n                  envelopesData.envelopes.find(e => e.id === problem.id).name\n                )\n              : problem.__typename === 'EnvelopeOverLimit'\n              ? dashboard.problems.envelopeOverLimit(\n                  envelopesData.envelopes.find(e => e.id === problem.id).name\n                )\n              : problem.__typename === 'NegativeBalanceOnAccount'\n              ? dashboard.problems.negativeAccountBalance(\n                  accountsData.accounts.find(a => a.id === problem.id).name\n                )\n              : problem.__typename === 'MonthStillInProgress'\n              ? dashboard.problems.monthNotEnded\n              : problem.__typename\n          }\n        </WithQuery>\n      )}\n    </WithQuery>\n  );\n}\n\nProblemMessage.propTypes = {\n  problem: PropTypes.shape({\n    __typename: PropTypes.string.isRequired,\n    id: PropTypes.any,\n    overplanned: PropTypes.bool,\n  }),\n};\n","import React from 'react';\nimport { Row } from 'react-bootstrap';\n\nimport { useMonth } from '../context/Month';\nimport { useGetMonthlyReport } from '../gql/monthlyReport';\nimport { WithQuery } from '../gql/WithQuery';\nimport { Page } from '../sbadmin2';\nimport { CurrentMonth } from './CurrentMonth';\nimport { Gauges } from './Gauges';\nimport { MonthProblems } from './MonthProblems';\n\nexport function MonthDashboardPage() {\n  const { currentMonth } = useMonth();\n  const query = useGetMonthlyReport(currentMonth);\n  return (\n    <Page>\n      <WithQuery query={query}>\n        {({ data }) => (\n          <Row>\n            <CurrentMonth\n              className='col-12 d-lg-none px-0'\n              month={data.monthlyReport}\n            />\n            <Gauges className='col-12 col-lg-3' month={data.monthlyReport} />\n            <MonthProblems\n              className='col-12 d-lg-none px-0'\n              problems={data.monthlyReport.problems}\n            />\n            <Row className='col-12 col-lg-9 flex-lg-column'>\n              <CurrentMonth\n                className='d-none d-lg-block'\n                month={data.monthlyReport}\n              />\n              <MonthProblems\n                className='d-none d-lg-block flex-grow-1'\n                problems={data.monthlyReport.problems}\n              />\n            </Row>\n          </Row>\n        )}\n      </WithQuery>\n    </Page>\n  );\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Amount from '../../model/Amount';\nimport { AmountInput } from '../Expenses/AmountInput';\nimport { useGetEnvelopes } from '../gql/envelopes';\nimport { WithQuery } from '../gql/WithQuery';\nimport { Combobox, useDictionary } from '../sbadmin2';\nimport { FormControl } from '../sbadmin2/utilities/FormControl';\nimport { FormInModal } from '../sbadmin2/utilities/FormInModal';\nimport { InlineFormControl } from '../sbadmin2/utilities/InlineFormControl';\nimport { OptionalFormControl } from '../sbadmin2/utilities/OptionalFormControl';\nimport { useFormData } from '../sbadmin2/utilities/useFormData';\n\nexport function PlanModal({ init, ...props }) {\n  const query = useGetEnvelopes();\n  const { plans } = useDictionary();\n  const formData = useFormData({\n    title: { $init: init.title },\n    currentAmount: {\n      $init: Amount.format(init.currentAmount, false),\n      $process: Amount.parse,\n    },\n    recurringAmount: {\n      $init: Amount.format(init.recurringAmount, false),\n      $default: fd => Amount.format(fd.currentAmount.value()),\n      $process: Amount.parse,\n    },\n    fromEnvelopeID: {\n      $init: init.fromEnvelope !== null ? init.fromEnvelope.id : '',\n      $process: v => (v === '' ? null : v),\n    },\n    toEnvelopeID: { $init: init.toEnvelope.id },\n  });\n  return (\n    <FormInModal formData={formData} {...props}>\n      <WithQuery query={query}>\n        {({ data }) => (\n          <>\n            <FormControl\n              required\n              label={plans.modal.labels.title}\n              inline={10}\n              formData={formData.title}\n              feedback='Provide title'\n            />\n            <FormControl inline={8} label={plans.modal.labels.amount}>\n              <AmountInput formData={formData.currentAmount} />\n            </FormControl>\n            <OptionalFormControl\n              initEnabled={init.recurringAmount !== null}\n              inline={8}\n              label={plans.modal.labels.recurring}\n              feedback='Provide amount for recurring plans'\n              type='number'\n              required\n              formData={formData.recurringAmount}\n              step='0.01'\n            />\n            <InlineFormControl size={8} label={plans.modal.labels.fromEnvelope}>\n              <Combobox\n                _ref={formData.fromEnvelopeID}\n                defaultValue={formData.fromEnvelopeID.default()}\n                allowedValues={data.envelopes.map(({ id, name }) => ({\n                  id,\n                  label: name,\n                }))}\n              />\n            </InlineFormControl>\n            <InlineFormControl size={8} label={plans.modal.labels.toEnvelope}>\n              <Combobox\n                _ref={formData.toEnvelopeID}\n                defaultValue={formData.toEnvelopeID.default()}\n                allowedValues={data.envelopes.map(({ id, name }) => ({\n                  id,\n                  label: name,\n                }))}\n              />\n            </InlineFormControl>\n          </>\n        )}\n      </WithQuery>\n    </FormInModal>\n  );\n}\n\nPlanModal.propTypes = {\n  init: PropTypes.shape({\n    title: PropTypes.string,\n    currentAmount: PropTypes.number,\n    recurringAmount: PropTypes.number,\n    fromEnvelope: PropTypes.shape({ id: PropTypes.any.isRequired }),\n    toEnvelope: PropTypes.shape({ id: PropTypes.any.isRequired }),\n  }),\n};\n","import React from 'react';\n\nimport CreateButton from '../common/CreateButton';\nimport { useCreatePlan } from '../gql/plans';\nimport { OpenModalButton, useDictionary } from '../sbadmin2';\nimport { PlanModal } from './PlanModal';\n\nexport function CreatePlanButton() {\n  const [createPlan] = useCreatePlan();\n  const { plans } = useDictionary();\n  return (\n    <OpenModalButton\n      button={props => <CreateButton {...props} />}\n      modalContent={props => (\n        <PlanModal\n          init={{\n            title: null,\n            fromEnvelope: { id: null },\n            toEnvelope: { id: null },\n            currentAmount: null,\n            recurringAmount: null,\n            date: null,\n          }}\n          title={plans.modal.createTitle}\n          onSave={createPlan}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n","import { faTrash } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useDeletePlan } from '../gql/plans';\nimport { IconButton } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\n\nexport function DeletePlanButton({ plan }) {\n  const [deletePlan] = useDeletePlan();\n  return (\n    <IconButton\n      icon={faTrash}\n      variant={Variant.secondary}\n      onClick={() => deletePlan(plan.id)}\n      borderless\n    />\n  );\n}\n\nDeletePlanButton.propTypes = {\n  plan: PropTypes.shape({ id: PropTypes.any.isRequired }).isRequired,\n};\n","import { faEdit } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useUpdatePlan } from '../gql/plans';\nimport { IconButton, OpenModalButton, useDictionary } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\nimport { PlanModal } from './PlanModal';\n\nexport function UpdatePlanButton({ plan }) {\n  const [updatePlan] = useUpdatePlan();\n  const { plans } = useDictionary();\n  return (\n    <OpenModalButton\n      button={props => (\n        <IconButton\n          icon={faEdit}\n          variant={Variant.primary}\n          borderless\n          {...props}\n        />\n      )}\n      modalContent={props => (\n        <PlanModal\n          init={plan}\n          title={plans.modal.editTitle}\n          onSave={input => updatePlan(plan.id, input)}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nUpdatePlanButton.propTypes = {\n  plan: PropTypes.shape({ id: PropTypes.any.isRequired }).isRequired,\n};\n","import React from 'react';\n\nimport Amount from '../../model/Amount';\nimport { useGetCurrentPlans } from '../gql/plans';\nimport { QueryTablePanel } from '../gql/QueryTablePanel';\nimport { Page } from '../sbadmin2';\nimport { CreatePlanButton } from './CreatePlanButton';\nimport { DeletePlanButton } from './DeletePlanButton';\nimport { UpdatePlanButton } from './UpdatePlanButton';\n\nconst columns = [\n  { dataField: 'title', sort: true },\n  {\n    dataField: 'fromEnvelope',\n    sort: true,\n    sortValue: cell => (cell ? cell.name : ''),\n    formatter: a => a && a.name,\n  },\n  {\n    dataField: 'toEnvelope',\n    sort: true,\n    sortValue: cell => (cell ? cell.name : ''),\n    formatter: a => a && a.name,\n  },\n  {\n    dataField: 'currentAmount',\n    formatter: Amount.format,\n    align: 'right',\n    headerAlign: 'right',\n  },\n  {\n    dataField: 'recurringAmount',\n    formatter: a =>\n      a !== null ? <i className='fas fa-fw fa-sync-alt' /> : null,\n  },\n  {\n    dataField: 'actions',\n    isDummyColumn: true,\n    formatter: (cell, row) => (\n      <span>\n        <UpdatePlanButton plan={row} />\n        <DeletePlanButton plan={row} />\n      </span>\n    ),\n    style: {\n      whiteSpace: 'nowrap',\n      width: '1%',\n    },\n  },\n];\n\nconst defaultSorted = [\n  {\n    dataField: 'title',\n    order: 'asc',\n  },\n];\n\nexport default function PlansPage() {\n  const query = useGetCurrentPlans();\n\n  return (\n    <Page>\n      <Page.Header readTitle={d => d.sidebar.pages.plans} />\n      <QueryTablePanel\n        query={query}\n        getData={data => data.budget.currentMonth.plans}\n        buttons={<CreatePlanButton />}\n        columns={columns}\n        keyField='id'\n        readTitle={d => d.plans.table.title}\n        readColumnNames={d => d.plans.table.columns}\n        defaultSorted={defaultSorted}\n      />\n    </Page>\n  );\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nfunction TopbarContextExpanded({ renderContext }) {\n  return (\n    <form className='d-none d-sm-inline-block form-inline mr-auto ml-md-3 my-2 my-md-0 mw-100 navbar-context'>\n      {renderContext()}\n    </form>\n  );\n}\n\nTopbarContextExpanded.propTypes = {\n  renderContext: PropTypes.func.isRequired,\n};\n\nfunction TopbarContextMinimized({ faIcon, renderContext }) {\n  return (\n    <li className='nav-item dropdown no-arrow d-sm-none'>\n      <span\n        className='nav-link dropdown-toggle'\n        id='contextDropdown'\n        role='button'\n        data-toggle='dropdown'\n        aria-haspopup='true'\n        aria-expanded='false'\n        style={{ cursor: 'pointer' }}\n      >\n        <i className={`fas fa-${faIcon} fa-fw`}></i>\n      </span>\n      <div\n        className='dropdown-menu dropdown-menu-right p-3 shadow animated--grow-in'\n        aria-labelledby='contextDropdown'\n      >\n        <form className='form-inline mr-auto w-100 navbar-context'>\n          {renderContext()}\n        </form>\n      </div>\n    </li>\n  );\n}\n\nTopbarContextMinimized.propTypes = {\n  faIcon: PropTypes.string.isRequired,\n  renderContext: PropTypes.func.isRequired,\n};\n\nexport default function TopbarContext({ minified, ...props }) {\n  return minified ? (\n    <TopbarContextMinimized {...props} />\n  ) : (\n    <TopbarContextExpanded {...props} />\n  );\n}\n\nTopbarContext.propTypes = {\n  minified: PropTypes.bool,\n};\n","import './Topbar.css';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useSBAdmin2 } from '../context';\nimport TopbarContext from './TopbarContext';\n\nexport default function Topbar({\n  renderMenus,\n  renderContext,\n  renderUser,\n  faIconContextMinified,\n}) {\n  const { toggleSidebar } = useSBAdmin2();\n\n  return (\n    <nav className='navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow'>\n      <button\n        onClick={toggleSidebar}\n        className='btn btn-link d-md-none rounded-circle mr-3'\n      >\n        <i className='fa fa-bars'></i>\n      </button>\n\n      <TopbarContext minified={false} renderContext={renderContext} />\n\n      <ul className='navbar-nav ml-auto'>\n        <TopbarContext\n          minified={true}\n          renderContext={renderContext}\n          faIcon={faIconContextMinified}\n        />\n\n        {renderMenus()}\n\n        <div className='topbar-divider d-none d-sm-block' />\n\n        {renderUser()}\n      </ul>\n    </nav>\n  );\n}\n\nTopbar.propTypes = {\n  faIconContextMinified: PropTypes.string.isRequired,\n  renderContext: PropTypes.func.isRequired,\n  renderMenus: PropTypes.func.isRequired,\n  renderUser: PropTypes.func.isRequired,\n};\n","import classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nfunction TopbarMenuCounter({ counter }) {\n  const badge = counter >= 3 ? '3+' : '' + counter;\n  return (\n    counter > 0 && (\n      <span className='badge badge-danger badge-counter'>{badge}</span>\n    )\n  );\n}\n\nexport function TopbarMenu({ name, faIcon, children, counter }) {\n  const iconClasses = classnames('fas', 'fa-fw', `fa-${faIcon}`);\n  const id = `topbar--${name || faIcon}`;\n  return (\n    <li className='nav-item dropdown no-arrow mx-1'>\n      <span\n        className='nav-link dropdown-toggle'\n        id={id}\n        role='button'\n        data-toggle='dropdown'\n        aria-haspopup='true'\n        aria-expanded='false'\n        style={{ cursor: 'pointer' }}\n      >\n        <i className={iconClasses} />\n        <TopbarMenuCounter counter={counter} />\n      </span>\n      <div\n        className='dropdown-list dropdown-menu dropdown-menu-right shadow animated--grow-in'\n        aria-labelledby={id}\n      >\n        <h6 className='dropdown-header'>{name}</h6>\n        {children}\n        <span\n          className='dropdown-item text-center small text-gray-500'\n          style={{ cursor: 'pointer' }}\n        >\n          Show All\n        </span>\n      </div>\n    </li>\n  );\n}\n\nTopbarMenu.propTypes = {\n  children: PropTypes.node,\n  counter: PropTypes.number.isRequired,\n  entries: PropTypes.arrayOf(\n    PropTypes.shape({\n      highlighted: PropTypes.bool,\n      render: PropTypes.func.isRequired,\n    })\n  ),\n  faIcon: PropTypes.string,\n  highlighted: PropTypes.bool,\n  name: PropTypes.string,\n  render: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { useSBAdmin2 } from '../context';\n\nexport default function TopbarUser() {\n  const { user, logout } = useSBAdmin2();\n  return (\n    <li className=\"nav-item dropdown no-arrow\">\n      <span\n        className=\"nav-link dropdown-toggle\"\n        id=\"userDropdown\"\n        role=\"button\"\n        data-toggle=\"dropdown\"\n        aria-haspopup=\"true\"\n        aria-expanded=\"false\"\n      >\n        <span className=\"mr-2 d-none d-lg-inline text-gray-600 small\">\n          {user.name}\n        </span>\n        <img alt=\"\" className=\"img-profile rounded-circle\" src={user.picture} />\n      </span>\n      <ul\n        className=\"dropdown-menu dropdown-menu-right shadow animated--grow-in\"\n        aria-labelledby=\"userDropdown\"\n      >\n        <li className=\"dropdown-item\">\n          <i className=\"fas fa-cogs fa-sm fa-fw mr-2 text-gray-400\"></i>\n          Settings\n        </li>\n        <div className=\"dropdown-divider\"></div>\n        <li\n          className=\"dropdown-item\"\n          data-toggle=\"modal\"\n          data-target=\"#logoutModal\"\n          onClick={() => logout()}\n        >\n          <i className=\"fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400\"></i>\n          Logout\n        </li>\n      </ul>\n    </li>\n  );\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport ContextSwitcher from '../components/ContextSwitcher/ContextSwitcher';\n\nexport default function TopbarContextSwitcher({\n  label,\n  value,\n  onChange,\n  allowedValues,\n}) {\n  return (\n    <ContextSwitcher\n      label={label}\n      allowedValues={allowedValues}\n      value={value}\n      onChange={onChange}\n    />\n  );\n}\n\nTopbarContextSwitcher.propTypes = {\n  allowedValues: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      label: PropTypes.string.isRequired,\n    })\n  ),\n  label: PropTypes.any,\n  onChange: PropTypes.any,\n  value: PropTypes.any,\n};\n","import React from 'react';\n\nimport { useBudget } from './gql/budget';\nimport { useDictionary } from './sbadmin2';\nimport TopbarContextSwitcher from './sbadmin2/Topbar/TopbarContextSwitcher';\nimport Spinner from './sbadmin2/utilities/Spinner';\n\nexport default function TopbarBudgetSwitcher() {\n  const {\n    selectedBudget,\n    setSelectedBudget,\n    budgets,\n    loading,\n    error,\n  } = useBudget();\n  const { topbar } = useDictionary();\n  const value = loading ? (\n    <Spinner size='sm' variant='secondary' />\n  ) : error ? (\n    <i className='fas fa-fw fa-exclamation-triangle text-secondary' />\n  ) : (\n    selectedBudget && selectedBudget.name\n  );\n  const onChange = id => {\n    const budget = budgets.find(b => b.id === id);\n    setSelectedBudget(budget);\n  };\n  return (\n    <TopbarContextSwitcher\n      label={topbar.budgetLabel}\n      value={value}\n      onChange={onChange}\n      allowedValues={budgets.map(b => ({ id: b.id, label: b.name }))}\n    />\n  );\n}\n","import React from 'react';\nimport TemplateTopbar from './sbadmin2/Topbar/Topbar';\nimport { TopbarMenu } from './sbadmin2/Topbar/TopbarMenu';\nimport TopbarUser from './sbadmin2/Topbar/TopbarUser';\nimport TopbarBudgetSwitcher from './TopbarBudgetSwitcher';\nimport { useAuth0 } from '../react-auth0-spa';\nimport { useDictionary } from './sbadmin2/language';\n\nexport default function Topbar() {\n  const { user, logout } = useAuth0();\n  const { topbar } = useDictionary();\n  return (\n    <TemplateTopbar\n      faIconContextMinified=\"search\"\n      renderContext={() => <TopbarBudgetSwitcher />}\n      renderUser={() => (\n        <TopbarUser\n          name={user.name}\n          pictureUrl={user.picture}\n          logout={logout}\n        />\n      )}\n      renderMenus={() => (\n        <>\n          <TopbarMenu\n            name={topbar.alertsLabel}\n            faIcon=\"bell\"\n            counter={0}\n          ></TopbarMenu>\n          <TopbarMenu\n            name={topbar.messagesLabel}\n            faIcon=\"envelope\"\n            counter={0}\n          ></TopbarMenu>\n        </>\n      )}\n    />\n  );\n}\n","import React from 'react';\nimport { Page } from '../sbadmin2';\nimport { TransfersTablePanel } from './TransfersTablePanel';\nimport { CreateTransferButton } from './CreateTransferButton';\n\nexport function TransfersPage() {\n  return (\n    <Page>\n      <Page.Header readTitle={d => d.sidebar.pages.transfers} />\n      <TransfersTablePanel\n        readTitle={d => d.transfers.table.title}\n        createButton={<CreateTransferButton />}\n      />\n    </Page>\n  );\n}\n","export const sidebarConfig = ({ sidebar }) => [\n  {\n    entries: [\n      {\n        name: sidebar.pages.dashboard,\n        faIcon: 'receipt',\n        to: '/',\n      },\n    ],\n  },\n  {\n    name: sidebar.sections.currentMonth,\n    entries: [\n      {\n        name: sidebar.pages.expenses,\n        faIcon: 'receipt',\n        to: '/expenses',\n      },\n      {\n        name: sidebar.pages.transfers,\n        faIcon: 'exchange-alt',\n        to: '/transfers',\n      },\n      {\n        name: sidebar.pages.plans,\n        faIcon: 'map-marked-alt',\n        to: '/plans',\n      },\n    ],\n  },\n  {\n    name: sidebar.sections.budget,\n    entries: [\n      {\n        name: sidebar.pages.accounts,\n        faIcon: 'credit-card',\n        to: '/accounts',\n      },\n      {\n        name: sidebar.pages.envelopes,\n        faIcon: 'envelope-open-text',\n        to: '/envelopes',\n      },\n    ],\n  },\n];\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport pl from '../../lang/pl';\nimport { useAuth0 } from '../../react-auth0-spa';\nimport AccountsPage from '../Accounts/AccountsPage';\nimport { MonthProvider } from '../context/Month';\nimport Envelopes from '../Envelopes/EnvelopesPage';\nimport ExpensesPage from '../Expenses/ExpensesPage';\nimport { BudgetContext, BudgetProvider } from '../gql/budget';\nimport { MonthDashboardPage } from '../MonthDashboardPage/MonthDashboardPage';\nimport PlansPage from '../Plans/PlansPage';\nimport { SBAdmin2 } from '../sbadmin2';\nimport Topbar from '../Topbar';\nimport { TransfersPage } from '../Transfers/TransfersPage';\nimport { sidebarConfig } from './sidebarConfig';\n\nconst dictionaries = {\n  pl,\n};\n\nexport default function App() {\n  const { user, logout } = useAuth0();\n  return (\n    <BudgetProvider>\n      <SBAdmin2\n        sidebarProps={{\n          renderBrandName: () => 'Budget',\n          renderBrandIcon: () => <i className='fas fa-bold' />,\n          config: sidebarConfig(pl),\n        }}\n        topbar={Topbar}\n        copyright={'Budget 2019'}\n        dictionaries={dictionaries}\n        user={user}\n        logout={logout}\n      >\n        <BudgetContext.Consumer>\n          {({ selectedBudget }) =>\n            selectedBudget && (\n              <MonthProvider currentMonth={selectedBudget.currentMonth.month}>\n                <Switch>\n                  <Route path='/accounts' component={AccountsPage} />\n                  <Route path='/envelopes' component={Envelopes} />\n                  <Route path='/expenses' component={ExpensesPage} />\n                  <Route path='/transfers' component={TransfersPage} />\n                  <Route path='/plans' component={PlansPage} />\n                  <Route path='/' component={MonthDashboardPage} />\n                </Switch>\n              </MonthProvider>\n            )\n          }\n        </BudgetContext.Consumer>\n      </SBAdmin2>\n    </BudgetProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\n\nimport './sb-admin-2.css';\nimport './index.css';\n\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { AuthApolloProvider, createClient } from './apollo';\nimport config from './auth_config.json';\nimport App from './components/App/App';\nimport { Beta } from './components/Beta';\nimport { Auth0Context, Auth0Provider } from './react-auth0-spa';\nimport * as serviceWorker from './serviceWorker';\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = appState => {\n  window.history.replaceState(\n    {},\n    document.title,\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\nconst redirectURI = `${window.location.origin}${process.env.PUBLIC_URL}`;\n\nconst ProdAuthorizationProvider = ({ children }) => (\n  <Auth0Provider\n    domain={config.domain}\n    client_id={config.clientId}\n    redirect_uri={redirectURI}\n    onRedirectCallback={onRedirectCallback}\n    audience={config.audience}\n    scope='beta'\n    returnTo={redirectURI}\n  >\n    <AuthApolloProvider>{children}</AuthApolloProvider>\n  </Auth0Provider>\n);\n\nProdAuthorizationProvider.propTypes = {\n  children: PropTypes.node,\n};\n\nconst DevAuthorizationProvider = ({ children }) => (\n  <Auth0Context.Provider\n    value={{\n      isAuthenticated: true,\n      loading: false,\n      loginWithRedirect: () => {},\n      user: {\n        name: 'Valerie Luna',\n        picture: 'https://source.unsplash.com/QAB-WJcbgJk/60x60',\n        locale: 'pl',\n      },\n      getTokenScopes: () => Promise.resolve(['beta']),\n      logout: () => {},\n    }}\n  >\n    <ApolloProvider client={createClient()}>{children}</ApolloProvider>\n  </Auth0Context.Provider>\n);\n\nDevAuthorizationProvider.propTypes = {\n  children: PropTypes.node,\n};\n\nconst authDisabled = process.env.REACT_APP_INSECURE_AUTH_DISABLED;\nconst AuthorizationProvider =\n  authDisabled !== 'true'\n    ? ProdAuthorizationProvider\n    : DevAuthorizationProvider;\n\nReactDOM.render(\n  <AuthorizationProvider>\n    <Beta>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n      </BrowserRouter>\n    </Beta>\n  </AuthorizationProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\n\nimport { useAuth0 } from '../react-auth0-spa';\n\nexport function Beta({ children }) {\n  const { getTokenScopes } = useAuth0();\n  const [scope, setScope] = useState();\n\n  useEffect(() => {\n    getTokenScopes().then(setScope);\n  }, [setScope, getTokenScopes]);\n\n  if (!scope) {\n    return <div></div>;\n  }\n\n  const isBetaUser = scope.some(v => v === 'beta');\n\n  if (isBetaUser) {\n    return children;\n  }\n  return <div>This conent is available only to beta users</div>;\n}\n\nBeta.propTypes = {\n  children: PropTypes.node,\n};\n"],"sourceRoot":""}