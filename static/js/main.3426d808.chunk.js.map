{"version":3,"sources":["react-auth0-spa.js","apollo.js","lang/pl.js","model/Amount.js","util/immutable.js","components/gql/envelopes.js","components/gql/monthlyReport.js","components/gql/expenses.js","components/gql/plans.js","components/gql/transfers.js","components/gql/budget.js","components/gql/accounts.js","components/sbadmin2/components/Combobox/Combobox.tsx","components/sbadmin2/components/IconButton/IconButton.tsx","components/sbadmin2/components/OpenModalButton/OpenModalButton.tsx","components/sbadmin2/context.js","components/sbadmin2/language.js","util/capitalize.js","components/sbadmin2/components/Page/PageHeader.js","components/sbadmin2/components/Page/Page.js","components/sbadmin2/components/Panel/PanelTitle.js","components/sbadmin2/components/Panel/Panel.js","components/sbadmin2/components/SplitButton/SplitButton.tsx","components/sbadmin2/components/Panel/PanelHeader.js","components/sbadmin2/components/Panel/PanelBody.js","components/sbadmin2/components/Table/Table.tsx","components/sbadmin2/components/TablePanel/TablePanel.js","components/sbadmin2/NotFoundPage.js","components/sbadmin2/Sidebar/SidebarCollapsibleLink.js","components/sbadmin2/Sidebar/SidebarSimpleLink.js","components/sbadmin2/Sidebar/SidebarGroup.js","components/sbadmin2/Sidebar/Sidebar.js","components/sbadmin2/SBAdmin2.js","components/sbadmin2/utilities/FormControl.js","components/sbadmin2/bootstrap.js","components/common/CancelButton.js","components/common/SaveButton.js","components/sbadmin2/utilities/FormInModal.js","components/common/Details.jsx","components/common/RefreshButton.js","components/sbadmin2/utilities/Spinner.js","components/gql/WithQuery.js","components/gql/QueryTablePanel.js","components/common/EntityList.jsx","model/Day.js","model/Month.js","components/context/Month.jsx","components/sbadmin2/components/ContextSwitcher/ContextSwitcher.jsx","components/common/MonthSwitcher.js","components/layout/DetailsPage.jsx","components/layout/ListPage.jsx","components/workflow/ListWithDetailsWorkflow.jsx","components/common/CreateButton.js","components/sbadmin2/utilities/InlineFormControl.js","components/sbadmin2/utilities/useFormData.js","components/gql/categories.js","components/Expenses/AmountInput.js","components/Expenses/CategoriesInput.js","components/Expenses/ExpenseModal.js","components/Expenses/CreateExpenseButton.js","components/common/ListAction.jsx","components/common/ListActions.jsx","components/Expenses/ExpensesTablePanel.js","components/sbadmin2/components/CollapsiblePanel/CollapsiblePanel.js","components/Transfers/TransferModal.js","components/Transfers/CreateTransferButton.js","components/Transfers/TransfersTablePanel.js","components/Accounts/AccountDetails.jsx","components/Accounts/AccountModal.js","components/Accounts/CreateAccountButton.js","components/Accounts/UpdateAccountButton.js","components/Accounts/AccountsPage.js","components/workflow/DetailsWorkflow.jsx","components/Categories/CategoryModal.js","components/Categories/CreateCategoryButton.js","components/Categories/UpdateCategoryButton.js","components/Categories/CategoriesTablePanel.js","components/Categories/CategoryPage.jsx","model/Envelope.js","components/sbadmin2/utilities/OptionalFormControl.js","components/Plans/PlanModal.js","components/Plans/CreatePlanButton.js","components/Plans/DeletePlanButton.js","components/Plans/UpdatePlanButton.js","components/Plans/PlansTablePanel.js","model/propTypes.js","components/Envelopes/EnvelopeModal.js","components/Envelopes/CreateEnvelopeButton.js","components/Envelopes/UpdateEnvelopeButton.js","components/Envelopes/EnvelopesPage.js","components/Expenses/ExpensesPage.js","components/MonthDashboardPage/StartNextMonthButton.js","components/MonthDashboardPage/CurrentMonth.js","components/sbadmin2/Gauge.js","components/MonthDashboardPage/Gauges.js","components/MonthDashboardPage/MonthProblems.js","components/MonthDashboardPage/MonthDashboardPage.js","components/Plans/PlansPage.js","components/sbadmin2/Topbar/TopbarContext.js","components/sbadmin2/Topbar/Topbar.js","components/sbadmin2/Topbar/TopbarMenu.js","components/sbadmin2/Topbar/TopbarUser.js","components/sbadmin2/Topbar/TopbarContextSwitcher.js","components/TopbarBudgetSwitcher.js","components/Topbar.js","components/Transfers/TransfersPage.js","components/App/sidebarConfig.js","components/App/App.js","serviceWorker.js","index.js","components/Beta.js"],"names":["DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","Auth0Provider","children","onRedirectCallback","returnTo","initOptions","useState","isAuthenticated","setIsAuthenticated","user","setUser","token","setToken","auth0Client","setAuth0","loading","setLoading","popupOpen","setPopupOpen","useEffect","a","async","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","appState","getUser","getTokenSilently","initAuth0","Provider","value","loginWithPopup","params","console","error","getIdTokenClaims","loginWithRedirect","getTokenWithPopup","logout","p","getTokenScopes","claimsString","split","claims","JSON","parse","atob","scope","fragmentMatcher","IntrospectionFragmentMatcher","introspectionQueryResultData","createClient","graphqlApiUrl","process","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","cache","InMemoryCache","errorLink","onError","graphQLErrors","networkError","REACT_APP_ENV","map","message","locations","path","log","link","concat","ApolloClient","ApolloLink","from","connectToDevTools","AuthApolloProvider","client","buttons","create","cancel","save","sidebar","sections","currentMonth","budget","pages","dashboard","expenses","transfers","plans","accounts","envelopes","topbar","budgetLabel","alertsLabel","messagesLabel","planned","incomes","leftToPlan","noProblems","problems","overplanned","underplanned","expensesExceedPlans","envelope","envelopeOverLimit","negativeAccountBalance","account","monthNotEnded","closeMonth","table","columns","balance","name","expensesTableTitle","inTransfersTableTitle","outTransfersTableTitle","modal","createTitle","editTitle","labels","limit","overLimit","inPlansTableTitle","outPlansTableTitle","categories","description","fromEnvelope","toEnvelope","currentAmount","amount","recurring","fromAccount","toAccount","date","totalAmount","category","months","Amount","string","number","math","replace","Math","round","e","kSeparator","fixed","toFixed","parts","join","removeFromListByID","list","elementId","idx","findIndex","id","slice","length","GET_ENVELOPES","gql","CREATE_ENVELOPE","UPDATE_ENVELOPE","useGetEnvelopes","selectedBudget","useBudget","useQuery","variables","budgetID","MONTHLY_REPORT_FRAGMENT","GET_MONTHLY_REPORT","EXPENSE_FRAGMENT","GET_EXPENSES","CREATE_EXPENSE","UPDATE_EXPENSE","useUpdateExpense","useMutation","refetchQueries","query","GET_ACCOUNTS","month","mutation","rest","input","DELETE_EXPENSE","useDeleteExpense","update","deleteExpense","data","monthlyReport","readQuery","writeQuery","PLAN_FRAGMENT","GET_CURRENT_PLANS","CREATE_PLAN","UPDATE_PLAN","DELETE_PLAN","TRANSFER_FRAGMENT","GET_CURRENT_TRANSFERS","GET_TRANSFERS","CREATE_TRANSFER","UPDATE_TRANSFER","useUpdateTransfer","DELETE_TRANSFER","useDeleteTranfer","deleteTransfer","BudgetContext","GET_BUDGETS","storageKey","BudgetProvider","setSelectedBudget","sessionStorage","setItem","budgets","lastChosenID","getItem","lastChosen","find","b","CLOSE_CURRENT_MONTH","useGetAccounts","CREATE_ACCOUNT","UPDATE_ACCOUNT","Combobox","disabled","allowedValues","_ref","defaultID","defaultValue","className","required","ariaLabel","variant","prependLabel","valueByID","v","valueByLabel","useCallback","label","show","setShow","filter","setFilter","dropdownRef","useRef","filtered","toLowerCase","onInputChange","target","selected","current","handleClickOutside","event","contains","isClickedInside","addEventListener","removeEventListener","Dropdown","ref","onToggle","isOpen","classnames","Toggle","as","props","FormControl","type","onChange","aria-label","tabIndex","Menu","Item","eventKey","key","onClick","forwardRef","InputGroup","IconButton","icon","borderless","size","prefix","classes","preventDefault","OpenModalButton","Button","button","ModalContent","modalContent","onHide","stopPropagation","SBAdmin2Context","SBAdmin2Provider","sidebarToggled","setSidebarToggled","toggleSidebar","useSBAdmin2","DictionaryContext","DictionaryProvider","dictionaries","locale","useDictionary","withDictionary","prop","Component","readPropName","readDict","charAt","toUpperCase","newProps","dictionary","BreadcrumbItem","text","actions","breadcrumbs","Breadcrumb","listProps","Link","to","active","Page","Header","PageHeader","classNames","Panel","SplitButton","Title","PanelTitle","Body","addColumnNames","c","dataField","columnNames","bootstrap4","TablePanel","headerButtons","panelClassName","Wrapper","wrapper","wrapperProps","hiddenColumns","visibleColumns","filters","onSelect","selectRow","mode","clickToSelect","hideSelectColumn","undefined","isColumnHidden","isHidden","some","hc","isVisible","vc","wihtouHidden","headerClasses","hidden","filteredData","row","every","f","filtersMatch","striped","hover","bordered","defaultProps","NotFoundPage","data-text","SidebarCollapsibleLink","parent","faIcon","isActive","routes","oneOfRoutsMatchesLocation","useLocation","iconClasses","data-toggle","data-target","aria-expanded","aria-controls","data-parent","Fragment","SidebarSimpleLink","exact","SidebarGroup","group","entries","entry","Sidebar","renderBrandName","renderBrandIcon","config","toggled","SBAdmin2","sidebarProps","copyright","Topbar","component","inline","Form","Group","Row","Label","column","Input","formData","feedback","wrap","Col","sm","child","Control","default","Feedback","Variant","secondary","primary","danger","success","warning","white","Size","lg","CancelButton","faTrash","SaveButton","faSave","FormInModal","onSave","validated","setValidated","form","handleSave","isValid","checkValidity","changed","firstInput","getElementsByTagName","focus","onSubmit","closeButton","Footer","entity","fieldNames","DetailsField","formatter","RefreshButton","faSyncAlt","Spinner","role","ErrorMessageList","errorMessage","subErrors","ErrorMessage","result","errors","WithQuery","showError","QueryTablePanel","getData","refetch","EntityList","basePath","createButton","renderActions","useHistory","enhancedColumns","sort","isDummyColumn","style","whiteSpace","width","paddingBottom","push","encodeURIComponent","keyField","defaultSorted","order","Day","year","day","this","String","padStart","Date","getYear","getMonth","getDate","monthNames","Month","Number","MonthContext","useMonth","MonthProvider","selectedMonth","setSelectedMonth","ContextSwitcher","displayBg","labelBg","showLabel","labelClasses","Prepend","Text","append","ButtonGroup","GET_AVAILABLE_REPORTS","MonthSwitcher","availableReports","reverse","m","parsed","DetailsPage","getBreadcrumbPrefix","DetailsSection","readColumnNames","AdditionalDetails","detailsComponent","titleField","readFieldNames","ListPage","render","match","CreateButton","faPlus","InlineFormControl","createFormData","model","rerender","getRoot","Object","prototype","hasOwnProperty","call","$model","$init","_originalPush","removeAt","splice","arrayFormData","$process","$default","_default","init","simpleFormData","$includeAllValues","keys","reduce","acc","k","compositeFormData","useFormData","setValue","GET_CATEGORIES","CREATE_CATEGORY","UPDATE_CATEGORY","useGetCategories","AmountInput","placeholder","setIsValid","newValue","CategoriesInput","categoryFormData","categoryID","faMinus","ExpenseModal","accountsQuery","accountID","format","first","firstDay","last","lastDay","accountsData","min","max","CreateExpenseButton","createExpense","useCreateExpense","ListAction","ListActions","monthScopedResource","dictionaryName","modalComponent","updateHook","deletehook","updateMutation","deleteMutation","EditInModal","Delete","Edit","faEdit","Modal","buttonProps","footer","amounts","baseColumns","align","headerAlign","footerAlign","rowClasses","rowIndex","expandRow","renderer","ExpensesTablePanel","readTitle","accountFilter","categoryFilter","addFooter","useGetExpenses","d","CollapsibleContext","CollapsiblePanel","initialyShown","toggle","s","TransferModal","fromAccountID","toAccountID","step","CreateTransferButton","createTransfer","useCreateTransfer","faChevronUp","faChevronDown","Collapse","in","cell","TransfersTablePanel","toAccountFilter","fromAccountFilter","useGetTransfers","AccountDetails","AccountModal","CreateAccountButton","createAccount","useCreateAccount","UpdateAccountButton","useUpdateAccount","updateAccount","AccountsPage","faArchive","decodeURIComponent","CategoryModal","envelopeID","CreateCategoryButton","onClickRef","createCategory","useCreateCategory","UpdateCategoryButton","useUpdateCategory","updateEnvelope","CategoriesTablePanel","envelopeFilter","CategoryPage","readText","CategoryDetails","CategoryExpenses","Envelope","OptionalFormControl","initEnabled","enabled","setEnabled","toggleEnabled","Check","custom","checked","autoFocus","PlanModal","recurringAmount","fd","fromEnvelopeID","toEnvelopeID","CreatePlanButton","otherProps","createPlan","useCreatePlan","DeletePlanButton","plan","deletePlan","useDeletePlan","UpdatePlanButton","useUpdatePlan","updatePlan","PlansTablePanel","useGetCurrentPlans","sortValue","PropTypes","Account","shape","isRequired","totalBalance","EnvelopeModal","CreateEnvelopeButton","createEnvelope","useCreateEnvelope","UpdateEnvelopeButton","useUpdateEnvelope","EnvelopesPage","EnvelopeDetails","ExpensesPage","StartNextMonthButton","warn","useCloseCurrentMonth","closeCurrentMonth","faClipboardCheck","CurrentMonth","severity","Gauge","Gauges","totalPlannedAmount","totalIncomeAmount","totalExpenseAmount","severityVariant","ERROR","WARNING","INFO","severityIcon","basePathPerProblem","NegativeBalanceOnEnvelope","EnvelopeOverLimit","NegativeBalanceOnAccount","MonthProblems","envelopesQuery","envelopesData","problem","Problem","NoProblems","__typename","entityName","ProblemMessage","MonthDashboardPage","fetchPolicy","useGetMonthlyReport","PlansPage","TopbarContextExpanded","renderContext","TopbarContextMinimized","aria-haspopup","cursor","aria-labelledby","TopbarContext","minified","renderMenus","renderUser","faIconContextMinified","TopbarMenuCounter","counter","badge","TopbarMenu","TopbarUser","alt","src","picture","TopbarContextSwitcher","TopbarBudgetSwitcher","pictureUrl","TransfersPage","sidebarConfig","pl","Boolean","hostname","targetUrl","redirectURI","origin","AuthorizationProvider","REACT_APP_INSECURE_AUTH_DISABLED","domain","client_id","clientId","redirect_uri","audience","Promise","resolve","ReactDOM","setScope","then","basename","Consumer","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3426d808.chunk.js","sourcesContent":["import createAuth0Client from '@auth0/auth0-spa-js';\nimport PropTypes from 'prop-types';\nimport React, { useContext, useEffect, useState } from 'react';\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n  window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext();\nexport const useAuth0 = () => useContext(Auth0Context);\nexport const Auth0Provider = ({\n  children,\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n  returnTo,\n  ...initOptions\n}) => {\n  const [isAuthenticated, setIsAuthenticated] = useState();\n  const [user, setUser] = useState();\n  const [token, setToken] = useState();\n  const [auth0Client, setAuth0] = useState();\n  const [loading, setLoading] = useState(true);\n  const [popupOpen, setPopupOpen] = useState(false);\n\n  useEffect(() => {\n    const initAuth0 = async () => {\n      const auth0FromHook = await createAuth0Client(initOptions);\n      setAuth0(auth0FromHook);\n\n      if (window.location.search.includes('code=')) {\n        const { appState } = await auth0FromHook.handleRedirectCallback();\n        onRedirectCallback(appState);\n      }\n\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\n\n      setIsAuthenticated(isAuthenticated);\n\n      if (isAuthenticated) {\n        const user = await auth0FromHook.getUser();\n        setUser(user);\n\n        const token = await auth0FromHook.getTokenSilently();\n        setToken(token);\n      }\n\n      setLoading(false);\n    };\n    initAuth0();\n    // eslint-disable-next-line\n  }, []);\n\n  const loginWithPopup = async (params = {}) => {\n    setPopupOpen(true);\n    try {\n      await auth0Client.loginWithPopup(params);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setPopupOpen(false);\n    }\n    const user = await auth0Client.getUser();\n    setUser(user);\n    setIsAuthenticated(true);\n  };\n\n  const handleRedirectCallback = async () => {\n    setLoading(true);\n    await auth0Client.handleRedirectCallback();\n    const user = await auth0Client.getUser();\n    setLoading(false);\n    setIsAuthenticated(true);\n    setUser(user);\n  };\n  return (\n    <Auth0Context.Provider\n      value={{\n        token,\n        isAuthenticated,\n        user,\n        loading,\n        popupOpen,\n        loginWithPopup,\n        handleRedirectCallback,\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\n        logout: (...p) => auth0Client.logout({ ...p, returnTo }),\n        getTokenScopes: async (...p) => {\n          const token = await auth0Client.getTokenSilently(...p);\n          const claimsString = token.split('.')[1];\n          const claims = JSON.parse(atob(claimsString));\n          const scope = claims.scope.split(' ');\n          return scope;\n        },\n      }}\n    >\n      {children}\n    </Auth0Context.Provider>\n  );\n};\n\nAuth0Provider.propTypes = {\n  children: PropTypes.node,\n  onRedirectCallback: PropTypes.func,\n  returnTo: PropTypes.string.isRequired,\n};\n","import { ApolloProvider } from '@apollo/react-hooks';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { IntrospectionFragmentMatcher } from 'apollo-cache-inmemory';\nimport ApolloClient from 'apollo-client';\nimport { ApolloLink } from 'apollo-link';\nimport { setContext } from 'apollo-link-context';\nimport { onError } from 'apollo-link-error';\nimport { createHttpLink } from 'apollo-link-http';\nimport { getMainDefinition } from 'apollo-utilities';\nimport PropTypes from 'prop-types';\nimport React, { useEffect } from 'react';\n\nimport introspectionQueryResultData from './fragmentTypes.json';\nimport { useAuth0 } from './react-auth0-spa.js';\n\nconst fragmentMatcher = new IntrospectionFragmentMatcher({\n  introspectionQueryResultData,\n});\n\nexport function isSubscriptionOperation({ query }) {\n  const definition = getMainDefinition(query);\n  return (\n    definition.kind === 'OperationDefinition' &&\n    definition.operation === 'subscription'\n  );\n}\n\nexport function createClient(token) {\n  const graphqlApiUrl = process.env.REACT_APP_GQL_URL;\n  // const graphqlApiUrl = 'http://localhost:8080/query';\n  const httpLink = createHttpLink({ uri: graphqlApiUrl });\n  const authLink = setContext((_, { headers }) => {\n    // get the authentication token from local storage if it exists\n    // return the headers to the context so httpLink can read them\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    };\n  });\n  const cache = new InMemoryCache({ fragmentMatcher });\n\n  const errorLink = onError(({ graphQLErrors, networkError }) => {\n    if (process.env.REACT_APP_ENV !== 'production') {\n      if (graphQLErrors) {\n        graphQLErrors.map(({ message, locations, path }) =>\n          console.log(\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n          )\n        );\n      }\n\n      if (networkError) console.log(`[Network error]: ${networkError}`);\n    }\n  });\n\n  // const link = split(isSubscriptionOperation, wsLink, httpLink);\n  const link = authLink.concat(httpLink);\n\n  return new ApolloClient({\n    uri: graphqlApiUrl,\n    cache,\n    link: ApolloLink.from([errorLink, link]),\n    connectToDevTools: true,\n  });\n}\n\nexport function AuthApolloProvider({ children }) {\n  const { isAuthenticated, loading, loginWithRedirect, token } = useAuth0();\n\n  useEffect(() => {\n    if (loading) {\n      return;\n    }\n    if (!isAuthenticated) {\n      loginWithRedirect({});\n      return;\n    }\n  }, [isAuthenticated, loginWithRedirect, loading]);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!isAuthenticated || !token) {\n    return <div />;\n  }\n\n  return (\n    <ApolloProvider client={createClient(token)}>{children}</ApolloProvider>\n  );\n}\n\nAuthApolloProvider.propTypes = {\n  children: PropTypes.node,\n};\n","export default {\n  buttons: {\n    create: 'Dodaj',\n    cancel: 'Anuluj',\n    save: 'Zapisz',\n  },\n  sidebar: {\n    sections: {\n      currentMonth: 'Bieżący miesiąc',\n      budget: 'Budżet',\n    },\n    pages: {\n      dashboard: 'Podsumowanie',\n      expenses: 'Wydatki',\n      transfers: 'Przelewy',\n      plans: 'Plany',\n      accounts: 'Konta',\n      envelopes: 'Koperty',\n    },\n  },\n  topbar: {\n    budgetLabel: 'Budżet',\n    alertsLabel: 'Powiadomienia',\n    messagesLabel: 'Wiadomości',\n  },\n  dashboard: {\n    planned: 'Zaplanowano',\n    incomes: 'Wpływy',\n    leftToPlan: 'Pozostało do zaplanowania',\n    expenses: 'Wydatki',\n    currentMonth: 'Bieżący miesiąc',\n    noProblems: 'Wszystko w porządku',\n    problems: {\n      title: 'Problemy',\n      overplanned: 'Plany na bieżący miesiąc przekraczają wpływy',\n      underplanned: 'Część środków jest nierozplanowana',\n      expensesExceedPlans: envelope =>\n        `Wydatki przekroczyły zaplanowany budżet na kopercie \"${envelope}\"`,\n      envelopeOverLimit: envelope =>\n        `Limit dla koperty \"${envelope}\" został przekroczony`,\n      negativeAccountBalance: account =>\n        `Bilans na koncie \"${account}\" jest ujemny`,\n      monthNotEnded: 'Miesiąc się jeszcze nie skończył',\n    },\n    buttons: {\n      closeMonth: 'Zamknij miesiąc',\n    },\n  },\n  accounts: {\n    table: {\n      title: 'Konta',\n      columns: {\n        balance: 'Bilans',\n        name: 'Nazwa',\n      },\n    },\n    expensesTableTitle: 'Wydatki',\n    inTransfersTableTitle: 'Przelewy przychodzące',\n    outTransfersTableTitle: 'Przelewy wychodzące',\n    modal: {\n      createTitle: 'Dodaj nowe konto',\n      editTitle: 'Edytuj konto',\n      labels: {\n        name: 'Nazwa',\n      },\n    },\n  },\n  envelopes: {\n    table: {\n      title: 'Koperty',\n      columns: {\n        balance: 'Bilans',\n        name: 'Nazwa',\n        limit: 'Limit',\n        overLimit: 'Ponad limit',\n      },\n    },\n    expensesTableTitle: 'Wydatki',\n    inPlansTableTitle: 'Plany przychodzące',\n    outPlansTableTitle: 'Plany wychodzące',\n    modal: {\n      createTitle: 'Dodaj nową kopertę',\n      editTitle: 'Edytuj kopertę',\n      labels: {\n        name: 'Nazwa',\n        limit: 'Limit',\n      },\n    },\n  },\n  categories: {\n    table: {\n      title: 'Kategorie',\n      columns: {\n        name: 'Nazwa',\n        envelope: 'Koperta',\n        description: 'Opis',\n      },\n    },\n    modal: {\n      createTitle: 'Dodaj nową kategorię',\n      editTitle: 'Edytuj kategorię',\n      labels: {\n        name: 'Nazwa',\n        envelope: 'Koperta',\n        description: 'Opis',\n      },\n    },\n  },\n  plans: {\n    table: {\n      title: 'Plany',\n      columns: {\n        title: 'Tytuł',\n        fromEnvelope: 'Z',\n        toEnvelope: 'Do',\n        currentAmount: 'Kwota',\n      },\n    },\n    modal: {\n      createTitle: 'Dodaj nowy plan',\n      editTitle: 'Edytuj plan',\n      labels: {\n        title: 'Tytuł',\n        fromEnvelope: 'Z',\n        toEnvelope: 'Do',\n        amount: 'Kwota',\n        recurring: 'Cyklicznie',\n      },\n    },\n  },\n  transfers: {\n    table: {\n      title: 'Przelewy',\n      columns: {\n        title: 'Tytuł',\n        fromAccount: 'Z',\n        toAccount: 'Do',\n        amount: 'Kwota',\n        date: 'Data',\n      },\n    },\n    modal: {\n      createTitle: 'Dodaj nowy przelew',\n      editTitle: 'Edytuj przelew',\n      labels: {\n        title: 'Tytuł',\n        fromAccount: 'Z',\n        toAccount: 'Do',\n        amount: 'Kwota',\n        date: 'Data',\n      },\n    },\n  },\n  expenses: {\n    table: {\n      title: 'Wydatki',\n      columns: {\n        title: 'Tytuł',\n        totalAmount: 'Kwota',\n        date: 'Data',\n        account: 'Konto',\n      },\n    },\n    modal: {\n      createTitle: 'Dodaj nowy wydatek',\n      editTitle: 'Edytuj wydatek',\n      labels: {\n        title: 'Tytuł',\n        fromAccount: 'Z',\n        toAccount: 'Do',\n        account: 'Konto',\n        date: 'Data',\n        categories: 'Kategorie',\n        amount: 'Kwota',\n        category: 'Kategoria',\n      },\n    },\n  },\n  months: [\n    'Styczeń',\n    'Luty',\n    'Marzec',\n    'Kwiecień',\n    'Maj',\n    'Czerwiec',\n    'Lipiec',\n    'Sierpień',\n    'Wrzesień',\n    'Październik',\n    'Listopad',\n    'Grudzień',\n  ],\n};\n","import * as math from 'mathjs';\n\nexport default class Amount {\n  static parse(string) {\n    if (string === null || string === '') {\n      return null;\n    }\n    const number = math.evaluate(string.replace(/,/g, '.'));\n    return Math.round(number * 100);\n  }\n\n  static isValid(string) {\n    if (string === null || string === '') {\n      return true;\n    }\n\n    try {\n      math.parse(string.replace(/,/g, '.'));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  static zero() {\n    return 0;\n  }\n\n  static format(amount, kSeparator = true) {\n    if (amount === null) {\n      return '-';\n    }\n    const fixed = (amount / 100).toFixed(2);\n    if (!kSeparator) {\n      return fixed;\n    }\n    var parts = fixed.split('.');\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\n    return parts.join('.');\n  }\n}\n","export function addToList(list, element) {\n  return [...list, element]\n}\n\nexport function removeFromList(list, element) {\n  const idx = list.indexOf(element);\n  if (idx === -1) {\n    return list\n  }\n  return [...list.slice(0, idx), ...list.slice(idx+1, list.length)]\n}\n\nexport function removeFromListByID(list, elementId) {\n  const idx = list.findIndex(e => e.id === elementId);\n  if (idx === -1) {\n    return list\n  }\n  return [...list.slice(0, idx), ...list.slice(idx+1, list.length)]\n}\n\nexport function replaceOnList(list, idx, element) {\n  if (idx < 0 || idx > list.length) {\n    return list\n  }\n  return [...list.slice(0, idx), element, ...list.slice(idx+1, list.length)]\n}\n\nexport function replaceOnListByID(list, element) {\n  const idx = list.findIndex(e => e.id === element.id);\n\n  if (idx === -1) {\n    return list\n  }\n\n  return [...list.slice(0, idx), element, ...list.slice(idx+1, list.length)]\n}","import { useMutation, useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { useBudget } from './budget';\n\nexport const GET_ENVELOPES = gql`\n  query GetEnvelopes($budgetID: ID!) {\n    envelopes(budgetID: $budgetID) {\n      id\n      name\n      balance\n      limit\n    }\n  }\n`;\n\nconst CREATE_ENVELOPE = gql`\n  mutation CreateEnvelope($budgetID: ID!, $input: EnvelopeInput!) {\n    createEnvelope(budgetID: $budgetID, in: $input) {\n      id\n      name\n      balance\n      limit\n    }\n  }\n`;\n\nconst UPDATE_ENVELOPE = gql`\n  mutation UpdateEnvelope($budgetID: ID!, $id: ID!, $input: EnvelopeUpdate!) {\n    updateEnvelope(budgetID: $budgetID, id: $id, in: $input) {\n      id\n      name\n      balance\n      limit\n    }\n  }\n`;\n\nexport function useCreateEnvelope() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_ENVELOPE, {\n    update: (cache, { data: { createEnvelope } }) => {\n      const { envelopes } = cache.readQuery({\n        query: GET_ENVELOPES,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_ENVELOPES,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          envelopes: envelopes.concat([createEnvelope]),\n        },\n      });\n    },\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useUpdateEnvelope() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_ENVELOPE);\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useGetEnvelopes() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_ENVELOPES, {\n    variables: { budgetID: selectedBudget.id },\n  });\n}\n","import { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { useBudget } from './budget';\n\nconst MONTHLY_REPORT_FRAGMENT = gql`\n  fragment MonthlyReport on MonthlyReport {\n    month\n    totalPlannedAmount\n    totalIncomeAmount\n    totalExpenseAmount\n    problems {\n      severity\n      ... on EnvelopeOverLimit {\n        id\n      }\n      ... on NegativeBalanceOnAccount {\n        id\n      }\n      ... on NegativeBalanceOnEnvelope {\n        id\n      }\n      ... on Misplanned {\n        overplanned\n      }\n    }\n  }\n`;\n\nexport const GET_MONTHLY_REPORT = gql`\n  query GetMonthlyReport($budgetID: ID!, $month: Month!) {\n    monthlyReport(budgetID: $budgetID, month: $month) {\n      ...MonthlyReport\n    }\n  }\n  ${MONTHLY_REPORT_FRAGMENT}\n`;\n\nexport function useGetMonthlyReport(month) {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_MONTHLY_REPORT, {\n    variables: { budgetID: selectedBudget.id, month },\n    fetchPolicy: 'network-only',\n  });\n}\n","import { useMutation, useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { removeFromListByID } from '../../util/immutable';\nimport { GET_ACCOUNTS } from './accounts';\nimport { useBudget } from './budget';\nimport { GET_ENVELOPES } from './envelopes';\nimport { GET_MONTHLY_REPORT } from './monthlyReport';\n\nconst EXPENSE_FRAGMENT = gql`\n  fragment Expense on Expense {\n    id\n    title\n    account {\n      id\n      name\n    }\n    categories {\n      category {\n        id\n        name\n      }\n      amount\n    }\n    totalAmount\n    date\n  }\n`;\n\nexport const GET_EXPENSES = gql`\n  query getExpenses($budgetID: ID!, $month: Month!) {\n    monthlyReport(budgetID: $budgetID, month: $month) {\n      expenses {\n        ...Expense\n      }\n    }\n  }\n\n  ${EXPENSE_FRAGMENT}\n`;\n\nconst CREATE_EXPENSE = gql`\n  mutation createExpense($budgetID: ID!, $input: ExpenseInput!) {\n    createExpense(budgetID: $budgetID, in: $input) {\n      ...Expense\n    }\n  }\n\n  ${EXPENSE_FRAGMENT}\n`;\n\nconst UPDATE_EXPENSE = gql`\n  mutation updateExpense($budgetID: ID!, $id: ID!, $input: ExpenseUpdate!) {\n    updateExpense(budgetID: $budgetID, id: $id, in: $input) {\n      ...Expense\n    }\n  }\n\n  ${EXPENSE_FRAGMENT}\n`;\n\nexport function useCreateExpense() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_EXPENSE, {\n    update: (cache, { data: { createExpense } }) => {\n      const { monthlyReport } = cache.readQuery({\n        query: GET_EXPENSES,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      });\n      cache.writeQuery({\n        query: GET_EXPENSES,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n        data: {\n          monthlyReport: {\n            ...monthlyReport,\n            expenses: monthlyReport.expenses.concat([createExpense]),\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      },\n    ],\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useUpdateExpense() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_EXPENSE, {\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      },\n    ],\n  });\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useGetExpenses(month) {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_EXPENSES, {\n    variables: { budgetID: selectedBudget.id, month },\n  });\n}\n\nconst DELETE_EXPENSE = gql`\n  mutation deleteExpense($budgetID: ID!, $id: ID!) {\n    deleteExpense(budgetID: $budgetID, id: $id) {\n      id\n    }\n  }\n`;\n\nexport function useDeleteExpense() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(DELETE_EXPENSE, {\n    update: (cache, { data: { deleteExpense } }) => {\n      const { monthlyReport } = cache.readQuery({\n        query: GET_EXPENSES,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      });\n      cache.writeQuery({\n        query: GET_EXPENSES,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n        data: {\n          monthlyReport: {\n            ...monthlyReport,\n            expenses: removeFromListByID(\n              monthlyReport.expenses,\n              deleteExpense.id\n            ),\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      },\n    ],\n  });\n  const wrapper = id => {\n    mutation({ variables: { budgetID: selectedBudget.id, id } });\n  };\n  return [wrapper, ...rest];\n}\n","import { useMutation, useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { removeFromListByID } from '../../util/immutable';\nimport { useBudget } from './budget';\nimport { GET_ENVELOPES } from './envelopes';\nimport { GET_MONTHLY_REPORT } from './monthlyReport';\n\nconst PLAN_FRAGMENT = gql`\n  fragment Plan on Plan {\n    id\n    title\n    fromEnvelope {\n      id\n      name\n    }\n    toEnvelope {\n      id\n      name\n    }\n    currentAmount\n    recurringAmount\n  }\n`;\n\nexport const GET_CURRENT_PLANS = gql`\n  query getCurrentPlans($budgetID: ID!) {\n    budget(budgetID: $budgetID) {\n      currentMonth {\n        plans {\n          ...Plan\n        }\n      }\n    }\n  }\n  ${PLAN_FRAGMENT}\n`;\n\nexport function useGetCurrentPlans() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_CURRENT_PLANS, {\n    variables: { budgetID: selectedBudget.id },\n  });\n}\n\nconst CREATE_PLAN = gql`\n  mutation createPlan($budgetID: ID!, $input: PlanInput!) {\n    createPlan(budgetID: $budgetID, in: $input) {\n      ...Plan\n    }\n  }\n  ${PLAN_FRAGMENT}\n`;\n\nexport function useCreatePlan() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_PLAN, {\n    update: (cache, { data: { createPlan } }) => {\n      const { budget } = cache.readQuery({\n        query: GET_CURRENT_PLANS,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_CURRENT_PLANS,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          budget: {\n            ...budget,\n            currentMonth: {\n              ...budget.currentMonth,\n              plans: budget.currentMonth.plans.concat([createPlan]),\n            },\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      },\n    ],\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nconst UPDATE_PLAN = gql`\n  mutation updatePlan($budgetID: ID!, $id: ID!, $input: PlanUpdate!) {\n    updatePlan(budgetID: $budgetID, id: $id, in: $input) {\n      ...Plan\n    }\n  }\n  ${PLAN_FRAGMENT}\n`;\n\nexport function useUpdatePlan() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_PLAN, {\n    refetchQueries: () => [\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      },\n    ],\n  });\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nconst DELETE_PLAN = gql`\n  mutation deletePlan($budgetID: ID!, $id: ID!) {\n    deletePlan(budgetID: $budgetID, id: $id) {\n      id\n    }\n  }\n`;\n\nexport function useDeletePlan() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(DELETE_PLAN, {\n    update: (cache, { data: { deletePlan } }) => {\n      const { budget } = cache.readQuery({\n        query: GET_CURRENT_PLANS,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_CURRENT_PLANS,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          budget: {\n            ...budget,\n            currentMonth: {\n              ...budget.currentMonth,\n              plans: removeFromListByID(\n                budget.currentMonth.plans,\n                deletePlan.id\n              ),\n            },\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      },\n    ],\n  });\n  const wrapper = id => {\n    mutation({ variables: { budgetID: selectedBudget.id, id } });\n  };\n  return [wrapper, ...rest];\n}\n","import { useMutation, useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { removeFromListByID } from '../../util/immutable';\nimport { GET_ACCOUNTS } from './accounts';\nimport { useBudget } from './budget';\nimport { GET_MONTHLY_REPORT } from './monthlyReport';\n\nconst TRANSFER_FRAGMENT = gql`\n  fragment Transfer on Transfer {\n    id\n    title\n    fromAccount {\n      id\n      name\n    }\n    toAccount {\n      id\n      name\n    }\n    amount\n    date\n  }\n`;\n\nexport const GET_CURRENT_TRANSFERS = gql`\n  query getCurrentTransfers($budgetID: ID!) {\n    budget(budgetID: $budgetID) {\n      currentMonth {\n        transfers {\n          ...Transfer\n        }\n      }\n    }\n  }\n  ${TRANSFER_FRAGMENT}\n`;\n\nexport const GET_TRANSFERS = gql`\n  query getTransfers($budgetID: ID!, $month: Month!) {\n    monthlyReport(budgetID: $budgetID, month: $month) {\n      transfers {\n        ...Transfer\n      }\n    }\n  }\n  ${TRANSFER_FRAGMENT}\n`;\n\nexport function useGetCurrentTransfers() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_CURRENT_TRANSFERS, {\n    variables: { budgetID: selectedBudget.id },\n  });\n}\n\nexport function useGetTransfers(month) {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_TRANSFERS, {\n    variables: { budgetID: selectedBudget.id, month },\n  });\n}\n\nconst CREATE_TRANSFER = gql`\n  mutation createTransfer($budgetID: ID!, $input: TransferInput!) {\n    createTransfer(budgetID: $budgetID, in: $input) {\n      ...Transfer\n    }\n  }\n  ${TRANSFER_FRAGMENT}\n`;\n\nexport function useCreateTransfer() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_TRANSFER, {\n    update: (cache, { data: { createTransfer } }) => {\n      const { monthlyReport } = cache.readQuery({\n        query: GET_TRANSFERS,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      });\n      cache.writeQuery({\n        query: GET_TRANSFERS,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n        data: {\n          monthlyReport: {\n            ...monthlyReport,\n            transfers: monthlyReport.transfers.concat([createTransfer]),\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      },\n    ],\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nconst UPDATE_TRANSFER = gql`\n  mutation updateTransfer($budgetID: ID!, $id: ID!, $input: TransferUpdate!) {\n    updateTransfer(budgetID: $budgetID, id: $id, in: $input) {\n      ...Transfer\n    }\n  }\n  ${TRANSFER_FRAGMENT}\n`;\n\nexport function useUpdateTransfer() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_TRANSFER, {\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      },\n    ],\n  });\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nconst DELETE_TRANSFER = gql`\n  mutation deleteTransfer($budgetID: ID!, $id: ID!) {\n    deleteTransfer(budgetID: $budgetID, id: $id) {\n      id\n    }\n  }\n`;\n\nexport function useDeleteTranfer() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(DELETE_TRANSFER, {\n    update: (cache, { data: { deleteTransfer } }) => {\n      const { monthlyReport } = cache.readQuery({\n        query: GET_TRANSFERS,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      });\n      cache.writeQuery({\n        query: GET_TRANSFERS,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n        data: {\n          monthlyReport: {\n            ...monthlyReport,\n            transfers: removeFromListByID(\n              monthlyReport.transfers,\n              deleteTransfer.id\n            ),\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      },\n    ],\n  });\n  const wrapper = id => {\n    mutation({ variables: { budgetID: selectedBudget.id, id } });\n  };\n  return [wrapper, ...rest];\n}\n","import { useMutation, useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport PropTypes from 'prop-types';\nimport React, { createContext, useContext, useEffect, useState } from 'react';\n\nimport { GET_EXPENSES } from './expenses';\nimport { GET_MONTHLY_REPORT } from './monthlyReport';\nimport { GET_CURRENT_PLANS } from './plans';\nimport { GET_CURRENT_TRANSFERS } from './transfers';\n\nexport const BudgetContext = createContext();\nexport const useBudget = () => useContext(BudgetContext);\n\nconst GET_BUDGETS = gql`\n  query GetBudgets {\n    budgets {\n      id\n      name\n      currentMonth {\n        month\n      }\n    }\n  }\n`;\n\nconst storageKey = 'LAST-CHOSEN-BUDGET-ID';\n\nexport function BudgetProvider({ children }) {\n  const [selectedBudget, setSelectedBudget] = useState(null);\n  const { loading, error, data } = useQuery(GET_BUDGETS);\n\n  useEffect(() => {\n    if (selectedBudget) {\n      sessionStorage.setItem(storageKey, selectedBudget.id);\n    }\n  }, [selectedBudget]);\n\n  useEffect(() => {\n    if (!selectedBudget && data && data.budgets) {\n      const lastChosenID = sessionStorage.getItem(storageKey);\n      const lastChosen = data.budgets.find(b => b.id === lastChosenID);\n      if (lastChosen) {\n        setSelectedBudget(lastChosen);\n      }\n    }\n  }, [data, selectedBudget]);\n\n  const value = {\n    selectedBudget,\n    setSelectedBudget,\n    loading,\n    error,\n    budgets: !loading && !error ? data.budgets : [],\n  };\n\n  if (error) {\n    console.error(error);\n  }\n  return (\n    <BudgetContext.Provider value={value}>{children}</BudgetContext.Provider>\n  );\n}\n\nBudgetProvider.propTypes = {\n  children: PropTypes.node,\n};\n\nconst CLOSE_CURRENT_MONTH = gql`\n  mutation closeMonth($budgetID: ID!) {\n    closeCurrentMonth(budgetID: $budgetID) {\n      id\n    }\n  }\n`;\n\nexport function useCloseCurrentMonth() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CLOSE_CURRENT_MONTH, {\n    refetchQueries: () => [\n      {\n        query: GET_MONTHLY_REPORT,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth,\n        },\n      },\n      {\n        query: GET_CURRENT_PLANS,\n        variables: { budgetID: selectedBudget.id },\n      },\n      {\n        query: GET_CURRENT_TRANSFERS,\n        variables: { budgetID: selectedBudget.id },\n      },\n      {\n        query: GET_EXPENSES,\n        variables: {\n          budgetID: selectedBudget.id,\n          month: selectedBudget.currentMonth.month,\n        },\n      },\n    ],\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n","import gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { useBudget } from './budget';\n\nexport const GET_ACCOUNTS = gql`\n  query GetAccounts($budgetID: ID!) {\n    accounts(budgetID: $budgetID) {\n      id\n      name\n      balance\n    }\n  }\n`;\n\nexport function useGetAccounts() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_ACCOUNTS, {\n    variables: { budgetID: selectedBudget.id },\n  });\n}\n\nconst CREATE_ACCOUNT = gql`\n  mutation CreateAccount($budgetID: ID!, $input: AccountInput!) {\n    createAccount(budgetID: $budgetID, in: $input) {\n      id\n      name\n      balance\n    }\n  }\n`;\n\nexport function useCreateAccount() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_ACCOUNT, {\n    update: (cache, { data: { createAccount } }) => {\n      const { accounts } = cache.readQuery({\n        query: GET_ACCOUNTS,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_ACCOUNTS,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          accounts: accounts.concat([createAccount]),\n        },\n      });\n    },\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nconst UPDATE_ACCOUNT = gql`\n  mutation UpdateAccount($budgetID: ID!, $id: ID!, $input: AccountUpdate!) {\n    updateAccount(budgetID: $budgetID, id: $id, in: $input) {\n      id\n      name\n      balance\n    }\n  }\n`;\n\nexport function useUpdateAccount() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_ACCOUNT);\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n","import './Combobox.css';\n\nimport classnames from 'classnames';\nimport React, {\n  ButtonHTMLAttributes,\n  ChangeEvent,\n  ReactNode,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { Button, Dropdown, FormControl, InputGroup } from 'react-bootstrap';\n\nimport { Variant } from '../../bootstrap.typed';\n\ninterface Props {\n  disabled?: boolean;\n  allowedValues: { id: string; label: string }[];\n  _ref?: { current: any };\n  defaultValue?: string;\n  className?: string;\n  required?: boolean;\n  'aria-label': string;\n  variant?: Variant;\n  prependLabel?: string;\n}\n\nexport default function Combobox({\n  disabled,\n  allowedValues,\n  _ref,\n  defaultValue: defaultID,\n  className,\n  required,\n  'aria-label': ariaLabel,\n  variant = 'secondary',\n  prependLabel,\n}: Props) {\n  function valueByID(id: string) {\n    return allowedValues.find(v => v.id === id);\n  }\n\n  const valueByLabel = useCallback(\n    label => allowedValues.find(v => v.label === label),\n    [allowedValues]\n  );\n\n  const [show, setShow] = useState(false);\n\n  const defaultValue = defaultID ? valueByID(defaultID) : { label: '' };\n  const [filter, setFilter] = useState(defaultValue ? defaultValue.label : '');\n\n  const dropdownRef = useRef<HTMLDivElement>();\n\n  const filtered = filter\n    ? allowedValues.filter(v =>\n        v.label.toLowerCase().includes(filter.toLowerCase())\n      )\n    : allowedValues;\n\n  useEffect(() => {\n    if (_ref) {\n      _ref.current = { value: defaultID };\n    }\n  }, [_ref, defaultID]);\n\n  useEffect(() => {\n    function isClickedInside(event: MouseEvent) {\n      return (\n        !dropdownRef.current ||\n        dropdownRef.current!.contains(event.target as Node)\n      );\n    }\n\n    function handleClickOutside(event: MouseEvent) {\n      if (isClickedInside(event)) {\n        return;\n      }\n      setShow(false);\n      if (!valueByLabel(filter)) {\n        setFilter('');\n      }\n    }\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, [filter, valueByLabel]);\n\n  function onInputChange(e: ChangeEvent<HTMLInputElement>) {\n    const label = e.target.value;\n    setFilter(label);\n    const selected = valueByLabel(label);\n    if (selected && _ref) {\n      _ref.current = { value: selected.id };\n    } else {\n      setShow(true);\n    }\n  }\n\n  function onClick(id: string) {\n    const selected = valueByID(id);\n    if (selected) {\n      setFilter(selected.label);\n    }\n    if (_ref) {\n      _ref.current = { value: id };\n    }\n  }\n\n  return (\n    <Dropdown\n      // @ts-ignore\n      ref={dropdownRef}\n      show={show}\n      onToggle={isOpen => {\n        setShow(isOpen);\n      }}\n      className={classnames('combobox', className)}\n    >\n      <Dropdown.Toggle\n        // @ts-ignore\n        as={Toggle}\n      >\n        {({ className, ...props }: ButtonHTMLAttributes<HTMLButtonElement>) => (\n          <>\n            <FormControl\n              value={filter}\n              type='text'\n              onChange={onInputChange}\n              disabled={disabled}\n              required={required}\n              aria-label={ariaLabel}\n            />\n            <Button\n              variant={variant}\n              className={classnames(\n                'dropdown-toggle-split',\n                'no-arrow',\n                className\n              )}\n              tabIndex={-1}\n              disabled={disabled}\n              type='button'\n              {...props}\n            />\n          </>\n        )}\n      </Dropdown.Toggle>\n      <Dropdown.Menu>\n        {filtered.map(v => (\n          <Dropdown.Item\n            eventKey={v.id}\n            key={v.id}\n            onClick={() => onClick(v.id)}\n          >\n            {v.label}\n          </Dropdown.Item>\n        ))}\n      </Dropdown.Menu>\n    </Dropdown>\n  );\n}\n\ninterface ToggleProps {\n  children(props: object): ReactNode;\n}\n\nconst Toggle = forwardRef(({ children, ...props }: ToggleProps, ref) => {\n  return (\n    <InputGroup\n      // @ts-ignore\n      ref={ref}\n    >\n      {children(props)}\n    </InputGroup>\n  );\n});\n","import { IconProp } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport classnames from 'classnames';\nimport React, { MouseEvent } from 'react';\n\nimport { Size, Variant } from '../../bootstrap.typed';\n\ninterface Props {\n  icon: IconProp;\n  variant: Variant;\n  onClick(event: MouseEvent<HTMLButtonElement>): void;\n  className?: string;\n  borderless?: boolean;\n  size?: Size;\n}\n\nexport default function IconButton({\n  icon,\n  variant,\n  className,\n  onClick,\n  borderless,\n  size,\n  ...props\n}: Props) {\n  const prefix = borderless ? 'text' : 'btn';\n  const classes = classnames('btn', className, {\n    [`${prefix}-${variant}`]: variant,\n    [`${prefix}-${size}`]: size,\n    'bg-transparent': borderless,\n    'border-0': borderless,\n    'p-0': borderless,\n    'mx-1': borderless,\n  });\n\n  function handleOnClick(e: MouseEvent<HTMLButtonElement>) {\n    e.preventDefault();\n    onClick && onClick(e);\n  }\n\n  return (\n    <button className={classes} onClick={handleOnClick} {...props}>\n      <FontAwesomeIcon icon={icon} />\n    </button>\n  );\n}\n","import React, { ComponentType, MouseEvent, useState } from 'react';\nimport { Modal } from 'react-bootstrap';\n\ninterface ButtonProps {\n  onClick(event: MouseEvent<HTMLButtonElement>): void;\n}\n\ninterface ModalContentProps {\n  onHide(): void;\n}\n\ninterface Props {\n  button: ComponentType<ButtonProps>;\n  modalContent: ComponentType<ModalContentProps>;\n}\n\nexport default function OpenModalButton({\n  button: Button,\n  modalContent: ModalContent,\n  ...props\n}: Props) {\n  const [show, setShow] = useState<boolean>(false);\n  const onHide = () => setShow(false);\n  const onClick = () => setShow(true);\n\n  return (\n    <span onClick={e => e.stopPropagation()}>\n      <Button onClick={onClick} />\n      <Modal show={show} onHide={onHide} {...props}>\n        <ModalContent onHide={onHide} />\n      </Modal>\n    </span>\n  );\n}\n","import PropTypes from 'prop-types';\nimport React, { useContext, useState } from 'react';\n\nconst SBAdmin2Context = React.createContext();\n\nexport function SBAdmin2Provider({ user, logout, children }) {\n  const [sidebarToggled, setSidebarToggled] = useState(false);\n  return (\n    <SBAdmin2Context.Provider\n      value={{\n        sidebarToggled,\n        user,\n        logout,\n        toggleSidebar: () => setSidebarToggled(current => !current),\n      }}\n    >\n      {children}\n    </SBAdmin2Context.Provider>\n  );\n}\n\nSBAdmin2Provider.propTypes = {\n  children: PropTypes.node,\n  logout: PropTypes.func.isRequired,\n  user: PropTypes.shape({\n    picture: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport const useSBAdmin2 = () => useContext(SBAdmin2Context);\n","import React, { createContext, useContext } from 'react';\nimport { useSBAdmin2 } from './context';\nimport PropTypes from 'prop-types';\nimport { capitalize } from '../../util/capitalize';\n\nexport const DictionaryContext = createContext();\n\nexport function DictionaryProvider({ dictionaries, children }) {\n  const { user } = useSBAdmin2();\n  return (\n    <DictionaryContext.Provider value={dictionaries[user.locale]}>\n      {children}\n    </DictionaryContext.Provider>\n  );\n}\n\nDictionaryProvider.propTypes = {\n  dictionaries: PropTypes.object,\n  children: PropTypes.node,\n};\n\nexport const useDictionary = () => useContext(DictionaryContext);\n\nexport function withDictionary(prop, Component, readPropName) {\n  return props => {\n    readPropName = readPropName || `read${capitalize(prop)}`;\n    const readDict = props[readPropName];\n    const newProps = { ...props };\n    delete newProps[readPropName];\n    const dictionary = useDictionary();\n    if (readDict) {\n      newProps[prop] = readDict(dictionary);\n    }\n    return <Component {...newProps} />;\n  };\n}\n","export function capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Breadcrumb } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nimport { withDictionary } from '../../language';\n\nfunction LinkBreadcrumb({ text, ...props }) {\n  return (\n    <li className='breadcrumb-item'>\n      <Link {...props}>{text}</Link>\n    </li>\n  );\n}\n\nconst BreadcrumbItem = withDictionary('text', LinkBreadcrumb);\n\nfunction PageHeader({ children, title, actions, breadcrumbs }) {\n  return (\n    <>\n      <h1 className='h3 text-gray-800 d-flex justify-content-between'>\n        <span>\n          {title}\n          {actions}\n        </span>\n        {children && <div>{children}</div>}\n      </h1>\n      <Breadcrumb listProps={{ className: 'bg-transparent pl-0 pt-0' }}>\n        {breadcrumbs &&\n          breadcrumbs.map(b => <BreadcrumbItem as={Link} key={b.to} {...b} />)}\n        <Breadcrumb.Item active>{title}</Breadcrumb.Item>\n      </Breadcrumb>\n    </>\n  );\n}\n\nPageHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default withDictionary('title', PageHeader);\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport PageHeader from './PageHeader';\n\nexport default function Page({ children }) {\n  return <div className='container-fluid'>{children}</div>;\n}\n\nPage.propTypes = {\n  children: PropTypes.node,\n};\n\nPage.Header = PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { withDictionary } from '../../language';\n\nfunction PanelTitle({ children, title, className }) {\n  const classNames = classnames(\n    'm-0',\n    'font-weight-bold',\n    'text-primary',\n    className\n  );\n  return (\n    <h6 className={classNames}>\n      {children}\n      {title}\n    </h6>\n  );\n}\n\nPanelTitle.propTypes = {\n  title: PropTypes.node.isRequired,\n  className: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default withDictionary('title', PanelTitle);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport PanelTitle from './PanelTitle';\nimport PanelHeader from './PanelHeader';\nimport PanelBody from './PanelBody';\n\nexport default function Panel({ children, className }) {\n  return (\n    <div className={classnames('card', 'shadow', 'mb-4', className)}>\n      {children}\n    </div>\n  );\n}\n\nPanel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n};\n\nPanel.Title = PanelTitle;\nPanel.Header = PanelHeader;\nPanel.Body = PanelBody;\n","import { IconProp } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport classnames from 'classnames';\nimport React, { ButtonHTMLAttributes } from 'react';\n\nimport { Size, Variant } from '../../bootstrap.typed';\n\ninterface Props {\n  icon: IconProp;\n  variant: Variant;\n  size?: Size;\n  className?: string;\n  disabled?: boolean;\n  _ref?: { current: any };\n  children?: string;\n}\n\nexport default function SplitButton({\n  icon,\n  variant,\n  size,\n  className,\n  disabled,\n  _ref,\n  children,\n  ...props\n}: Props & ButtonHTMLAttributes<HTMLButtonElement>) {\n  const classNames = classnames('btn', 'btn-icon-split', className, {\n    disabled,\n    [`btn-${size}`]: size,\n    [`btn-${variant}`]: variant,\n  });\n\n  return (\n    <button\n      className={classNames}\n      disabled={disabled}\n      ref={_ref}\n      aria-label={children}\n      {...props}\n    >\n      <span className='icon text-white-50'>\n        <FontAwesomeIcon icon={icon} />\n      </span>\n      <span className='text'>{children}</span>\n    </button>\n  );\n}\n","import React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport default function PanelHeader({ className, ...props }) {\n  return <div className={classnames(className, 'card-header')} {...props} />;\n}\n\nPanelHeader.propTypes = {\n  className: PropTypes.string,\n};\n","import React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport default function PanelBody({ className, children }) {\n  return <div className={classnames(className, 'card-body')}>{children}</div>;\n}\n\nPanelBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n};\n","import React from 'react';\nimport BootstrapTable, {\n  BootstrapTableProps,\n  Column,\n} from 'react-bootstrap-table-next';\n\nimport { withDictionary } from '../../language';\n\ninterface Dictionary {\n  [key: string]: string;\n}\n\ninterface Props<fieldIds extends string = string>\n  extends BootstrapTableProps<fieldIds> {\n  columnNames: Dictionary;\n}\n\nfunction Table({ columns, columnNames, ...props }: Props) {\n  return (\n    <BootstrapTable\n      bootstrap4\n      columns={addColumnNames(columns, columnNames)}\n      {...props}\n    />\n  );\n}\n\nfunction addColumnNames<fieldIds extends string = string>(\n  columns: Column<fieldIds>[],\n  dictionary: Dictionary\n) {\n  return columns.map(c => ({ ...c, text: dictionary[c.dataField] || '' }));\n}\n\nexport default withDictionary('columnNames', Table);\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { withDictionary } from '../../language';\nimport Panel from '../Panel/Panel';\nimport Table from '../Table/Table';\n\nfunction TablePanel({\n  title,\n  columns,\n  headerButtons,\n  panelClassName,\n  wrapper: Wrapper,\n  wrapperProps,\n  hiddenColumns,\n  visibleColumns,\n  data,\n  filters,\n  onSelect,\n  selected,\n  ...props\n}) {\n  const paddedFirstColumn = {\n    ...columns[0],\n    classes: 'pl-3',\n    headerClasses: 'pl-3',\n  };\n  const modifiedColumns = [\n    paddedFirstColumn,\n    ...columns.slice(1, columns.length),\n  ];\n\n  const selectRow = !onSelect\n    ? undefined\n    : {\n        mode: 'radio',\n        clickToSelect: true,\n        hideSelectColumn: true,\n        classes: 'text-white bg-primary selected',\n        onSelect,\n        selected: selected ? [selected] : [],\n      };\n\n  function isColumnHidden(c) {\n    const isHidden =\n      hiddenColumns && hiddenColumns.some(hc => c.dataField === hc);\n    const isVisible =\n      visibleColumns && visibleColumns.some(vc => c.dataField === vc);\n    return isHidden || (visibleColumns && !isVisible);\n  }\n\n  const wihtouHidden = modifiedColumns.map(c => ({\n    ...c,\n    hidden: isColumnHidden(c),\n  }));\n\n  function filtersMatch(row) {\n    return filters.every(f => f(row));\n  }\n\n  const filteredData = data.filter(row => filtersMatch(row));\n\n  return (\n    <Wrapper className={panelClassName} {...wrapperProps}>\n      <Wrapper.Header className='p-2 pl-3'>\n        <div className='d-flex justify-content-between align-items-center'>\n          <Wrapper.Title title={title} className='table-panel--title' />\n          <div>{headerButtons}</div>\n        </div>\n      </Wrapper.Header>\n\n      <Wrapper.Body className='p-0'>\n        <Table\n          classes='table-layout-auto table-sm m-0'\n          striped\n          hover\n          bordered={false}\n          columns={wihtouHidden}\n          data={filteredData}\n          selectRow={selectRow}\n          {...props}\n        />\n      </Wrapper.Body>\n    </Wrapper>\n  );\n}\n\nTablePanel.propTypes = {\n  wrapper: PropTypes.elementType,\n  wrapperProps: PropTypes.object,\n  title: PropTypes.string.isRequired,\n  headerButtons: PropTypes.node,\n  columns: PropTypes.array.isRequired,\n  panelClassName: PropTypes.string,\n  hiddenColumns: PropTypes.arrayOf(PropTypes.string),\n  filters: PropTypes.arrayOf(PropTypes.func),\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nTablePanel.defaultProps = {\n  wrapper: Panel,\n  wrapperProps: {},\n  hiddenColumns: [],\n  filters: [],\n};\n\nexport default withDictionary('title', TablePanel);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Page from './components/Page/Page';\n\nexport function NotFoundPage() {\n  return (\n    <Page>\n      <div className=\"text-center\">\n        <div className=\"error mx-auto\" data-text=\"404\">\n          404\n        </div>\n        <p className=\"lead text-gray-800 mb-5\">Page Not Found</p>\n        <p className=\"text-gray-500 mb-0\">\n          It looks like you found a glitch in the matrix...\n        </p>\n        <Link to=\"/\">&larr; Back to Dashboard</Link>\n      </div>\n    </Page>\n  );\n}\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useLocation } from 'react-router';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nfunction oneOfRoutsMatchesLocation(sections, location) {\n  return sections.some(({ routes }) =>\n    routes.some(({ to }) => location.pathname === to)\n  );\n}\n\nexport default function SidebarCollapsibleLink({\n  name,\n  parent,\n  sections,\n  faIcon,\n}) {\n  const location = useLocation();\n  const isActive = oneOfRoutsMatchesLocation(sections, location);\n  const classNames = classnames('nav-item', { active: isActive });\n  const id = 'sidebar--' + name;\n  const iconClasses = classnames('fas', 'fa-fw', `fa-${faIcon}`);\n  return (\n    <li className={classNames}>\n      <span\n        className=\"nav-link collapsed\"\n        data-toggle=\"collapse\"\n        data-target={'#' + id}\n        aria-expanded=\"true\"\n        aria-controls={id}\n      >\n        <i className={iconClasses}></i>\n        <span>{name}</span>\n      </span>\n      <div id={id} className=\"collapse\" data-parent={'#' + parent}>\n        <div className=\"bg-white py-2 collapse-inner rounded\">\n          {sections.map(({ name, routes }) => {\n            return (\n              <React.Fragment key={name}>\n                <h6 className=\"collapse-header\">{name}:</h6>\n                {routes.map(({ to, label }) => {\n                  return (\n                    <NavLink key={label} className=\"collapse-item\" to={to}>\n                      {label}\n                    </NavLink>\n                  );\n                })}\n              </React.Fragment>\n            );\n          })}\n        </div>\n      </div>\n    </li>\n  );\n}\n\nSidebarCollapsibleLink.propTypes = {\n  faIcon: PropTypes.string,\n  name: PropTypes.string,\n  parent: PropTypes.string,\n  sections: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      routes: PropTypes.arrayOf(\n        PropTypes.shape({\n          label: PropTypes.string,\n          to: PropTypes.string,\n        })\n      ).isRequired,\n    })\n  ),\n};\n","import React from 'react';\nimport classnames from 'classnames';\nimport { NavLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport default function SidebarSimpleLink({ name, to, faIcon }) {\n  const iconClasses = classnames('fas', 'fa-fw', `fa-${faIcon}`);\n  return (\n    <li className=\"nav-item\">\n      <NavLink className=\"nav-link\" exact to={to}>\n        <i className={iconClasses} />\n        <span>{name}</span>\n      </NavLink>\n    </li>\n  );\n}\n\nSidebarSimpleLink.propTypes = {\n  faIcon: PropTypes.string,\n  name: PropTypes.string,\n  to: PropTypes.string,\n};\n","import React from 'react';\nimport SidebarCollapsibleLink from './SidebarCollapsibleLink';\nimport SidebarSimpleLink from './SidebarSimpleLink';\nimport PropTypes from 'prop-types';\n\nexport function SidebarGroup({ group }) {\n  return (\n    <>\n      <hr className=\"sidebar-divider my-1\" />\n      {group.name && <div className=\"sidebar-heading\">{group.name}</div>}\n      {group.entries.map(entry =>\n        entry.to !== undefined ? (\n          <SidebarSimpleLink key={entry.name} {...entry} />\n        ) : (\n          <SidebarCollapsibleLink\n            key={entry.name}\n            parent=\"accordionSidebar\"\n            {...entry}\n          />\n        )\n      )}\n    </>\n  );\n}\n\nSidebarGroup.propTypes = {\n  group: PropTypes.shape({\n    name: PropTypes.string,\n    entries: PropTypes.arrayOf(\n      PropTypes.oneOfType([\n        PropTypes.shape(SidebarCollapsibleLink.propTypes),\n        PropTypes.shape(SidebarSimpleLink.propTypes),\n      ])\n    ).isRequired,\n  }),\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { SidebarGroup } from './SidebarGroup';\nimport { useSBAdmin2 } from '../context';\nimport './Sidebar.css';\n\nexport default function Sidebar({ renderBrandName, renderBrandIcon, config }) {\n  const { sidebarToggled, toggleSidebar } = useSBAdmin2();\n  const classNames = classnames(\n    'navbar-nav',\n    'bg-gradient-primary',\n    'sidebar',\n    'sidebar-dark',\n    'accordion',\n    { toggled: sidebarToggled }\n  );\n  return (\n    <ul className={classNames} id=\"accordionSidebar\">\n      <Link\n        className=\"sidebar-brand d-flex align-items-center justify-content-center\"\n        to=\"/\"\n      >\n        <div className=\"sidebar-brand-icon rotate-n-15\">\n          {renderBrandIcon()}\n        </div>\n        <div className=\"sidebar-brand-text mx-3\">{renderBrandName()}</div>\n      </Link>\n\n      {config.map((group, idx) => (\n        <SidebarGroup key={group.name || idx} group={group} />\n      ))}\n\n      <hr className=\"sidebar-divider d-none d-md-block\" />\n\n      <div className=\"text-center d-none d-md-inline\">\n        <button\n          className=\"rounded-circle border-0\"\n          id=\"sidebarToggle\"\n          onClick={toggleSidebar}\n        ></button>\n      </div>\n    </ul>\n  );\n}\n\nSidebar.propTypes = {\n  config: PropTypes.arrayOf(SidebarGroup.propTypes.group).isRequired,\n  renderBrandIcon: PropTypes.func.isRequired,\n  renderBrandName: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { SBAdmin2Provider } from './context';\nimport PropTypes from 'prop-types';\nimport { Switch, Route } from 'react-router-dom';\nimport { NotFoundPage } from './NotFoundPage';\nimport Sidebar from './Sidebar/Sidebar';\nimport { DictionaryProvider } from './language';\n\nexport function SBAdmin2({\n  sidebarProps,\n  topbar,\n  user,\n  logout,\n  children,\n  dictionaries,\n  copyright,\n}) {\n  const Topbar = topbar;\n  return (\n    <SBAdmin2Provider user={user} logout={logout}>\n      <DictionaryProvider dictionaries={dictionaries}>\n        <div id=\"wrapper\">\n          <Sidebar {...sidebarProps} />\n          <div id=\"content-wrapper\" className=\"d-flex flex-column\">\n            <div id=\"content\">\n              <Topbar />\n              <Switch>\n                {children}\n                <Route component={NotFoundPage} />\n              </Switch>\n            </div>\n          </div>\n        </div>\n        <footer className=\"sticky-footer bg-white\">\n          <div className=\"container my-auto\">\n            <div className=\"copyright text-center my-auto\">\n              <span>Copyright &copy; {copyright}</span>\n            </div>\n          </div>\n        </footer>\n      </DictionaryProvider>\n    </SBAdmin2Provider>\n  );\n}\n\nSBAdmin2.propTypes = {\n  children: PropTypes.any,\n  copyright: PropTypes.string,\n  sidebarProps: PropTypes.shape(Sidebar.propTypes).isRequired,\n  topbar: PropTypes.elementType.isRequired,\n  user: PropTypes.shape({\n    locale: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    picture: PropTypes.string.isRequired,\n  }).isRequired,\n  logout: PropTypes.func.isRequired,\n  dictionaries: PropTypes.object,\n};\n","import React from 'react';\nimport { Form, Row, Col } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport function FormControl({ label, inline, ...props }) {\n  return (\n    <Form.Group className=\"mb-3\" as={!!inline && Row}>\n      <Form.Label column={!!inline}>{label}</Form.Label>\n      <FormControl.Input inline={inline} {...props} />\n    </Form.Group>\n  );\n}\n\nFormControl.Input = ({ inline, formData, feedback, children, ...props }) => {\n  const wrap = inline ? c => <Col sm={inline}>{c}</Col> : c => c;\n  const child = children || (\n    <Form.Control ref={formData} defaultValue={formData.default()} {...props} />\n  );\n  return wrap(\n    <>\n      {child}\n      <Form.Control.Feedback type=\"invalid\">{feedback}</Form.Control.Feedback>\n    </>\n  );\n};\n\nFormControl.propTypes = {\n  formData: PropTypes.shape({ current: PropTypes.any, init: PropTypes.any }),\n  feedback: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  inline: PropTypes.number,\n};\n\nFormControl.defaultProps = {\n  inline: 0,\n};\n","export const Variant = {\n  secondary: 'secondary',\n  primary: 'primary',\n  danger: 'danger',\n  success: 'success',\n  warning: 'warning',\n  white: 'white',\n};\n\nexport const Size = {\n  sm: 'sm',\n  lg: 'lg',\n};\n","import { faTrash } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react';\n\nimport { SplitButton, useDictionary } from '../sbadmin2';\nimport { Size, Variant } from '../sbadmin2/bootstrap';\n\nexport default function CancelButton(props) {\n  const { buttons } = useDictionary();\n  return (\n    <SplitButton\n      variant={Variant.secondary}\n      icon={faTrash}\n      size={Size.sm}\n      type='button'\n      {...props}\n    >\n      {buttons.cancel}\n    </SplitButton>\n  );\n}\n","import { faSave } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react';\n\nimport { SplitButton, useDictionary } from '../sbadmin2';\nimport { Size, Variant } from '../sbadmin2/bootstrap';\n\nexport default function SaveButton(props) {\n  const { buttons } = useDictionary();\n\n  return (\n    <SplitButton\n      icon={faSave}\n      size={Size.sm}\n      variant={Variant.primary}\n      type='submit'\n      {...props}\n    >\n      {buttons.save}\n    </SplitButton>\n  );\n}\n","import PropTypes from 'prop-types';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Form, Modal } from 'react-bootstrap';\n\nimport CancelButton from '../../common/CancelButton';\nimport SaveButton from '../../common/SaveButton';\n\nexport function FormInModal({ title, onHide, onSave, formData, children }) {\n  const [validated, setValidated] = useState(false);\n  const form = useRef();\n\n  useEffect(() => {\n    if (form.current) {\n      const firstInput = form.current.getElementsByTagName('input')[0];\n      if (firstInput) {\n        firstInput.focus();\n      }\n    }\n  }, []);\n\n  function handleSave(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    const isValid = form.current.checkValidity();\n    setValidated(true);\n    if (!isValid) {\n      return;\n    }\n    if (formData.changed()) {\n      const input = formData.value();\n      onSave(input);\n    }\n    onHide();\n    setValidated(false);\n  }\n\n  return (\n    <Form validated={validated} ref={form} onSubmit={handleSave}>\n      <Modal.Header\n        closeButton\n        className='m-0 font-weight-bold text-primary bg-light'\n      >\n        <Modal.Title>{title}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>{children}</Modal.Body>\n      <Modal.Footer className=' bg-light'>\n        <CancelButton onClick={onHide} />\n        <SaveButton onClick={handleSave} />\n      </Modal.Footer>\n    </Form>\n  );\n}\n\nFormInModal.propTypes = {\n  children: PropTypes.node.isRequired,\n  onHide: PropTypes.func.isRequired,\n  onSave: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  formData: PropTypes.any.isRequired,\n};\n","import React from 'react';\n\nimport { withDictionary } from '../sbadmin2/language';\n\nfunction Details({ entity, columns, fieldNames }) {\n  return (\n    <div className='mb-3'>\n      <div className='pl-2'>\n        {columns.map(f => {\n          return (\n            <DetailsField\n              key={f.dataField}\n              name={fieldNames[f.dataField]}\n              value={\n                f.formatter\n                  ? f.formatter(entity[f.dataField], entity)\n                  : entity[f.dataField]\n              }\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default withDictionary('fieldNames', Details);\n\nfunction DetailsField({ name, value }) {\n  return (\n    <p className='my-0'>\n      <strong>{name}:</strong> {value}\n    </p>\n  );\n}\n","import { faSyncAlt } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react';\n\nimport { IconButton } from '../sbadmin2';\nimport { Size, Variant } from '../sbadmin2/bootstrap';\n\nexport default function RefreshButton(props) {\n  return (\n    <IconButton\n      icon={faSyncAlt}\n      size={Size.sm}\n      variant={Variant.secondary}\n      type='button'\n      {...props}\n    />\n  );\n}\n","import classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { Size, Variant } from '../bootstrap';\n\nexport default function Spinner({ size, variant }) {\n  const classNames = classnames('spinner-border', {\n    [`spinner-border-${size}`]: size,\n    [`text-${variant}`]: variant,\n  });\n  return (\n    <div className={classNames} role='status'>\n      <span className='sr-only'>Loading...</span>\n    </div>\n  );\n}\n\nSpinner.propTypes = {\n  size: PropTypes.oneOf(Object.keys(Size)),\n  variant: PropTypes.oneOf(Object.keys(Variant)),\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Spinner from '../sbadmin2/utilities/Spinner';\n\nfunction ErrorMessageList({ errorMessage, subErrors }) {\n  return (\n    <>\n      {errorMessage}\n      <ul>\n        {subErrors.map((e, idx) => (\n          <li key={idx}>{e}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\nErrorMessageList.propTypes = {\n  errorMessage: PropTypes.string.isRequired,\n  subErrors: PropTypes.arrayOf(PropTypes.string),\n};\n\nfunction ErrorMessage({ error }) {\n  const subErrors = error.networkError\n    ? error.networkError.result\n      ? error.networkError.result.errors\n      : [`${error.networkError}`]\n    : error.graphQLErrors.map(e => `${e.path.join('.')}: ${e.message}`);\n  console.error(error);\n  return (\n    <div className='text-danger'>\n      <i className='fas fa-fw fa-exclamation-triangle' />\n      <ErrorMessageList errorMessage={error.message} subErrors={subErrors} />\n    </div>\n  );\n}\n\nErrorMessage.propTypes = {\n  error: PropTypes.shape({\n    networkError: PropTypes.shape({\n      result: PropTypes.shape({\n        errors: PropTypes.array,\n      }),\n    }),\n    graphQLErrors: PropTypes.arrayOf(\n      PropTypes.shape({\n        path: PropTypes.arrayOf(PropTypes.string),\n        message: PropTypes.string,\n      })\n    ),\n    message: PropTypes.string,\n  }),\n};\n\nexport function WithQuery({ query, showError, children, ...props }) {\n  const { loading, error } = query;\n  return loading ? (\n    <Spinner {...props} />\n  ) : error ? (\n    showError && <ErrorMessage error={error} />\n  ) : (\n    children(query)\n  );\n}\n\nWithQuery.propTypes = {\n  children: PropTypes.func.isRequired,\n  query: PropTypes.shape({\n    loading: PropTypes.bool.isRequired,\n    error: PropTypes.any,\n  }),\n  showError: PropTypes.bool,\n};\n\nWithQuery.defaultProps = {\n  showError: true,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport RefreshButton from '../common/RefreshButton';\nimport { WithQuery } from '../gql/WithQuery';\nimport { TablePanel } from '../sbadmin2';\n\nexport function QueryTablePanel({ query, buttons, getData, ...props }) {\n  return (\n    <WithQuery query={query} size='sm' showError={false}>\n      {({ refetch, data }) => (\n        <TablePanel\n          headerButtons={\n            <>\n              <RefreshButton onClick={() => refetch()} className='mr-1' />\n              {buttons}\n            </>\n          }\n          data={getData(data)}\n          {...props}\n        />\n      )}\n    </WithQuery>\n  );\n}\n\nQueryTablePanel.propTypes = {\n  buttons: PropTypes.node,\n  getData: PropTypes.func.isRequired,\n  query: PropTypes.shape({\n    data: PropTypes.any,\n    refetch: PropTypes.func,\n  }).isRequired,\n};\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { QueryTablePanel } from '../gql/QueryTablePanel';\n\nexport function EntityList({\n  basePath,\n  createButton,\n  name,\n  columns,\n  renderActions,\n  ...props\n}) {\n  const history = useHistory();\n  const enhancedColumns = [\n    { dataField: 'name', sort: true },\n    ...columns,\n    {\n      dataField: 'actions',\n      isDummyColumn: true,\n      formatter: (_, row) => <span>{renderActions(row)}</span>,\n      style: {\n        whiteSpace: 'nowrap',\n        width: '1%',\n        paddingBottom: 0,\n      },\n    },\n  ];\n  function onSelect(entity) {\n    history.push(`${basePath}/${encodeURIComponent(entity.name)}`);\n  }\n  return (\n    <QueryTablePanel\n      {...props}\n      columns={enhancedColumns}\n      onSelect={onSelect}\n      buttons={createButton}\n      keyField='name'\n      defaultSorted={[\n        {\n          dataField: 'name',\n          order: 'asc',\n        },\n      ]}\n      selected={name}\n    />\n  );\n}\n","export default class Day {\n  constructor(year, month, day) {\n    this.year = year;\n    this.month = month;\n    this.day = day;\n  }\n\n  static fromDate(date) {\n    return new Date(date.getYear(), date.getMonth(), date.getDate());\n  }\n\n  format() {\n    return `${this.year}-${String(this.month).padStart(2, '0')}-${String(\n      this.day\n    ).padStart(2, '0')}`;\n  }\n}\n","import Day from './Day';\n\nconst monthNames = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nexport default class Month {\n  constructor(year, month) {\n    this.year = year;\n    this.month = month;\n  }\n  static parse(string) {\n    const [year, month] = string.split('-');\n    return new Month(Number(year), Number(month));\n  }\n\n  firstDay() {\n    return new Day(this.year, this.month, 1);\n  }\n\n  lastDay() {\n    const date = new Date(this.year, this.month, 0);\n    return new Day(this.year, this.month, date.getDate());\n  }\n\n  pretty() {\n    return `${monthNames[this.month - 1]} ${this.year}`;\n  }\n}\n","import React, { createContext, useContext, useState } from 'react';\n\nexport const MonthContext = createContext();\nexport const useMonth = () => useContext(MonthContext);\n\nexport function MonthProvider({ currentMonth, children }) {\n  const [selectedMonth, setSelectedMonth] = useState(currentMonth);\n  const value = {\n    currentMonth,\n    selectedMonth,\n    setSelectedMonth,\n  };\n  return (\n    <MonthContext.Provider value={value}>{children}</MonthContext.Provider>\n  );\n}\n","import './ContextSwitcher.css';\n\nimport classNames from 'classnames';\nimport classnames from 'classnames';\nimport React, { forwardRef } from 'react';\nimport { Button, ButtonGroup, Dropdown, InputGroup } from 'react-bootstrap';\n\nexport default function ContextSwitcher({\n  className,\n  allowedValues,\n  onChange,\n  label,\n  value,\n  variant,\n  displayBg = 'light',\n  labelBg,\n  showLabel = true,\n  size,\n}) {\n  const labelClasses = classnames('border-0', { [`bg-${labelBg}`]: labelBg });\n\n  return (\n    <Dropdown\n      className={classNames(\n        'context-switcher',\n        'input-group',\n        'align-items-stretch',\n        className,\n        { [`input-group-${size}`]: size }\n      )}\n    >\n      {showLabel && (\n        <InputGroup.Prepend className='context-switcher__label d-flex align-items-stretch'>\n          <InputGroup.Text as='label' className={classnames(labelClasses)}>\n            {label}\n          </InputGroup.Text>\n        </InputGroup.Prepend>\n      )}\n\n      <Dropdown.Toggle as={Toggle} append={showLabel} size={size}>\n        {({ className, ...props }) => (\n          <>\n            <Dropdown.Menu>\n              {allowedValues.map(v => (\n                <Dropdown.Item onClick={() => onChange(v.id)} key={v.id}>\n                  {v.label}\n                </Dropdown.Item>\n              ))}\n            </Dropdown.Menu>\n            <InputGroup.Text\n              className={`bg-${displayBg} border-0 context_switcher__context-display text-dark`}\n              aria-label={label}\n            >\n              {value}\n            </InputGroup.Text>\n            <Button\n              variant={variant}\n              className={classNames(\n                'dropdown-toggle-split no-arrow ',\n                className\n              )}\n              {...props}\n            />\n          </>\n        )}\n      </Dropdown.Toggle>\n    </Dropdown>\n  );\n}\n\nconst Toggle = forwardRef(({ children, append, size, ...props }, ref) => {\n  return (\n    <ButtonGroup\n      className={classnames('context-switcher__toggle-group', {\n        'input-group-append': append,\n        [`btn-group-${size}`]: size,\n      })}\n      ref={ref}\n    >\n      {children(props)}\n    </ButtonGroup>\n  );\n});\n","import { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport React from 'react';\n\nimport Month from '../../model/Month';\nimport { useMonth } from '../context/Month';\nimport { useBudget } from '../gql/budget';\nimport { useDictionary } from '../sbadmin2';\nimport ContextSwitcher from '../sbadmin2/components/ContextSwitcher/ContextSwitcher';\nimport Spinner from '../sbadmin2/utilities/Spinner';\n\nconst GET_AVAILABLE_REPORTS = gql`\n  query availableReports($budgetID: ID!) {\n    availableReports(budgetID: $budgetID)\n  }\n`;\n\nexport default function MonthSwitcher(props) {\n  const { selectedBudget } = useBudget();\n  const { selectedMonth, setSelectedMonth } = useMonth();\n  const { months } = useDictionary();\n  const { loading, error, data } = useQuery(GET_AVAILABLE_REPORTS, {\n    variables: {\n      budgetID: selectedBudget.id,\n    },\n  });\n\n  let value;\n  let allowedValues = [];\n  if (loading) {\n    value = <Spinner size='sm' variant='secondary' />;\n  } else if (error) {\n    value = <i className='fas fa-fw fa-exclamation-triangle text-secondary' />;\n  } else {\n    allowedValues = data.availableReports\n      .sort()\n      .reverse()\n      .map(m => {\n        const parsed = Month.parse(m);\n        const label = `${months[parsed.month - 1]} ${parsed.year}`;\n        return { id: m, label };\n      });\n\n    const parsed = Month.parse(selectedMonth);\n    value = `${months[parsed.month - 1]} ${parsed.year}`;\n  }\n  return (\n    <ContextSwitcher\n      {...props}\n      value={value}\n      allowedValues={allowedValues}\n      onChange={month => setSelectedMonth(month)}\n      displayBg='white'\n      label='Month'\n      showLabel={false}\n      variant='secondary'\n      size='sm'\n    />\n  );\n}\n","import React from 'react';\nimport { Col, Row } from 'react-bootstrap';\n\nimport Details from '../common/Details';\nimport { EntityList } from '../common/EntityList';\nimport MonthSwitcher from '../common/MonthSwitcher';\nimport { WithQuery } from '../gql/WithQuery';\nimport { Page } from '../sbadmin2';\n\nexport function DetailsPage(props) {\n  const {\n    query,\n    basePath,\n    title,\n    name,\n    renderActions,\n    getData,\n    getBreadcrumbPrefix = () => [],\n  } = props;\n  return (\n    <WithQuery query={query}>\n      {({ data }) => {\n        const entity = getData(data).find(e => e.name === name);\n        return (\n          <Page>\n            <Page.Header\n              title={name}\n              actions={renderActions(entity)}\n              breadcrumbs={getBreadcrumbPrefix(entity).concat([\n                { text: title, to: basePath },\n              ])}\n            >\n              <MonthSwitcher />\n            </Page.Header>\n            <Row>\n              <Col sm={3}>\n                <EntityList visibleColumns={['name']} {...props} />\n              </Col>\n              <Col>\n                <DetailsSection entity={entity} {...props} />\n              </Col>\n            </Row>\n          </Page>\n        );\n      }}\n    </WithQuery>\n  );\n}\n\nfunction DetailsSection({\n  entity,\n  columns,\n  readColumnNames,\n  detailsComponent: AdditionalDetails,\n  name,\n}) {\n  return (\n    <>\n      <Details\n        entity={entity}\n        columns={columns}\n        titleField='name'\n        readFieldNames={readColumnNames}\n      />\n      <AdditionalDetails name={name} entity={entity} />\n    </>\n  );\n}\n","import React from 'react';\n\nimport { EntityList } from '../common/EntityList';\nimport { Page } from '../sbadmin2';\n\nexport function ListPage({ ...props }) {\n  const { title } = props;\n  return (\n    <Page>\n      <Page.Header title={title} />\n      <EntityList {...props} />\n    </Page>\n  );\n}\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport { DetailsPage } from '../layout/DetailsPage';\nimport { ListPage } from '../layout/ListPage';\nimport { withDictionary } from '../sbadmin2/language';\n\nfunction ListWithDetailsWorkflow({ ...props }) {\n  const { basePath } = props;\n\n  return (\n    <Switch>\n      <Route\n        path={`${basePath}/:name`}\n        render={({ match }) => (\n          <DetailsPage name={match.params.name} {...props} />\n        )}\n      />\n      <Route render={() => <ListPage {...props} />} />\n    </Switch>\n  );\n}\n\nexport default withDictionary('title', ListWithDetailsWorkflow);\n","import { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react';\n\nimport { IconButton } from '../sbadmin2';\nimport { Size, Variant } from '../sbadmin2/bootstrap';\n\nexport default function CreateButton(props) {\n  return (\n    <IconButton\n      icon={faPlus}\n      size={Size.sm}\n      variant={Variant.primary}\n      type='button'\n      {...props}\n    />\n  );\n}\n","import React from 'react';\nimport { Form, Row, Col } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport function InlineFormControl({ label, size, feedback, children }) {\n  return (\n    <Form.Group as={Row}>\n      <Form.Label column>{label}</Form.Label>\n      <Col sm={size}>\n        {children}\n        {feedback && (\n          <Form.Control.Feedback type=\"invalid\">\n            {feedback}\n          </Form.Control.Feedback>\n        )}\n      </Col>\n    </Form.Group>\n  );\n}\n\nInlineFormControl.propTypes = {\n  children: PropTypes.element,\n  feedback: PropTypes.string,\n  label: PropTypes.string.isRequired,\n  size: PropTypes.number,\n};\n\nInlineFormControl.defaultProps = {\n  inline: 0,\n};\n","import { useState, useRef } from 'react';\n\nfunction simpleFormData({ $init, $process, $default }, getRoot) {\n  const process = $process || (v => v);\n  const formData = { current: null };\n  const _default =\n    typeof $default === 'function' ? () => $default(getRoot()) : () => $default;\n\n  formData.value = () => {\n    if (formData.current === null) {\n      return null;\n    }\n    return process(formData.current.value);\n  };\n\n  formData.changed = () => {\n    if (formData.current === null) {\n      return $init !== null;\n    }\n    return formData.current.value !== $init;\n  };\n\n  formData.default = () =>\n    $init !== null && $init !== undefined ? $init : _default();\n\n  formData.init = () => $init;\n\n  return formData;\n}\n\nfunction arrayFormData({ $model, $init }, rerender, getRoot) {\n  const formData = $init.map(v => createFormData($model(v), rerender), getRoot);\n  formData._originalPush = formData.push;\n\n  formData.value = () => {\n    return formData.map(v => v.value());\n  };\n\n  formData.changed = () => {\n    return formData.length !== $init.length || formData.some(v => v.changed());\n  };\n\n  formData.push = v => {\n    formData._originalPush(createFormData($model(v), rerender));\n    rerender();\n  };\n\n  formData.removeAt = idx => {\n    formData.splice(idx, 1);\n    rerender();\n  };\n\n  return formData;\n}\n\nfunction compositeFormData({ $includeAllValues, ...model }, rerender, getRoot) {\n  const formData = Object.keys(model).reduce(\n    (acc, key) => ({\n      ...acc,\n      [key]: createFormData(model[key], rerender, getRoot),\n    }),\n    {}\n  );\n\n  formData.changed = () => {\n    return Object.keys(model).some(k => formData[k].changed());\n  };\n\n  formData.value = () => {\n    return Object.keys(model).reduce((acc, key) => {\n      if (!formData[key].changed() && !$includeAllValues) {\n        return acc;\n      }\n      return { ...acc, [key]: formData[key].value() };\n    }, {});\n  };\n\n  return formData;\n}\n\nfunction createFormData(model, rerender, getRoot) {\n  if (Object.prototype.hasOwnProperty.call(model, '$init')) {\n    if (Object.prototype.hasOwnProperty.call(model, '$model')) {\n      return arrayFormData(model, rerender, getRoot);\n    }\n    return simpleFormData(model, getRoot);\n  }\n  return compositeFormData(model, rerender, getRoot);\n}\n\nexport function useFormData(model) {\n  const [, setValue] = useState(false);\n  const rerender = () => setValue(v => !v);\n  let formData,\n    getRoot = () => formData;\n  formData = createFormData(model, rerender, getRoot);\n  const ref = useRef(formData);\n  return ref.current;\n}\n","import gql from 'graphql-tag';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { useBudget } from './budget';\n\nconst GET_CATEGORIES = gql`\n  query GetCategories($budgetID: ID!) {\n    categories(budgetID: $budgetID) {\n      id\n      name\n      envelope {\n        id\n        name\n      }\n      description\n    }\n  }\n`;\n\nconst CREATE_CATEGORY = gql`\n  mutation CreateCategory($budgetID: ID!, $input: CategoryInput!) {\n    createCategory(budgetID: $budgetID, in: $input) {\n      id\n      name\n      envelope {\n        id\n        name\n      }\n      description\n    }\n  }\n`;\n\nconst UPDATE_CATEGORY = gql`\n  mutation UpdateCategory($budgetID: ID!, $id: ID!, $input: CategoryUpdate!) {\n    updateCategory(budgetID: $budgetID, id: $id, in: $input) {\n      id\n      name\n      envelope {\n        id\n        name\n      }\n      description\n    }\n  }\n`;\n\nexport function useCreateCategory() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_CATEGORY, {\n    update: (cache, { data: { createCategory } }) => {\n      const { categories } = cache.readQuery({\n        query: GET_CATEGORIES,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_CATEGORIES,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          categories: categories.concat([createCategory]),\n        },\n      });\n    },\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useUpdateCategory() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_CATEGORY);\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useGetCategories() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_CATEGORIES, {\n    variables: { budgetID: selectedBudget.id },\n  });\n}\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from 'react-bootstrap';\nimport Amount from '../../model/Amount';\n\nexport function AmountInput({ placeholder, formData }) {\n  const [isValid, setIsValid] = useState(false);\n  const [value, setValue] = useState(formData.default() || '');\n  useEffect(() => {\n    formData.current = { value };\n  }, [formData, value]);\n  function onChange(e) {\n    const newValue = e.target.value;\n    setValue(newValue);\n    setIsValid(Amount.isValid(newValue));\n  }\n  return (\n    <Form.Control\n      required\n      type=\"text\"\n      placeholder={placeholder}\n      value={value}\n      onChange={onChange}\n      isValid={isValid}\n    />\n  );\n}\n\nAmountInput.propTypes = {\n  formData: PropTypes.shape({\n    default: PropTypes.func.isRequired,\n    current: PropTypes.shape({ value: PropTypes.string }),\n  }),\n  placeholder: PropTypes.string,\n};\n","import { faMinus, faPlus } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Col, Form, Row } from 'react-bootstrap';\n\nimport { useGetCategories } from '../gql/categories';\nimport { WithQuery } from '../gql/WithQuery';\nimport { Combobox, IconButton, useDictionary } from '../sbadmin2';\nimport { Size, Variant } from '../sbadmin2/bootstrap';\nimport { AmountInput } from './AmountInput';\n\nexport function CategoriesInput({ formData }) {\n  const query = useGetCategories();\n  const { expenses } = useDictionary();\n  return (\n    <WithQuery query={query}>\n      {({ data }) => (\n        <>\n          <small className='d-flex align-items-center mb-3'>\n            {expenses.modal.labels.categories}\n            <IconButton\n              icon={faPlus}\n              variant={Variant.primary}\n              size={Size.sm}\n              onClick={() =>\n                formData.push({\n                  category: { id: null },\n                  amount: null,\n                })\n              }\n              type='button'\n              borderless\n            />\n          </small>\n          {formData.map((categoryFormData, idx) => (\n            <Form.Group\n              as={Row}\n              key={categoryFormData.categoryID.init() || idx}\n              className='d-flex align-items-center'\n            >\n              <Col sm={6}>\n                <Combobox\n                  _ref={categoryFormData.categoryID}\n                  defaultValue={categoryFormData.categoryID.init()}\n                  allowedValues={data.categories.map(({ id, name }) => ({\n                    id,\n                    label: name,\n                  }))}\n                  required\n                />\n              </Col>\n              <Col className='pr-0'>\n                <AmountInput\n                  placeholder={expenses.modal.labels.amount}\n                  formData={categoryFormData.amount}\n                />\n              </Col>\n              <Col sm={1} className='px-0'>\n                <IconButton\n                  icon={faMinus}\n                  variant={Variant.danger}\n                  size={Size.sm}\n                  onClick={() => formData.removeAt(idx)}\n                  type='button'\n                  borderless\n                />\n              </Col>\n            </Form.Group>\n          ))}\n        </>\n      )}\n    </WithQuery>\n  );\n}\n\nCategoriesInput.propTypes = {\n  formData: PropTypes.array.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Amount from '../../model/Amount';\nimport Month from '../../model/Month';\nimport { useGetAccounts } from '../gql/accounts';\nimport { useBudget } from '../gql/budget';\nimport { WithQuery } from '../gql/WithQuery';\nimport { useDictionary } from '../sbadmin2';\nimport { Combobox } from '../sbadmin2';\nimport { FormControl } from '../sbadmin2/utilities/FormControl';\nimport { FormInModal } from '../sbadmin2/utilities/FormInModal';\nimport { InlineFormControl } from '../sbadmin2/utilities/InlineFormControl';\nimport { useFormData } from '../sbadmin2/utilities/useFormData';\nimport { CategoriesInput } from './CategoriesInput';\n\nexport function ExpenseModal({ account, init, ...props }) {\n  const { selectedBudget } = useBudget();\n  const { expenses } = useDictionary();\n  const accountsQuery = useGetAccounts();\n  const formData = useFormData({\n    title: { $init: init.title },\n    date: { $init: init.date },\n    accountID: {\n      $init: init.account.id,\n      $default: account && account.id,\n    },\n    categories: {\n      $init: init.categories,\n      $model: c => ({\n        categoryID: { $init: c.category.id },\n        amount: {\n          $init: Amount.format(c.amount, false),\n          $process: Amount.parse,\n        },\n        $includeAllValues: true,\n      }),\n    },\n  });\n  const month = Month.parse(selectedBudget.currentMonth.month);\n  const first = month.firstDay();\n  const last = month.lastDay();\n\n  return (\n    <FormInModal formData={formData} {...props}>\n      <WithQuery query={accountsQuery}>\n        {({ data: accountsData }) => (\n          <>\n            <FormControl\n              label={expenses.modal.labels.title}\n              inline={10}\n              formData={formData.title}\n              feedback='Provide name'\n              required\n            />\n            <FormControl\n              label={expenses.modal.labels.date}\n              inline={10}\n              formData={formData.date}\n              feedback='Provide date'\n              type='date'\n              required\n              min={first.format()}\n              max={last.format()}\n            />\n            <InlineFormControl label={expenses.modal.labels.account} size={9}>\n              <Combobox\n                _ref={formData.accountID}\n                defaultValue={formData.accountID.default()}\n                allowedValues={accountsData.accounts.map(({ id, name }) => ({\n                  id,\n                  label: name,\n                }))}\n                disabled={!!account}\n                required\n              />\n            </InlineFormControl>\n            <CategoriesInput formData={formData.categories} />\n          </>\n        )}\n      </WithQuery>\n    </FormInModal>\n  );\n}\n\nExpenseModal.propTypes = {\n  account: PropTypes.shape({\n    id: PropTypes.string,\n  }),\n  init: PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    date: PropTypes.string,\n    account: PropTypes.shape({\n      id: PropTypes.string,\n    }),\n    categories: PropTypes.array,\n  }),\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport CreateButton from '../common/CreateButton';\nimport { useCreateExpense } from '../gql/expenses';\nimport { OpenModalButton } from '../sbadmin2';\nimport { useDictionary } from '../sbadmin2';\nimport { ExpenseModal } from './ExpenseModal';\n\nexport function CreateExpenseButton({ account }) {\n  const [createExpense] = useCreateExpense();\n  const { expenses } = useDictionary();\n\n  return (\n    <OpenModalButton\n      button={props => <CreateButton {...props} />}\n      modalContent={props => (\n        <ExpenseModal\n          init={{\n            name: null,\n            account: {},\n            date: null,\n            categories: [],\n          }}\n          account={account}\n          title={expenses.modal.createTitle}\n          onSave={createExpense}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nCreateExpenseButton.propTypes = {\n  account: PropTypes.any,\n};\n","import { faEdit, faTrash } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react';\n\nimport { IconButton, OpenModalButton } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\n\nexport default function ListAction({ disabled, variant, ...props }) {\n  return (\n    <IconButton\n      variant={disabled ? Variant.secondary : variant}\n      borderless\n      disabled={disabled}\n      {...props}\n    />\n  );\n}\n\nListAction.Edit = props => (\n  <ListAction icon={faEdit} variant={Variant.primary} {...props} />\n);\n\nListAction.EditInModal = ({\n  modalComponent: Modal,\n  dictionary,\n  update,\n  init,\n  ...buttonProps\n}) => (\n  <OpenModalButton\n    button={props => <ListAction.Edit {...buttonProps} {...props} />}\n    modalContent={props => (\n      <Modal\n        init={init}\n        title={dictionary.modal.editTitle}\n        onSave={input => update(init.id, input)}\n        {...props}\n      />\n    )}\n  />\n);\n\nListAction.Delete = props => (\n  <ListAction icon={faTrash} variant={Variant.danger} {...props} />\n);\n","import React from 'react';\n\nimport { useMonth } from '../context/Month';\nimport { useDictionary } from '../sbadmin2';\nimport ListAction from './ListAction';\n\nexport default function ListActions({\n  row,\n  monthScopedResource,\n  dictionaryName,\n  modalComponent,\n  updateHook,\n  deletehook,\n}) {\n  const { currentMonth, selectedMonth } = useMonth();\n  const dictionary = useDictionary()[dictionaryName];\n  const [updateMutation] = updateHook();\n  const [deleteMutation] = deletehook();\n  const disabled = monthScopedResource && currentMonth !== selectedMonth;\n  return (\n    <span>\n      <ListAction.EditInModal\n        modalComponent={modalComponent}\n        init={row}\n        update={updateMutation}\n        dictionary={dictionary}\n        disabled={disabled}\n      />\n      <ListAction.Delete\n        onClick={() => deleteMutation(row.id)}\n        disabled={disabled}\n      />\n    </span>\n  );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Amount from '../../model/Amount';\nimport ListActions from '../common/ListActions';\nimport { useMonth } from '../context/Month';\nimport {\n  useDeleteExpense,\n  useGetExpenses,\n  useUpdateExpense,\n} from '../gql/expenses';\nimport { QueryTablePanel } from '../gql/QueryTablePanel';\nimport { ExpenseModal } from './ExpenseModal';\n\nconst footer = {\n  totalAmount: amounts => Amount.format(amounts.reduce((acc, a) => acc + a, 0)),\n};\n\nconst baseColumns = [\n  { dataField: 'title' },\n  { dataField: 'date', sort: true },\n  {\n    dataField: 'account',\n    formatter: a => <Link to={`/accounts/${a.name}`}>{a.name}</Link>,\n  },\n  {\n    dataField: 'totalAmount',\n    formatter: Amount.format,\n    align: 'right',\n    headerAlign: 'right',\n    sort: true,\n    footerAlign: 'right',\n  },\n  {\n    dataField: 'actions',\n    isDummyColumn: true,\n    formatter: (_, row) => (\n      <ListActions\n        row={row}\n        monthScopedResource\n        modalComponent={ExpenseModal}\n        dictionaryName='expenses'\n        updateHook={useUpdateExpense}\n        deletehook={useDeleteExpense}\n      />\n    ),\n    style: {\n      whiteSpace: 'nowrap',\n      width: '1%',\n    },\n  },\n];\n\nconst rowClasses = (row, rowIndex) => {\n  return rowIndex % 2 === 0 && 'table-striped';\n};\n\nconst expandRow = {\n  className: 'background-color-white',\n  renderer: row => (\n    <table className='table table-sm mb-0'>\n      <tbody>\n        {row.categories.map((category, idx) => (\n          <tr key={idx}>\n            <td className='pl-3'>{category.category.name}</td>\n            <td>{Amount.format(category.amount)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  ),\n};\n\nconst defaultSorted = [\n  {\n    dataField: 'date',\n    order: 'desc',\n  },\n];\n\nexport function ExpensesTablePanel({\n  readTitle,\n  createButton,\n  accountFilter,\n  categoryFilter,\n  addFooter = false,\n  ...props\n}) {\n  const { selectedMonth } = useMonth();\n  const query = useGetExpenses(selectedMonth);\n\n  let filters = [];\n  if (accountFilter) {\n    filters.push(row => row.account.id === accountFilter);\n  }\n  if (categoryFilter) {\n    filters.push(row =>\n      row.categories.some(c => c.category.id === categoryFilter)\n    );\n  }\n\n  const columns = !addFooter\n    ? baseColumns\n    : baseColumns.map(c => ({\n        ...c,\n        footer: footer[c.dataField] ? footer[c.dataField] : '',\n      }));\n\n  return (\n    <QueryTablePanel\n      {...props}\n      query={query}\n      getData={d => d.monthlyReport.expenses}\n      buttons={createButton}\n      columns={columns}\n      keyField='id'\n      expandRow={expandRow}\n      rowClasses={rowClasses}\n      striped={false}\n      readTitle={readTitle}\n      readColumnNames={d => d.expenses.table.columns}\n      defaultSorted={defaultSorted}\n      filters={filters}\n    />\n  );\n}\n","import './CollapsiblePanel.css';\n\nimport { faChevronDown, faChevronUp } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { createContext, useContext, useState } from 'react';\nimport { Collapse } from 'react-bootstrap';\n\nimport Panel from '../Panel/Panel';\n\nconst CollapsibleContext = createContext();\n\nexport function CollapsiblePanel({ initialyShown, ...props }) {\n  const [show, setShow] = useState(initialyShown);\n  return (\n    <CollapsibleContext.Provider\n      value={{ show, toggle: () => setShow(s => !s) }}\n    >\n      <Panel {...props} />\n    </CollapsibleContext.Provider>\n  );\n}\n\nCollapsiblePanel.propTypes = {\n  initialyShown: PropTypes.bool,\n};\nCollapsiblePanel.defaultProps = {\n  initialyShown: false,\n};\n\nfunction CollapsiblePanelHeader({ className, ...props }) {\n  const { toggle } = useContext(CollapsibleContext);\n  const classNames = classnames('collapsible-panel__header', className);\n  return (\n    <Panel.Header onClick={() => toggle()} className={classNames} {...props} />\n  );\n}\nCollapsiblePanelHeader.propTypes = {\n  className: PropTypes.string,\n};\nCollapsiblePanel.Header = CollapsiblePanelHeader;\n\nfunction CollapsiblePanelTitle({ children, ...props }) {\n  const { show } = useContext(CollapsibleContext);\n  return (\n    <Panel.Title {...props}>\n      <span className='text-secondary mr-2'>\n        <FontAwesomeIcon icon={show ? faChevronUp : faChevronDown} />\n      </span>\n      {children}\n    </Panel.Title>\n  );\n}\nCollapsiblePanelTitle.propTypes = {\n  children: PropTypes.node,\n};\nCollapsiblePanel.Title = CollapsiblePanelTitle;\n\nfunction CollapsiblePanelBody(props) {\n  const { show } = useContext(CollapsibleContext);\n  return (\n    <Collapse in={show}>\n      <Panel.Body {...props} />\n    </Collapse>\n  );\n}\nCollapsiblePanel.Body = CollapsiblePanelBody;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Amount from '../../model/Amount';\nimport Month from '../../model/Month';\nimport { useGetAccounts } from '../gql/accounts';\nimport { useBudget } from '../gql/budget';\nimport { WithQuery } from '../gql/WithQuery';\nimport { Combobox, useDictionary } from '../sbadmin2';\nimport { FormControl } from '../sbadmin2/utilities/FormControl';\nimport { FormInModal } from '../sbadmin2/utilities/FormInModal';\nimport { InlineFormControl } from '../sbadmin2/utilities/InlineFormControl';\nimport { useFormData } from '../sbadmin2/utilities/useFormData';\n\nexport function TransferModal({ toAccount, fromAccount, init, ...props }) {\n  const { selectedBudget } = useBudget();\n  const { transfers } = useDictionary();\n  const query = useGetAccounts();\n  const formData = useFormData({\n    title: { $init: init.title },\n    date: { $init: init.date },\n    amount: {\n      $init: Amount.format(init.amount, false),\n      $process: Amount.parse,\n    },\n    fromAccountID: {\n      $init: init.fromAccount && init.fromAccount.id,\n      $process: v => (v === '' ? null : v),\n      $default: fromAccount && fromAccount.id,\n    },\n    toAccountID: {\n      $init: init.toAccount.id,\n      $default: toAccount && toAccount.id,\n    },\n  });\n\n  const month = Month.parse(selectedBudget.currentMonth.month);\n  const first = month.firstDay();\n  const last = month.lastDay();\n  return (\n    <FormInModal formData={formData} {...props}>\n      <WithQuery query={query}>\n        {({ data }) => (\n          <>\n            <FormControl\n              required\n              label={transfers.modal.labels.title}\n              inline={10}\n              formData={formData.title}\n              feedback='Provide title'\n            />\n            <FormControl\n              label={transfers.modal.labels.date}\n              inline={10}\n              formData={formData.date}\n              feedback='Provide date'\n              type='date'\n              required\n              min={first.format()}\n              max={last.format()}\n            />\n            <FormControl\n              inline={10}\n              label={transfers.modal.labels.amount}\n              feedback='Provide amount'\n              type='number'\n              required\n              formData={formData.amount}\n              step='0.01'\n            />\n            <InlineFormControl\n              size={10}\n              label={transfers.modal.labels.fromAccount}\n            >\n              <Combobox\n                allowedValues={data.accounts.map(({ id, name }) => ({\n                  id,\n                  label: name,\n                }))}\n                _ref={formData.fromAccountID}\n                defaultValue={formData.fromAccountID.default()}\n                disabled={!!fromAccount}\n              />\n            </InlineFormControl>\n            <InlineFormControl\n              size={10}\n              label={transfers.modal.labels.toAccount}\n            >\n              <Combobox\n                allowedValues={data.accounts.map(({ id, name }) => ({\n                  id,\n                  label: name,\n                }))}\n                _ref={formData.toAccountID}\n                defaultValue={formData.toAccountID.default()}\n                disabled={!!toAccount}\n              />\n            </InlineFormControl>\n          </>\n        )}\n      </WithQuery>\n    </FormInModal>\n  );\n}\n\nTransferModal.propTypes = {\n  fromAccount: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }),\n  init: PropTypes.shape({\n    title: PropTypes.string,\n    date: PropTypes.string,\n    amount: PropTypes.number,\n    fromAccount: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n    }),\n    toAccount: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n    }),\n  }),\n  toAccount: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }),\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport CreateButton from '../common/CreateButton';\nimport { useCreateTransfer } from '../gql/transfers';\nimport { OpenModalButton } from '../sbadmin2';\nimport { useDictionary } from '../sbadmin2';\nimport { TransferModal } from './TransferModal';\n\nexport function CreateTransferButton({ toAccount, fromAccount }) {\n  const [createTransfer] = useCreateTransfer();\n  const { transfers } = useDictionary();\n  return (\n    <OpenModalButton\n      button={props => <CreateButton {...props} />}\n      modalContent={props => (\n        <TransferModal\n          init={{\n            title: null,\n            fromAccount: { id: null },\n            toAccount: { id: null },\n            amount: null,\n            date: null,\n          }}\n          title={transfers.modal.createTitle}\n          onSave={createTransfer}\n          toAccount={toAccount}\n          fromAccount={fromAccount}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nCreateTransferButton.propTypes = {\n  fromAccount: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }),\n  toAccount: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }),\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Amount from '../../model/Amount';\nimport ListActions from '../common/ListActions';\nimport { useMonth } from '../context/Month';\nimport { QueryTablePanel } from '../gql/QueryTablePanel';\nimport {\n  useDeleteTranfer,\n  useGetTransfers,\n  useUpdateTransfer,\n} from '../gql/transfers';\nimport { TransferModal } from './TransferModal';\n\nconst columns = [\n  { dataField: 'title' },\n  {\n    dataField: 'fromAccount',\n    formatter: a => a && <Link to={`/accounts/${a.name}`}>{a.name}</Link>,\n  },\n  {\n    dataField: 'toAccount',\n    formatter: a => a && <Link to={`/accounts/${a.name}`}>{a.name}</Link>,\n  },\n  {\n    dataField: 'amount',\n    align: 'right',\n    headerAlign: 'right',\n    formatter: Amount.format,\n  },\n  {\n    dataField: 'date',\n    align: 'right',\n    headerAlign: 'right',\n  },\n  {\n    dataField: 'actions',\n    isDummyColumn: true,\n    formatter: (cell, row) => (\n      <ListActions\n        row={row}\n        monthScopedResource\n        modalComponent={TransferModal}\n        dictionaryName='transfers'\n        updateHook={useUpdateTransfer}\n        deletehook={useDeleteTranfer}\n      />\n    ),\n    style: {\n      whiteSpace: 'nowrap',\n      width: '1%',\n    },\n  },\n];\n\nexport function TransfersTablePanel({\n  toAccountFilter,\n  fromAccountFilter,\n  createButton,\n  ...props\n}) {\n  const { selectedMonth } = useMonth();\n  const query = useGetTransfers(selectedMonth);\n  let filters = [];\n  if (toAccountFilter) {\n    filters.push(row => row.toAccount.id === toAccountFilter);\n  }\n  if (fromAccountFilter) {\n    filters.push(\n      row => row.fromAccount && row.fromAccount.id === fromAccountFilter\n    );\n  }\n  return (\n    <QueryTablePanel\n      {...props}\n      query={query}\n      getData={data => data.monthlyReport.transfers}\n      buttons={createButton}\n      columns={columns}\n      keyField='id'\n      readColumnNames={d => d.transfers.table.columns}\n      filters={filters}\n    />\n  );\n}\n\nTransfersTablePanel.propTypes = {\n  createButton: PropTypes.node.isRequired,\n  fromAccountFilter: PropTypes.string,\n  toAccountFilter: PropTypes.string,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { CreateExpenseButton } from '../Expenses/CreateExpenseButton';\nimport { ExpensesTablePanel } from '../Expenses/ExpensesTablePanel';\nimport { CollapsiblePanel } from '../sbadmin2/components/CollapsiblePanel/CollapsiblePanel';\nimport { CreateTransferButton } from '../Transfers/CreateTransferButton';\nimport { TransfersTablePanel } from '../Transfers/TransfersTablePanel';\n\nexport function AccountDetails({ entity: account }) {\n  return (\n    <>\n      <TransfersTablePanel\n        readTitle={d => d.accounts.inTransfersTableTitle}\n        createButton={<CreateTransferButton toAccount={account} />}\n        accountFilter={account.id}\n        hiddenColumns={['toAccount']}\n        wrapper={CollapsiblePanel}\n        toAccountFilter={account.id}\n      />\n      <TransfersTablePanel\n        readTitle={d => d.accounts.outTransfersTableTitle}\n        createButton={<CreateTransferButton fromAccount={account} />}\n        accountFilter={account.id}\n        hiddenColumns={['fromAccount']}\n        wrapper={CollapsiblePanel}\n        fromAccountFilter={account.id}\n      />\n      <ExpensesTablePanel\n        readTitle={d => d.accounts.expensesTableTitle}\n        createButton={<CreateExpenseButton account={account} />}\n        accountFilter={account.id}\n        hiddenColumns={['account']}\n        wrapper={CollapsiblePanel}\n      />\n    </>\n  );\n}\n\nAccountDetails.propTypes = {\n  entity: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  }),\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormControl, FormInModal, useDictionary } from '../sbadmin2';\nimport { useFormData } from '../sbadmin2/utilities/useFormData';\n\nexport function AccountModal({ init, ...props }) {\n  const { accounts } = useDictionary();\n  const formData = useFormData({\n    name: { $init: init.name },\n  });\n  return (\n    <FormInModal formData={formData} {...props}>\n      <FormControl\n        label={accounts.modal.labels.name}\n        inline={10}\n        formData={formData.name}\n        feedback=\"Provide name\"\n      />\n    </FormInModal>\n  );\n}\n\nAccountModal.propTypes = {\n  init: PropTypes.shape({ name: PropTypes.string }).isRequired,\n};\n","import React from 'react';\n\nimport CreateButton from '../common/CreateButton';\nimport { useCreateAccount } from '../gql/accounts';\nimport { OpenModalButton } from '../sbadmin2';\nimport { useDictionary } from '../sbadmin2';\nimport { AccountModal } from './AccountModal';\n\nexport function CreateAccountButton() {\n  const [createAccount] = useCreateAccount();\n  const { accounts } = useDictionary();\n  return (\n    <OpenModalButton\n      button={props => <CreateButton {...props} />}\n      modalContent={props => (\n        <AccountModal\n          init={{ name: '' }}\n          title={accounts.modal.createTitle}\n          onSave={createAccount}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n","import './UpdateAccountButton.css';\n\nimport { faEdit } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useUpdateAccount } from '../gql/accounts';\nimport { IconButton, OpenModalButton, useDictionary } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\nimport { AccountModal } from './AccountModal';\n\nexport function UpdateAccountButton({ account }) {\n  const [updateAccount] = useUpdateAccount();\n  const { accounts } = useDictionary();\n  return (\n    <OpenModalButton\n      button={props => (\n        <IconButton\n          className='accounts__update-button'\n          icon={faEdit}\n          variant={Variant.primary}\n          borderless\n          {...props}\n        />\n      )}\n      modalContent={props => (\n        <AccountModal\n          init={account}\n          title={accounts.modal.editTitle}\n          onSave={input => updateAccount(account.id, input)}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nUpdateAccountButton.propTypes = {\n  account: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n  }),\n};\n","import { faArchive } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react';\n\nimport Amount from '../../model/Amount';\nimport { useGetAccounts } from '../gql/accounts';\nimport { IconButton } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\nimport ListWithDetailsWorkflow from '../workflow/ListWithDetailsWorkflow';\nimport { AccountDetails } from './AccountDetails';\nimport { CreateAccountButton } from './CreateAccountButton';\nimport { UpdateAccountButton } from './UpdateAccountButton';\n\nconst columns = [\n  {\n    dataField: 'balance',\n    align: 'right',\n    headerAlign: 'right',\n    formatter: Amount.format,\n  },\n];\n\nexport default function AccountsPage() {\n  const query = useGetAccounts();\n\n  return (\n    <ListWithDetailsWorkflow\n      basePath='/accounts'\n      readTitle={d => d.sidebar.pages.accounts}\n      detailsComponent={AccountDetails}\n      query={query}\n      createButton={<CreateAccountButton />}\n      getData={data => data.accounts}\n      columns={columns}\n      readColumnNames={d => d.accounts.table.columns}\n      renderActions={account => (\n        <>\n          <UpdateAccountButton account={account} />\n          <IconButton icon={faArchive} variant={Variant.secondary} borderless />\n        </>\n      )}\n    />\n  );\n}\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport { DetailsPage } from '../layout/DetailsPage';\nimport { withDictionary } from '../sbadmin2/language';\n\nfunction DetailsWorkflow({ ...props }) {\n  const { basePath } = props;\n  return (\n    <Switch>\n      <Route\n        path={`${basePath}/:name`}\n        render={({ match }) => (\n          <DetailsPage\n            name={decodeURIComponent(match.params.name)}\n            {...props}\n          />\n        )}\n      />\n    </Switch>\n  );\n}\n\nexport default withDictionary('title', DetailsWorkflow);\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useGetEnvelopes } from '../gql/envelopes';\nimport { WithQuery } from '../gql/WithQuery';\nimport { Combobox } from '../sbadmin2';\nimport { useDictionary } from '../sbadmin2/language';\nimport { FormControl } from '../sbadmin2/utilities/FormControl';\nimport { FormInModal } from '../sbadmin2/utilities/FormInModal';\nimport { InlineFormControl } from '../sbadmin2/utilities/InlineFormControl';\nimport { useFormData } from '../sbadmin2/utilities/useFormData';\n\nexport function CategoryModal({ init, envelope, ...props }) {\n  const query = useGetEnvelopes();\n  const { categories } = useDictionary();\n  const formData = useFormData({\n    name: { $init: init.name },\n    envelopeID: {\n      $init: init.envelope.id,\n      $default: envelope && envelope.id,\n    },\n    description: { $init: init.description },\n  });\n  return (\n    <FormInModal formData={formData} {...props}>\n      <WithQuery query={query}>\n        {({ data }) => (\n          <>\n            <FormControl\n              label={categories.modal.labels.name}\n              inline={9}\n              formData={formData.name}\n              feedback='Provide name'\n            />\n            <InlineFormControl\n              size={9}\n              label={categories.modal.labels.envelope}\n            >\n              <Combobox\n                allowedValues={data.envelopes.map(({ id, name }) => ({\n                  id,\n                  label: name,\n                }))}\n                _ref={formData.envelopeID}\n                defaultValue={formData.envelopeID.default()}\n                disabled={!!envelope}\n                required\n              />\n            </InlineFormControl>\n            <FormControl\n              label={categories.modal.labels.description}\n              inline={9}\n              formData={formData.description}\n              feedback='Provide description'\n            />\n          </>\n        )}\n      </WithQuery>\n    </FormInModal>\n  );\n}\n\nCategoryModal.propTypes = {\n  envelope: PropTypes.shape({\n    id: PropTypes.string,\n  }),\n  id: PropTypes.string,\n  init: PropTypes.shape({\n    name: PropTypes.string,\n    envelope: PropTypes.shape({\n      id: PropTypes.string,\n    }).isRequired,\n    description: PropTypes.string,\n  }),\n  name: PropTypes.string,\n  onSave: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport CreateButton from '../common/CreateButton';\nimport { useCreateCategory } from '../gql/categories';\nimport { OpenModalButton } from '../sbadmin2';\nimport { useDictionary } from '../sbadmin2/language';\nimport { CategoryModal } from './CategoryModal';\n\nexport function CreateCategoryButton({ envelope, onClickRef }) {\n  const [createCategory] = useCreateCategory();\n  const { categories } = useDictionary();\n  return (\n    <OpenModalButton\n      onClickRef={onClickRef}\n      button={props => <CreateButton {...props} />}\n      modalContent={props => (\n        <CategoryModal\n          title={categories.modal.createTitle}\n          init={{ name: '', envelope: { id: null }, description: '' }}\n          onSave={createCategory}\n          envelope={envelope}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nCreateCategoryButton.propTypes = {\n  onClickRef: PropTypes.shape({ current: PropTypes.any }),\n};\n","import { faEdit } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useUpdateCategory } from '../gql/categories';\nimport { IconButton, OpenModalButton, useDictionary } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\nimport { CategoryModal } from './CategoryModal';\n\nexport function UpdateCategoryButton({ category }) {\n  const [updateEnvelope] = useUpdateCategory();\n  const { categories } = useDictionary();\n  const onSave = input => {\n    updateEnvelope(category.id, input);\n  };\n  return (\n    <OpenModalButton\n      button={props => (\n        <IconButton\n          icon={faEdit}\n          variant={Variant.primary}\n          {...props}\n          borderless\n        />\n      )}\n      modalContent={props => (\n        <CategoryModal\n          title={categories.modal.editTitle}\n          init={category}\n          onSave={onSave}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nUpdateCategoryButton.propTypes = {\n  category: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n  }),\n};\n","import { faArchive } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useGetCategories } from '../gql/categories';\nimport { QueryTablePanel } from '../gql/QueryTablePanel';\nimport { IconButton } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\nimport { CreateCategoryButton } from './CreateCategoryButton';\nimport { UpdateCategoryButton } from './UpdateCategoryButton';\n\nexport const columns = [\n  {\n    dataField: 'envelope',\n    formatter: a => <Link to={`/envelopes/${a.name}`}>{a.name}</Link>,\n    sort: true,\n  },\n  { dataField: 'description' },\n];\n\nconst defaultSorted = [\n  {\n    dataField: 'name',\n    order: 'asc',\n  },\n];\n\nexport function CategoriesTablePanel({ envelopeFilter, ...props }) {\n  const query = useGetCategories();\n\n  let filters = [];\n  if (envelopeFilter) {\n    filters.push(row => row.envelope.id === envelopeFilter.id);\n  }\n\n  return (\n    <QueryTablePanel\n      {...props}\n      keyField='id'\n      columns={[\n        { dataField: 'name', sort: true },\n        ...columns,\n        {\n          dataField: 'actions',\n          isDummyColumn: true,\n          formatter: (cell, row) => (\n            <span>\n              <UpdateCategoryButton category={row} />\n              <IconButton\n                icon={faArchive}\n                variant={Variant.secondary}\n                borderless\n              />\n            </span>\n          ),\n          style: {\n            whiteSpace: 'nowrap',\n            width: '1%',\n          },\n        },\n      ]}\n      buttons={<CreateCategoryButton envelope={envelopeFilter} />}\n      query={query}\n      getData={data => data.categories}\n      readTitle={d => d.categories.table.title}\n      readColumnNames={d => d.categories.table.columns}\n      defaultSorted={defaultSorted}\n      filters={filters}\n    />\n  );\n}\n","import { faArchive } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react';\n\nimport { CreateExpenseButton } from '../Expenses/CreateExpenseButton';\nimport { ExpensesTablePanel } from '../Expenses/ExpensesTablePanel';\nimport { useGetCategories } from '../gql/categories';\nimport { IconButton } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\nimport { CollapsiblePanel } from '../sbadmin2/components/CollapsiblePanel/CollapsiblePanel';\nimport DetailsWorkflow from '../workflow/DetailsWorkflow';\nimport { columns } from './CategoriesTablePanel';\nimport { CreateCategoryButton } from './CreateCategoryButton';\nimport { UpdateCategoryButton } from './UpdateCategoryButton';\n\nexport default function CategoryPage() {\n  const query = useGetCategories();\n\n  return (\n    <DetailsWorkflow\n      basePath='/categories'\n      readTitle={d => d.categories.table.title}\n      getBreadcrumbPrefix={category => [\n        { to: '/envelopes', readText: d => d.sidebar.pages.envelopes },\n        {\n          to: `/envelopes/${category.envelope.name}`,\n          text: category.envelope.name,\n        },\n      ]}\n      query={query}\n      getData={d => d.categories}\n      renderActions={row => (\n        <span>\n          <UpdateCategoryButton category={row} />\n          <IconButton icon={faArchive} variant={Variant.secondary} borderless />\n        </span>\n      )}\n      columns={columns}\n      readColumnNames={d => d.categories.table.columns}\n      detailsComponent={CategoryDetails}\n      createButton={<CreateCategoryButton />}\n    />\n  );\n}\n\nfunction CategoryDetails(props) {\n  return (\n    <>\n      <CategoryExpenses {...props} />\n    </>\n  );\n}\n\nfunction CategoryExpenses({ entity }) {\n  return (\n    <ExpensesTablePanel\n      readTitle={d => d.expenses.table.title}\n      createButton={<CreateExpenseButton />}\n      wrapper={CollapsiblePanel}\n      categoryFilter={entity.id}\n      addFooter={true}\n    />\n  );\n}\n","import Amount from './Amount';\n\nexport default class Envelope {\n  static overLimit(envelope) {\n    return envelope.limit !== null && envelope.limit < envelope.balance\n      ? Amount.format(envelope.balance - envelope.limit)\n      : '-';\n  }\n}\n","import React, { useState } from 'react';\nimport { Form, Row } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { FormControl } from './FormControl';\n\nexport function OptionalFormControl({\n  initEnabled,\n  label,\n  inline,\n  formData,\n  ...props\n}) {\n  const [enabled, setEnabled] = useState(initEnabled);\n  const toggleEnabled = () => setEnabled(v => !v);\n  return (\n    <Form.Group className=\"mb-3\" as={!!inline && Row}>\n      <Form.Label column={!!inline}>\n        <Form.Check custom type=\"switch\">\n          <Form.Check.Input checked={enabled} onChange={toggleEnabled} />\n          <Form.Check.Label onClick={toggleEnabled}>{label}</Form.Check.Label>\n        </Form.Check>\n      </Form.Label>\n      {enabled && (\n        <FormControl.Input\n          autoFocus\n          formData={formData}\n          inline={inline}\n          {...props}\n        />\n      )}\n    </Form.Group>\n  );\n}\n\nOptionalFormControl.propTypes = {\n  initEnabled: PropTypes.bool,\n  formData: PropTypes.shape({ current: PropTypes.any, init: PropTypes.any }),\n  feedback: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  inline: PropTypes.number,\n};\n\nOptionalFormControl.defaultProps = {\n  inline: 0,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Amount from '../../model/Amount';\nimport { AmountInput } from '../Expenses/AmountInput';\nimport { useGetEnvelopes } from '../gql/envelopes';\nimport { WithQuery } from '../gql/WithQuery';\nimport { Combobox, useDictionary } from '../sbadmin2';\nimport { FormControl } from '../sbadmin2/utilities/FormControl';\nimport { FormInModal } from '../sbadmin2/utilities/FormInModal';\nimport { InlineFormControl } from '../sbadmin2/utilities/InlineFormControl';\nimport { OptionalFormControl } from '../sbadmin2/utilities/OptionalFormControl';\nimport { useFormData } from '../sbadmin2/utilities/useFormData';\n\nexport function PlanModal({ init, fromEnvelope, toEnvelope, ...props }) {\n  const query = useGetEnvelopes();\n  const { plans } = useDictionary();\n  const formData = useFormData({\n    title: { $init: init.title },\n    currentAmount: {\n      $init: Amount.format(init.currentAmount, false),\n      $process: Amount.parse,\n    },\n    recurringAmount: {\n      $init: Amount.format(init.recurringAmount, false),\n      $default: fd => Amount.format(fd.currentAmount.value()),\n      $process: Amount.parse,\n    },\n    fromEnvelopeID: {\n      $init: init.fromEnvelope !== null ? init.fromEnvelope.id : '',\n      $process: v => (v === '' ? null : v),\n      $default: fromEnvelope && fromEnvelope.id,\n    },\n    toEnvelopeID: {\n      $init: init.toEnvelope !== null ? init.toEnvelope.id : '',\n      $process: v => (v === '' ? null : v),\n      $default: toEnvelope && toEnvelope.id,\n    },\n  });\n  return (\n    <FormInModal formData={formData} {...props}>\n      <WithQuery query={query}>\n        {({ data }) => (\n          <>\n            <FormControl\n              required\n              label={plans.modal.labels.title}\n              inline={10}\n              formData={formData.title}\n              feedback='Provide title'\n            />\n            <FormControl inline={8} label={plans.modal.labels.amount}>\n              <AmountInput formData={formData.currentAmount} />\n            </FormControl>\n            <OptionalFormControl\n              initEnabled={init.recurringAmount !== null}\n              inline={8}\n              label={plans.modal.labels.recurring}\n              feedback='Provide amount for recurring plans'\n              type='number'\n              required\n              formData={formData.recurringAmount}\n              step='0.01'\n            />\n            <InlineFormControl size={8} label={plans.modal.labels.fromEnvelope}>\n              <Combobox\n                _ref={formData.fromEnvelopeID}\n                defaultValue={formData.fromEnvelopeID.default()}\n                allowedValues={data.envelopes\n                  .map(({ id, name }) => ({\n                    id,\n                    label: name,\n                  }))\n                  .concat([{ id: null, label: '' }])}\n                disabled={!!fromEnvelope}\n              />\n            </InlineFormControl>\n            <InlineFormControl size={8} label={plans.modal.labels.toEnvelope}>\n              <Combobox\n                _ref={formData.toEnvelopeID}\n                defaultValue={formData.toEnvelopeID.default()}\n                allowedValues={data.envelopes\n                  .map(({ id, name }) => ({\n                    id,\n                    label: name,\n                  }))\n                  .concat([{ id: null, label: '' }])}\n                disabled={!!toEnvelope}\n              />\n            </InlineFormControl>\n          </>\n        )}\n      </WithQuery>\n    </FormInModal>\n  );\n}\n\nPlanModal.propTypes = {\n  init: PropTypes.shape({\n    title: PropTypes.string,\n    currentAmount: PropTypes.number,\n    recurringAmount: PropTypes.number,\n    fromEnvelope: PropTypes.shape({ id: PropTypes.any.isRequired }),\n    toEnvelope: PropTypes.shape({ id: PropTypes.any.isRequired }),\n  }),\n};\n","import React from 'react';\n\nimport CreateButton from '../common/CreateButton';\nimport { useCreatePlan } from '../gql/plans';\nimport { OpenModalButton, useDictionary } from '../sbadmin2';\nimport { PlanModal } from './PlanModal';\n\nexport function CreatePlanButton(otherProps) {\n  const [createPlan] = useCreatePlan();\n  const { plans } = useDictionary();\n  return (\n    <OpenModalButton\n      button={props => <CreateButton {...props} />}\n      modalContent={props => (\n        <PlanModal\n          {...otherProps}\n          init={{\n            title: null,\n            fromEnvelope: { id: null },\n            toEnvelope: { id: null },\n            currentAmount: null,\n            recurringAmount: null,\n            date: null,\n          }}\n          title={plans.modal.createTitle}\n          onSave={createPlan}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n","import { faTrash } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useDeletePlan } from '../gql/plans';\nimport { IconButton } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\n\nexport function DeletePlanButton({ plan }) {\n  const [deletePlan] = useDeletePlan();\n  return (\n    <IconButton\n      icon={faTrash}\n      variant={Variant.secondary}\n      onClick={() => deletePlan(plan.id)}\n      borderless\n    />\n  );\n}\n\nDeletePlanButton.propTypes = {\n  plan: PropTypes.shape({ id: PropTypes.any.isRequired }).isRequired,\n};\n","import { faEdit } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useUpdatePlan } from '../gql/plans';\nimport { IconButton, OpenModalButton, useDictionary } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\nimport { PlanModal } from './PlanModal';\n\nexport function UpdatePlanButton({ plan }) {\n  const [updatePlan] = useUpdatePlan();\n  const { plans } = useDictionary();\n  return (\n    <OpenModalButton\n      button={props => (\n        <IconButton\n          icon={faEdit}\n          variant={Variant.primary}\n          borderless\n          {...props}\n        />\n      )}\n      modalContent={props => (\n        <PlanModal\n          init={plan}\n          title={plans.modal.editTitle}\n          onSave={input => updatePlan(plan.id, input)}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nUpdatePlanButton.propTypes = {\n  plan: PropTypes.shape({ id: PropTypes.any.isRequired }).isRequired,\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Amount from '../../model/Amount';\nimport { useGetCurrentPlans } from '../gql/plans';\nimport { QueryTablePanel } from '../gql/QueryTablePanel';\nimport { CreatePlanButton } from './CreatePlanButton';\nimport { DeletePlanButton } from './DeletePlanButton';\nimport { UpdatePlanButton } from './UpdatePlanButton';\n\nexport function PlansTablePanel({ fromEnvelope, toEnvelope, ...props }) {\n  const query = useGetCurrentPlans();\n\n  let filters = [];\n  if (fromEnvelope) {\n    filters.push(\n      row => row.fromEnvelope && row.fromEnvelope.id === fromEnvelope.id\n    );\n  }\n  if (toEnvelope) {\n    filters.push(row => row.toEnvelope && row.toEnvelope.id === toEnvelope.id);\n  }\n\n  return (\n    <QueryTablePanel\n      query={query}\n      getData={data => data.budget.currentMonth.plans}\n      buttons={\n        <CreatePlanButton fromEnvelope={fromEnvelope} toEnvelope={toEnvelope} />\n      }\n      columns={columns}\n      keyField='id'\n      readTitle={d => d.plans.table.title}\n      readColumnNames={d => d.plans.table.columns}\n      defaultSorted={defaultSorted}\n      filters={filters}\n      {...props}\n    />\n  );\n}\n\nconst columns = [\n  { dataField: 'title', sort: true },\n  {\n    dataField: 'fromEnvelope',\n    sort: true,\n    sortValue: cell => (cell ? cell.name : ''),\n    formatter: a => a && <Link to={`/envelopes/${a.name}`}>{a.name}</Link>,\n  },\n  {\n    dataField: 'toEnvelope',\n    sort: true,\n    sortValue: cell => (cell ? cell.name : ''),\n    formatter: a => a && <Link to={`/envelopes/${a.name}`}>{a.name}</Link>,\n  },\n  {\n    dataField: 'currentAmount',\n    formatter: Amount.format,\n    align: 'right',\n    headerAlign: 'right',\n  },\n  {\n    dataField: 'recurringAmount',\n    formatter: a =>\n      a !== null ? <i className='fas fa-fw fa-sync-alt' /> : null,\n  },\n  {\n    dataField: 'actions',\n    isDummyColumn: true,\n    formatter: (_, row) => (\n      <span>\n        <UpdatePlanButton plan={row} />\n        <DeletePlanButton plan={row} />\n      </span>\n    ),\n    style: {\n      whiteSpace: 'nowrap',\n      width: '1%',\n    },\n  },\n];\n\nconst defaultSorted = [\n  {\n    dataField: 'title',\n    order: 'asc',\n  },\n];\n","import PropTypes from 'prop-types';\n\nexport const Amount = PropTypes.number;\n\nexport const Account = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n});\n\nexport const Expense = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  date: PropTypes.string,\n  totalBalance: Amount.isRequired,\n  location: PropTypes.string,\n  account: Account,\n});\n\nexport const Envelope = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n});\n\nexport const Category = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  envelope: Envelope,\n});\n","import React from 'react';\nimport Amount from '../../model/Amount';\nimport { FormControl } from '../sbadmin2/utilities/FormControl';\nimport { OptionalFormControl } from '../sbadmin2/utilities/OptionalFormControl';\nimport { FormInModal } from '../sbadmin2/utilities/FormInModal';\nimport { useFormData } from '../sbadmin2/utilities/useFormData';\nimport PropTypes from 'prop-types';\nimport * as model from '../../model/propTypes';\nimport { useDictionary } from '../sbadmin2/language';\n\nexport function EnvelopeModal({ init, ...props }) {\n  const { envelopes } = useDictionary();\n  const formData = useFormData({\n    name: { $init: init.name },\n    limit: { $init: Amount.format(init.limit, false), $process: Amount.parse },\n  });\n  return (\n    <FormInModal formData={formData} {...props}>\n      <FormControl\n        label={envelopes.modal.labels.name}\n        inline={9}\n        feedback=\"Provide a name for the envelope\"\n        required\n        formData={formData.name}\n      />\n      <OptionalFormControl\n        initEnabled={!!init.limit}\n        inline={9}\n        label={envelopes.modal.labels.limit}\n        feedback=\"Provide a limit for the envelope\"\n        type=\"number\"\n        required\n        formData={formData.limit}\n        step=\"0.01\"\n      />\n    </FormInModal>\n  );\n}\n\nEnvelopeModal.propTypes = {\n  init: PropTypes.shape({\n    name: PropTypes.string,\n    limit: model.Amount,\n  }).isRequired,\n  onSave: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport CreateButton from '../common/CreateButton';\nimport { useCreateEnvelope } from '../gql/envelopes';\nimport { OpenModalButton } from '../sbadmin2';\nimport { useDictionary } from '../sbadmin2/language';\nimport { EnvelopeModal } from './EnvelopeModal';\n\nexport function CreateEnvelopeButton({ onClickRef }) {\n  const [createEnvelope] = useCreateEnvelope();\n  const { envelopes } = useDictionary();\n  return (\n    <OpenModalButton\n      onClickRef={onClickRef}\n      button={props => <CreateButton {...props} />}\n      modalContent={props => (\n        <EnvelopeModal\n          title={envelopes.modal.createTitle}\n          init={{ name: '', limit: null }}\n          onSave={createEnvelope}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nCreateEnvelopeButton.propTypes = {\n  onClickRef: PropTypes.shape({ current: PropTypes.any }),\n};\n","import { faEdit } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useUpdateEnvelope } from '../gql/envelopes';\nimport { IconButton, OpenModalButton, useDictionary } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\nimport { EnvelopeModal } from './EnvelopeModal';\n\nexport function UpdateEnvelopeButton({ envelope }) {\n  const [updateEnvelope] = useUpdateEnvelope();\n  const { envelopes } = useDictionary();\n\n  const onSave = input => {\n    updateEnvelope(envelope.id, input);\n  };\n  return (\n    <OpenModalButton\n      button={props => (\n        <IconButton\n          icon={faEdit}\n          variant={Variant.primary}\n          borderless\n          {...props}\n        />\n      )}\n      modalContent={props => (\n        <EnvelopeModal\n          title={envelopes.modal.editTitle}\n          init={envelope}\n          onSave={onSave}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nUpdateEnvelopeButton.propTypes = {\n  envelope: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n  }),\n};\n","import { faArchive } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport Amount from '../../model/Amount';\nimport Envelope from '../../model/Envelope';\nimport { CategoriesTablePanel } from '../Categories/CategoriesTablePanel';\nimport { useGetEnvelopes } from '../gql/envelopes';\nimport { PlansTablePanel } from '../Plans/PlansTablePanel';\nimport { IconButton } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\nimport { CollapsiblePanel } from '../sbadmin2/components/CollapsiblePanel/CollapsiblePanel';\nimport ListWithDetailsWorkflow from '../workflow/ListWithDetailsWorkflow';\nimport { CreateEnvelopeButton } from './CreateEnvelopeButton';\nimport { UpdateEnvelopeButton } from './UpdateEnvelopeButton';\n\nconst columns = [\n  {\n    dataField: 'balance',\n    formatter: Amount.format,\n    align: 'right',\n    headerAlign: 'right',\n  },\n  {\n    dataField: 'limit',\n    formatter: Amount.format,\n    align: 'right',\n    headerAlign: 'right',\n  },\n  {\n    dataField: 'overLimit',\n    align: 'right',\n    headerAlign: 'right',\n    formatter: (_, row) => Envelope.overLimit(row),\n  },\n];\n\nexport default function EnvelopesPage() {\n  const query = useGetEnvelopes();\n\n  return (\n    <ListWithDetailsWorkflow\n      basePath='/envelopes'\n      readTitle={d => d.sidebar.pages.envelopes}\n      detailsComponent={EnvelopeDetails}\n      query={query}\n      createButton={<CreateEnvelopeButton />}\n      getData={data => data.envelopes}\n      columns={columns}\n      readColumnNames={d => d.envelopes.table.columns}\n      renderActions={envelope => (\n        <>\n          <UpdateEnvelopeButton envelope={envelope} />\n          <IconButton icon={faArchive} variant={Variant.secondary} borderless />\n        </>\n      )}\n    />\n  );\n}\n\nexport function EnvelopeDetails({ entity }) {\n  const history = useHistory();\n\n  function handleCategoryOnSelect(category) {\n    history.push(`/categories/${encodeURIComponent(category.name)}`);\n  }\n\n  return (\n    <>\n      <CategoriesTablePanel\n        hiddenColumns={['envelope']}\n        envelopeFilter={entity}\n        wrapper={CollapsiblePanel}\n        onSelect={handleCategoryOnSelect}\n      />\n      <PlansTablePanel\n        hiddenColumns={['toEnvelope']}\n        toEnvelope={entity}\n        wrapper={CollapsiblePanel}\n        readTitle={d => d.envelopes.inPlansTableTitle}\n      />\n      <PlansTablePanel\n        hiddenColumns={['fromEnvelope']}\n        fromEnvelope={entity}\n        wrapper={CollapsiblePanel}\n        readTitle={d => d.envelopes.outPlansTableTitle}\n      />\n    </>\n  );\n}\n","import React from 'react';\n\nimport MonthSwitcher from '../common/MonthSwitcher';\nimport { Page } from '../sbadmin2';\nimport { CreateExpenseButton } from './CreateExpenseButton';\nimport { ExpensesTablePanel } from './ExpensesTablePanel';\n\nexport default function ExpensesPage() {\n  return (\n    <Page>\n      <Page.Header readTitle={d => d.sidebar.pages.expenses}>\n        <MonthSwitcher />\n      </Page.Header>\n      <ExpensesTablePanel\n        readTitle={d => d.expenses.table.title}\n        createButton={<CreateExpenseButton />}\n      />\n    </Page>\n  );\n}\n","import { faClipboardCheck } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useCloseCurrentMonth } from '../gql/budget';\nimport { SplitButton, useDictionary } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\n\nexport function StartNextMonthButton({ disabled, warn }) {\n  const [closeCurrentMonth] = useCloseCurrentMonth();\n  const { dashboard } = useDictionary();\n  return (\n    <SplitButton\n      icon={faClipboardCheck}\n      variant={\n        disabled ? Variant.secondary : warn ? Variant.warning : Variant.success\n      }\n      disabled={disabled}\n      onClick={() => closeCurrentMonth()}\n    >\n      {dashboard.buttons.closeMonth}\n    </SplitButton>\n  );\n}\n\nStartNextMonthButton.propTypes = {\n  disabled: PropTypes.bool,\n  warn: PropTypes.bool,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Month from '../../model/Month';\nimport { Panel, useDictionary } from '../sbadmin2';\nimport { StartNextMonthButton } from './StartNextMonthButton';\n\nexport function CurrentMonth({ className, month }) {\n  const { dashboard, months } = useDictionary();\n  const parsed = Month.parse(month.month);\n  return (\n    <Panel className={className}>\n      <Panel.Header>\n        <div className='d-flex justify-content-between align-items-center'>\n          <Panel.Title\n            title={\n              <span>\n                {dashboard.currentMonth}:{' '}\n                <strong>\n                  <em>\n                    {months[parsed.month - 1]} {parsed.year}\n                  </em>\n                </strong>\n              </span>\n            }\n          />\n          <div>\n            <StartNextMonthButton\n              disabled={month.problems.some(p => p.severity === 'ERROR')}\n              warn={month.problems.length > 0}\n            />\n          </div>\n        </div>\n      </Panel.Header>\n    </Panel>\n  );\n}\n\nCurrentMonth.propTypes = {\n  className: PropTypes.string,\n  month: PropTypes.shape({\n    month: PropTypes.string.isRequired,\n    problems: PropTypes.arrayOf(\n      PropTypes.shape({ severity: PropTypes.string.isRequired })\n    ).isRequired,\n  }),\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { Variant } from './bootstrap';\n\nexport function Gauge({ className, variant, title, value, faIcon }) {\n  return (\n    <div className={className}>\n      <div className={`card border-left-${variant} shadow h-100 py-2`}>\n        <div className='card-body'>\n          <div className='row no-gutters align-items-center'>\n            <div className='col mr-2'>\n              <div\n                className={`text-xs font-weight-bold text-${variant} text-uppercase mb-1`}\n              >\n                {title}\n              </div>\n              <div className='h5 mb-0 font-weight-bold text-gray-800'>\n                {value}\n              </div>\n            </div>\n            <div className='col-auto'>\n              <i className={`fas fa-${faIcon} fa-2x text-gray-300`} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nGauge.propTypes = {\n  className: PropTypes.string.isRequired,\n  faIcon: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  variant: PropTypes.PropTypes.oneOf(Object.keys(Variant)),\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Row } from 'react-bootstrap';\n\nimport Amount from '../../model/Amount';\nimport { useDictionary } from '../sbadmin2';\nimport { Gauge } from '../sbadmin2/Gauge';\n\nexport function Gauges({ className, month }) {\n  const { dashboard } = useDictionary();\n  return (\n    <div className={className}>\n      <Row>\n        <Gauge\n          className='col-6 col-lg-12 mb-4'\n          variant='primary'\n          title={dashboard.planned}\n          value={Amount.format(month.totalPlannedAmount)}\n          faIcon='clipboard-list'\n        />\n        <Gauge\n          className='col-6 col-lg-12 mb-4'\n          variant='primary'\n          title={dashboard.incomes}\n          value={Amount.format(month.totalIncomeAmount)}\n          faIcon='briefcase'\n        />\n        <Gauge\n          className='col-6 col-lg-12 mb-4'\n          variant='primary'\n          title={dashboard.leftToPlan}\n          value={Amount.format(\n            month.totalIncomeAmount - month.totalPlannedAmount\n          )}\n          faIcon='balance-scale'\n        />\n        <Gauge\n          className='col-6 col-lg-12 mb-4'\n          variant='primary'\n          title={dashboard.expenses}\n          value={Amount.format(month.totalExpenseAmount)}\n          faIcon='receipt'\n        />\n      </Row>\n    </div>\n  );\n}\n\nGauges.propTypes = {\n  className: PropTypes.string,\n  month: PropTypes.shape({\n    totalPlannedAmount: PropTypes.number,\n    totalIncomeAmount: PropTypes.number,\n    totalExpenseAmount: PropTypes.number,\n  }),\n};\n","import './MonthProblems.css';\n\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { useGetAccounts } from '../gql/accounts';\nimport { useGetEnvelopes } from '../gql/envelopes';\nimport { WithQuery } from '../gql/WithQuery';\nimport { Panel, useDictionary } from '../sbadmin2';\n\nconst severityVariant = {\n  ERROR: 'danger',\n  WARNING: 'warning',\n  INFO: 'primary',\n};\n\nconst severityIcon = {\n  ERROR: 'exclamation-circle',\n  WARNING: 'exclamation-triangle',\n  INFO: 'info-circle',\n};\n\nconst basePathPerProblem = {\n  NegativeBalanceOnEnvelope: '/envelopes',\n  EnvelopeOverLimit: '/envelopes',\n  NegativeBalanceOnAccount: '/accounts',\n};\n\nexport function MonthProblems({ className, problems }) {\n  const envelopesQuery = useGetEnvelopes();\n  const accountsQuery = useGetAccounts();\n  return (\n    <WithQuery query={envelopesQuery}>\n      {({ data: envelopesData }) => (\n        <WithQuery query={accountsQuery}>\n          {({ data: accountsData }) => (\n            <Panel className={className}>\n              <Panel.Header>\n                <div className='d-flex justify-content-between align-items-center'>\n                  <Panel.Title readTitle={d => d.dashboard.problems.title} />\n                </div>\n              </Panel.Header>\n              <Panel.Body>\n                <ul className='list-group list-group-flush'>\n                  {problems.length > 0 ? (\n                    problems.map((problem, idx) => (\n                      <Problem\n                        key={idx}\n                        problem={problem}\n                        envelopes={envelopesData.envelopes}\n                        accounts={accountsData.accounts}\n                      />\n                    ))\n                  ) : (\n                    <NoProblems />\n                  )}\n                </ul>\n              </Panel.Body>\n            </Panel>\n          )}\n        </WithQuery>\n      )}\n    </WithQuery>\n  );\n}\n\nMonthProblems.propTypes = {\n  className: PropTypes.string,\n  problems: PropTypes.array.isRequired,\n};\n\nfunction NoProblems() {\n  const { dashboard } = useDictionary();\n  return (\n    <li className='list-group-item text-success'>\n      <i className='fas fa-fw fa-check-circle mr-1' />\n      {dashboard.noProblems}\n    </li>\n  );\n}\n\nfunction Problem(props) {\n  const { problem, accounts, envelopes } = props;\n  const history = useHistory();\n  const basePath = basePathPerProblem[problem.__typename];\n  const classes = classNames(\n    { 'month-dashboard__problem--clickable': !!basePath },\n    'list-group-item',\n    `text-${severityVariant[problem.severity]}`\n  );\n\n  function onClick() {\n    if (!basePath) return;\n    const list = basePath === '/envelopes' ? envelopes : accounts;\n    const entityName = list.find(e => e.id === problem.id).name;\n    history.push(`${basePath}/${entityName}`);\n  }\n\n  return (\n    <li className={classes} onClick={onClick}>\n      <i className={`fas fa-fw fa-${severityIcon[problem.severity]} mr-1`} />\n      <ProblemMessage {...props} />\n    </li>\n  );\n}\n\nProblem.propTypes = {\n  problem: PropTypes.shape({\n    severity: PropTypes.oneOf(Object.keys(severityVariant)),\n  }),\n};\n\nfunction ProblemMessage({ problem, envelopes, accounts }) {\n  const { dashboard } = useDictionary();\n  const { problems } = dashboard;\n\n  return (\n    <span>\n      {problem.__typename === 'Misplanned'\n        ? problem.overplanned\n          ? problems.overplanned\n          : problems.underplanned\n        : problem.__typename === 'NegativeBalanceOnEnvelope'\n        ? problems.expensesExceedPlans(\n            envelopes.find(e => e.id === problem.id).name\n          )\n        : problem.__typename === 'EnvelopeOverLimit'\n        ? problems.envelopeOverLimit(\n            envelopes.find(e => e.id === problem.id).name\n          )\n        : problem.__typename === 'NegativeBalanceOnAccount'\n        ? problems.negativeAccountBalance(\n            accounts.find(a => a.id === problem.id).name\n          )\n        : problem.__typename === 'MonthStillInProgress'\n        ? problems.monthNotEnded\n        : problem.__typename}\n    </span>\n  );\n}\n\nProblemMessage.propTypes = {\n  problem: PropTypes.shape({\n    __typename: PropTypes.string.isRequired,\n    id: PropTypes.any,\n    overplanned: PropTypes.bool,\n  }),\n};\n","import React from 'react';\nimport { Row } from 'react-bootstrap';\n\nimport { useMonth } from '../context/Month';\nimport { useGetMonthlyReport } from '../gql/monthlyReport';\nimport { WithQuery } from '../gql/WithQuery';\nimport { Page } from '../sbadmin2';\nimport { CurrentMonth } from './CurrentMonth';\nimport { Gauges } from './Gauges';\nimport { MonthProblems } from './MonthProblems';\n\nexport function MonthDashboardPage() {\n  const { currentMonth } = useMonth();\n  const query = useGetMonthlyReport(currentMonth);\n  return (\n    <Page>\n      <WithQuery query={query}>\n        {({ data }) => (\n          <Row>\n            <CurrentMonth\n              className='col-12 d-lg-none px-0'\n              month={data.monthlyReport}\n            />\n            <Gauges className='col-12 col-lg-3' month={data.monthlyReport} />\n            <MonthProblems\n              className='col-12 d-lg-none px-0'\n              problems={data.monthlyReport.problems}\n            />\n            <Row className='col-12 col-lg-9 flex-lg-column'>\n              <CurrentMonth\n                className='d-none d-lg-block'\n                month={data.monthlyReport}\n              />\n              <MonthProblems\n                className='d-none d-lg-block flex-grow-1'\n                problems={data.monthlyReport.problems}\n              />\n            </Row>\n          </Row>\n        )}\n      </WithQuery>\n    </Page>\n  );\n}\n","import React from 'react';\n\nimport { Page } from '../sbadmin2';\nimport { PlansTablePanel } from './PlansTablePanel';\n\nexport default function PlansPage() {\n  return (\n    <Page>\n      <Page.Header readTitle={d => d.sidebar.pages.plans} />\n      <PlansTablePanel />\n    </Page>\n  );\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nfunction TopbarContextExpanded({ renderContext }) {\n  return (\n    <form className='d-none d-sm-inline-block form-inline mr-auto ml-md-3 my-2 my-md-0 mw-100 navbar-context'>\n      {renderContext()}\n    </form>\n  );\n}\n\nTopbarContextExpanded.propTypes = {\n  renderContext: PropTypes.func.isRequired,\n};\n\nfunction TopbarContextMinimized({ faIcon, renderContext }) {\n  return (\n    <li className='nav-item dropdown no-arrow d-sm-none'>\n      <span\n        className='nav-link dropdown-toggle'\n        id='contextDropdown'\n        role='button'\n        data-toggle='dropdown'\n        aria-haspopup='true'\n        aria-expanded='false'\n        style={{ cursor: 'pointer' }}\n      >\n        <i className={`fas fa-${faIcon} fa-fw`}></i>\n      </span>\n      <div\n        className='dropdown-menu dropdown-menu-right p-3 shadow animated--grow-in'\n        aria-labelledby='contextDropdown'\n      >\n        <form className='form-inline mr-auto w-100 navbar-context'>\n          {renderContext()}\n        </form>\n      </div>\n    </li>\n  );\n}\n\nTopbarContextMinimized.propTypes = {\n  faIcon: PropTypes.string.isRequired,\n  renderContext: PropTypes.func.isRequired,\n};\n\nexport default function TopbarContext({ minified, ...props }) {\n  return minified ? (\n    <TopbarContextMinimized {...props} />\n  ) : (\n    <TopbarContextExpanded {...props} />\n  );\n}\n\nTopbarContext.propTypes = {\n  minified: PropTypes.bool,\n};\n","import './Topbar.css';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useSBAdmin2 } from '../context';\nimport TopbarContext from './TopbarContext';\n\nexport default function Topbar({\n  renderMenus,\n  renderContext,\n  renderUser,\n  faIconContextMinified,\n}) {\n  const { toggleSidebar } = useSBAdmin2();\n\n  return (\n    <nav className='navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow'>\n      <button\n        onClick={toggleSidebar}\n        className='btn btn-link d-md-none rounded-circle mr-3'\n      >\n        <i className='fa fa-bars'></i>\n      </button>\n\n      <TopbarContext minified={false} renderContext={renderContext} />\n\n      <ul className='navbar-nav ml-auto'>\n        <TopbarContext\n          minified={true}\n          renderContext={renderContext}\n          faIcon={faIconContextMinified}\n        />\n\n        {renderMenus()}\n\n        <div className='topbar-divider d-none d-sm-block' />\n\n        {renderUser()}\n      </ul>\n    </nav>\n  );\n}\n\nTopbar.propTypes = {\n  faIconContextMinified: PropTypes.string.isRequired,\n  renderContext: PropTypes.func.isRequired,\n  renderMenus: PropTypes.func.isRequired,\n  renderUser: PropTypes.func.isRequired,\n};\n","import classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nfunction TopbarMenuCounter({ counter }) {\n  const badge = counter >= 3 ? '3+' : '' + counter;\n  return (\n    counter > 0 && (\n      <span className='badge badge-danger badge-counter'>{badge}</span>\n    )\n  );\n}\n\nexport function TopbarMenu({ name, faIcon, children, counter }) {\n  const iconClasses = classnames('fas', 'fa-fw', `fa-${faIcon}`);\n  const id = `topbar--${name || faIcon}`;\n  return (\n    <li className='nav-item dropdown no-arrow mx-1'>\n      <span\n        className='nav-link dropdown-toggle'\n        id={id}\n        role='button'\n        data-toggle='dropdown'\n        aria-haspopup='true'\n        aria-expanded='false'\n        style={{ cursor: 'pointer' }}\n      >\n        <i className={iconClasses} />\n        <TopbarMenuCounter counter={counter} />\n      </span>\n      <div\n        className='dropdown-list dropdown-menu dropdown-menu-right shadow animated--grow-in'\n        aria-labelledby={id}\n      >\n        <h6 className='dropdown-header'>{name}</h6>\n        {children}\n        <span\n          className='dropdown-item text-center small text-gray-500'\n          style={{ cursor: 'pointer' }}\n        >\n          Show All\n        </span>\n      </div>\n    </li>\n  );\n}\n\nTopbarMenu.propTypes = {\n  children: PropTypes.node,\n  counter: PropTypes.number.isRequired,\n  entries: PropTypes.arrayOf(\n    PropTypes.shape({\n      highlighted: PropTypes.bool,\n      render: PropTypes.func.isRequired,\n    })\n  ),\n  faIcon: PropTypes.string,\n  highlighted: PropTypes.bool,\n  name: PropTypes.string,\n};\n","import React from 'react';\nimport { useSBAdmin2 } from '../context';\n\nexport default function TopbarUser() {\n  const { user, logout } = useSBAdmin2();\n  return (\n    <li className=\"nav-item dropdown no-arrow\">\n      <span\n        className=\"nav-link dropdown-toggle\"\n        id=\"userDropdown\"\n        role=\"button\"\n        data-toggle=\"dropdown\"\n        aria-haspopup=\"true\"\n        aria-expanded=\"false\"\n      >\n        <span className=\"mr-2 d-none d-lg-inline text-gray-600 small\">\n          {user.name}\n        </span>\n        <img alt=\"\" className=\"img-profile rounded-circle\" src={user.picture} />\n      </span>\n      <ul\n        className=\"dropdown-menu dropdown-menu-right shadow animated--grow-in\"\n        aria-labelledby=\"userDropdown\"\n      >\n        <li className=\"dropdown-item\">\n          <i className=\"fas fa-cogs fa-sm fa-fw mr-2 text-gray-400\"></i>\n          Settings\n        </li>\n        <div className=\"dropdown-divider\"></div>\n        <li\n          className=\"dropdown-item\"\n          data-toggle=\"modal\"\n          data-target=\"#logoutModal\"\n          onClick={() => logout()}\n        >\n          <i className=\"fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400\"></i>\n          Logout\n        </li>\n      </ul>\n    </li>\n  );\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport ContextSwitcher from '../components/ContextSwitcher/ContextSwitcher';\n\nexport default function TopbarContextSwitcher({\n  label,\n  value,\n  onChange,\n  allowedValues,\n}) {\n  return (\n    <ContextSwitcher\n      label={label}\n      allowedValues={allowedValues}\n      value={value}\n      onChange={onChange}\n    />\n  );\n}\n\nTopbarContextSwitcher.propTypes = {\n  allowedValues: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      label: PropTypes.string.isRequired,\n    })\n  ),\n  label: PropTypes.any,\n  onChange: PropTypes.any,\n  value: PropTypes.any,\n};\n","import React from 'react';\n\nimport { useBudget } from './gql/budget';\nimport { useDictionary } from './sbadmin2';\nimport TopbarContextSwitcher from './sbadmin2/Topbar/TopbarContextSwitcher';\nimport Spinner from './sbadmin2/utilities/Spinner';\n\nexport default function TopbarBudgetSwitcher() {\n  const {\n    selectedBudget,\n    setSelectedBudget,\n    budgets,\n    loading,\n    error,\n  } = useBudget();\n  const { topbar } = useDictionary();\n  const value = loading ? (\n    <Spinner size='sm' variant='secondary' />\n  ) : error ? (\n    <i className='fas fa-fw fa-exclamation-triangle text-secondary' />\n  ) : (\n    selectedBudget && selectedBudget.name\n  );\n  const onChange = id => {\n    const budget = budgets.find(b => b.id === id);\n    setSelectedBudget(budget);\n  };\n  return (\n    <TopbarContextSwitcher\n      label={topbar.budgetLabel}\n      value={value}\n      onChange={onChange}\n      allowedValues={budgets.map(b => ({ id: b.id, label: b.name }))}\n    />\n  );\n}\n","import React from 'react';\nimport TemplateTopbar from './sbadmin2/Topbar/Topbar';\nimport { TopbarMenu } from './sbadmin2/Topbar/TopbarMenu';\nimport TopbarUser from './sbadmin2/Topbar/TopbarUser';\nimport TopbarBudgetSwitcher from './TopbarBudgetSwitcher';\nimport { useAuth0 } from '../react-auth0-spa';\nimport { useDictionary } from './sbadmin2/language';\n\nexport default function Topbar() {\n  const { user, logout } = useAuth0();\n  const { topbar } = useDictionary();\n  return (\n    <TemplateTopbar\n      faIconContextMinified=\"search\"\n      renderContext={() => <TopbarBudgetSwitcher />}\n      renderUser={() => (\n        <TopbarUser\n          name={user.name}\n          pictureUrl={user.picture}\n          logout={logout}\n        />\n      )}\n      renderMenus={() => (\n        <>\n          <TopbarMenu\n            name={topbar.alertsLabel}\n            faIcon=\"bell\"\n            counter={0}\n          ></TopbarMenu>\n          <TopbarMenu\n            name={topbar.messagesLabel}\n            faIcon=\"envelope\"\n            counter={0}\n          ></TopbarMenu>\n        </>\n      )}\n    />\n  );\n}\n","import React from 'react';\n\nimport MonthSwitcher from '../common/MonthSwitcher';\nimport { Page } from '../sbadmin2';\nimport { CreateTransferButton } from './CreateTransferButton';\nimport { TransfersTablePanel } from './TransfersTablePanel';\n\nexport function TransfersPage() {\n  return (\n    <Page>\n      <Page.Header readTitle={d => d.sidebar.pages.transfers}>\n        <MonthSwitcher />\n      </Page.Header>\n      <TransfersTablePanel\n        readTitle={d => d.transfers.table.title}\n        createButton={<CreateTransferButton />}\n      />\n    </Page>\n  );\n}\n","export const sidebarConfig = ({ sidebar }) => [\n  {\n    entries: [\n      {\n        name: sidebar.pages.dashboard,\n        faIcon: 'receipt',\n        to: '/',\n      },\n    ],\n  },\n  {\n    name: sidebar.sections.currentMonth,\n    entries: [\n      {\n        name: sidebar.pages.expenses,\n        faIcon: 'receipt',\n        to: '/expenses',\n      },\n      {\n        name: sidebar.pages.transfers,\n        faIcon: 'exchange-alt',\n        to: '/transfers',\n      },\n      {\n        name: sidebar.pages.plans,\n        faIcon: 'map-marked-alt',\n        to: '/plans',\n      },\n    ],\n  },\n  {\n    name: sidebar.sections.budget,\n    entries: [\n      {\n        name: sidebar.pages.accounts,\n        faIcon: 'credit-card',\n        to: '/accounts',\n      },\n      {\n        name: sidebar.pages.envelopes,\n        faIcon: 'envelope-open-text',\n        to: '/envelopes',\n      },\n    ],\n  },\n];\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport pl from '../../lang/pl';\nimport { useAuth0 } from '../../react-auth0-spa';\nimport AccountsPage from '../Accounts/AccountsPage';\nimport CategoryPage from '../Categories/CategoryPage';\nimport { MonthProvider } from '../context/Month';\nimport EnvelopesPage from '../Envelopes/EnvelopesPage';\nimport ExpensesPage from '../Expenses/ExpensesPage';\nimport { BudgetContext, BudgetProvider } from '../gql/budget';\nimport { MonthDashboardPage } from '../MonthDashboardPage/MonthDashboardPage';\nimport PlansPage from '../Plans/PlansPage';\nimport { SBAdmin2 } from '../sbadmin2';\nimport Topbar from '../Topbar';\nimport { TransfersPage } from '../Transfers/TransfersPage';\nimport { sidebarConfig } from './sidebarConfig';\n\nconst dictionaries = {\n  pl,\n};\n\nexport default function App() {\n  const { user, logout } = useAuth0();\n  return (\n    <BudgetProvider>\n      <SBAdmin2\n        sidebarProps={{\n          renderBrandName: () => 'Budget',\n          renderBrandIcon: () => <i className='fas fa-bold' />,\n          config: sidebarConfig(pl),\n        }}\n        topbar={Topbar}\n        copyright={'Budget 2019'}\n        dictionaries={dictionaries}\n        user={user}\n        logout={logout}\n      >\n        <BudgetContext.Consumer>\n          {({ selectedBudget }) =>\n            selectedBudget && (\n              <MonthProvider currentMonth={selectedBudget.currentMonth.month}>\n                <Switch>\n                  <Route path='/accounts' component={AccountsPage} />\n                  <Route path='/envelopes' component={EnvelopesPage} />\n                  <Route path='/expenses' component={ExpensesPage} />\n                  <Route path='/transfers' component={TransfersPage} />\n                  <Route path='/plans' component={PlansPage} />\n                  <Route path='/categories' component={CategoryPage} />\n                  <Route path='/' component={MonthDashboardPage} />\n                </Switch>\n              </MonthProvider>\n            )\n          }\n        </BudgetContext.Consumer>\n      </SBAdmin2>\n    </BudgetProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\n\nimport './sb-admin-2.css';\nimport './index.css';\n\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { AuthApolloProvider, createClient } from './apollo';\nimport config from './auth_config.json';\nimport App from './components/App/App';\nimport { Beta } from './components/Beta';\nimport { Auth0Context, Auth0Provider } from './react-auth0-spa';\nimport * as serviceWorker from './serviceWorker';\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = appState => {\n  window.history.replaceState(\n    {},\n    document.title,\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\nconst redirectURI = `${window.location.origin}${process.env.PUBLIC_URL}`;\n\nconst ProdAuthorizationProvider = ({ children }) => (\n  <Auth0Provider\n    domain={config.domain}\n    client_id={config.clientId}\n    redirect_uri={redirectURI}\n    onRedirectCallback={onRedirectCallback}\n    audience={config.audience}\n    scope='beta'\n    returnTo={redirectURI}\n  >\n    <AuthApolloProvider>{children}</AuthApolloProvider>\n  </Auth0Provider>\n);\n\nProdAuthorizationProvider.propTypes = {\n  children: PropTypes.node,\n};\n\nconst DevAuthorizationProvider = ({ children }) => (\n  <Auth0Context.Provider\n    value={{\n      isAuthenticated: true,\n      loading: false,\n      loginWithRedirect: () => {},\n      user: {\n        name: 'Valerie Luna',\n        picture: 'https://source.unsplash.com/QAB-WJcbgJk/60x60',\n        locale: 'pl',\n      },\n      getTokenScopes: () => Promise.resolve(['beta']),\n      logout: () => {},\n    }}\n  >\n    <ApolloProvider client={createClient()}>{children}</ApolloProvider>\n  </Auth0Context.Provider>\n);\n\nDevAuthorizationProvider.propTypes = {\n  children: PropTypes.node,\n};\n\nconst authDisabled = process.env.REACT_APP_INSECURE_AUTH_DISABLED;\nconst AuthorizationProvider =\n  authDisabled !== 'true'\n    ? ProdAuthorizationProvider\n    : DevAuthorizationProvider;\n\nReactDOM.render(\n  <AuthorizationProvider>\n    <Beta>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n      </BrowserRouter>\n    </Beta>\n  </AuthorizationProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\n\nimport { useAuth0 } from '../react-auth0-spa';\n\nexport function Beta({ children }) {\n  const { getTokenScopes } = useAuth0();\n  const [scope, setScope] = useState();\n\n  useEffect(() => {\n    getTokenScopes().then(setScope);\n  }, [setScope, getTokenScopes]);\n\n  if (!scope) {\n    return <div></div>;\n  }\n\n  const isBetaUser = scope.some(v => v === 'beta');\n\n  if (isBetaUser) {\n    return children;\n  }\n  return <div>This conent is available only to beta users</div>;\n}\n\nBeta.propTypes = {\n  children: PropTypes.node,\n};\n"],"sourceRoot":""}