{"version":3,"sources":["components/sbadmin2/context.js","components/sbadmin2/Topbar/TopbarContext.js","components/sbadmin2/Topbar/Topbar.js","components/sbadmin2/Topbar/TopbarMenu.js","components/sbadmin2/Topbar/TopbarUser.js","components/sbadmin2/Topbar/TopbarContextSwitcher.js","components/gql/monthlyReport.js","components/gql/envelopes.js","util/immutable.js","components/gql/plans.js","components/gql/accounts.js","components/gql/transfers.js","components/gql/expenses.js","components/gql/budget.js","components/sbadmin2/utilities/Spinner.js","components/sbadmin2/language.js","util/capitalize.js","components/sbadmin2/components/Panel/PanelTitle.js","components/sbadmin2/components/Panel/Panel.js","components/sbadmin2/components/Panel/PanelHeader.js","components/sbadmin2/components/Panel/PanelBody.js","components/sbadmin2/components/Table/Table.js","components/sbadmin2/components/TablePanel/TablePanel.js","components/sbadmin2/components/OpenModalButton/OpenModalButton.js","components/sbadmin2/components/Page/PageHeader.js","components/sbadmin2/components/Page/Page.js","components/sbadmin2/components/Icon/Icon.js","components/sbadmin2/bootstrap.js","components/sbadmin2/components/ClickableIcon/ClickableIcon.js","components/sbadmin2/components/SplitButton/SplitButton.js","components/sbadmin2/NotFoundPage.js","components/sbadmin2/Sidebar/SidebarCollapsibleLink.js","components/sbadmin2/Sidebar/SidebarSimpleLink.js","components/sbadmin2/Sidebar/SidebarGroup.js","components/sbadmin2/Sidebar/Sidebar.js","components/sbadmin2/SBAdmin2.js","components/sbadmin2/utilities/FormControl.js","components/sbadmin2/utilities/SaveButton.js","components/sbadmin2/utilities/CancelButton.js","components/sbadmin2/utilities/FormInModal.js","components/TopbarBudgetSwitcher.js","react-auth0-spa.js","components/Topbar.js","components/App/sidebarConfig.js","components/sbadmin2/utilities/RefreshButton.js","components/gql/WithQuery.js","components/gql/QueryTablePanel.js","model/Amount.js","components/sbadmin2/utilities/CreateButton.js","components/sbadmin2/utilities/useFormData.js","components/Accounts/AccountModal.js","components/Accounts/CreateAccountButton.js","components/Accounts/UpdateAccountButton.js","components/Accounts/AccountsTablePanel.js","components/Expenses/DeleteExpenseButton.js","model/Day.js","model/Month.js","components/sbadmin2/utilities/Combobox.js","components/sbadmin2/utilities/InlineFormControl.js","components/gql/categories.js","components/Expenses/AmountInput.js","components/Expenses/CategoriesInput.js","components/Expenses/ExpenseModal.js","components/Expenses/UpdateExpenseButton.js","components/Expenses/ExpensesTablePanel.js","components/Expenses/CreateExpenseButton.js","components/Accounts/CollapsiblePanel.js","components/Transfers/TransferModal.js","components/Transfers/UpdateTransferButton.js","components/Transfers/DeleteTransferButton.js","components/Transfers/TransfersTablePanel.js","components/Transfers/CreateTransferButton.js","components/Accounts/Accounts.js","components/sbadmin2/utilities/OptionalFormControl.js","model/propTypes.js","components/Envelopes/EnvelopeModal.js","components/Envelopes/CreateEnvelopeButton.js","components/Envelopes/UpdateEnvelopeButton.js","components/Envelopes/EnvelopesListPanel.js","components/Categories/CategoryModal.js","components/Categories/CreateCategoryButton.js","components/Categories/UpdateCategoryButton.js","components/Categories/CategoriesListPanel.js","components/Envelopes/EnvelopesPage.js","components/Expenses/ExpensesPage.js","components/Transfers/TransfersPage.js","components/Plans.js","components/sbadmin2/Gauge.js","components/MonthDashboardPage.js","lang/pl.js","components/App/App.js","serviceWorker.js","apollo.js","index.js","components/Beta.js"],"names":["SBAdmin2Context","React","createContext","SBAdmin2Provider","user","logout","children","useState","sidebarToggled","setSidebarToggled","Provider","value","toggleSidebar","current","useSBAdmin2","useContext","TopbarContextExpanded","renderContext","className","TopbarContextMinimized","faIcon","id","role","data-toggle","aria-haspopup","aria-expanded","style","cursor","aria-labelledby","TopbarContext","minified","props","Topbar","renderMenus","renderUser","faIconContextMinified","onClick","TopbarMenuCounter","counter","badge","TopbarMenu","name","iconClasses","classnames","TopbarUser","alt","src","picture","data-target","TopbarContextSwitcher","label","onChange","allowedValues","display","alignContent","flexGrow","aria-label","maxWidth","map","v","key","MONTHLY_REPORT_FRAGMENT","gql","GET_CURRENT_MONTHLY_REPORT","GET_ENVELOPES","CREATE_ENVELOPE","UPDATE_ENVELOPE","useGetEnvelopes","selectedBudget","useBudget","useQuery","variables","budgetID","removeFromListByID","list","elementId","idx","findIndex","e","slice","length","PLAN_FRAGMENT","GET_CURRENT_PLANS","CREATE_PLAN","UPDATE_PLAN","DELETE_PLAN","GET_ACCOUNTS","useGetAccounts","CREATE_ACCOUNT","UPDATE_ACCOUNT","TRANSFER_FRAGMENT","GET_CURRENT_TRANSFERS","CREATE_TRANSFER","UPDATE_TRANSFER","DELETE_TRANSFER","EXPENSE_FRAGMENT","GET_CURRENT_EXPENSES","CREATE_EXPENSE","UPDATE_EXPENSE","DELETE_EXPENSE","BudgetContext","GET_BUDGETS","storageKey","BudgetProvider","setSelectedBudget","loading","error","data","useEffect","sessionStorage","setItem","budgets","lastChosenID","getItem","lastChosen","find","b","console","CLOSE_CURRENT_MONTH","Spinner","size","variant","classNames","DictionaryContext","DictionaryProvider","dictionaries","locale","useDictionary","withDictionary","prop","Component","readPropName","string","readDict","charAt","toUpperCase","newProps","dictionary","title","Panel","Title","PanelTitle","Header","Body","addColumnNames","columns","c","text","dataField","columnNames","bootstrap4","TablePanel","headerButtons","panelClassName","Wrapper","wrapper","wrapperProps","hiddenColumns","filters","wihtouHidden","classes","headerClasses","hidden","some","hc","filteredData","filter","row","every","f","filtersMatch","striped","hover","bordered","defaultProps","OpenModalButton","Button","button","ModalContent","modalContent","onClickRef","show","setShow","onHide","Modal","Page","Icon","icon","PageHeader","Archive","Trash","Edit","Plus","Minus","Save","ClipboardCheck","ChevronUp","ChevronDown","Variant","secondary","primary","danger","success","warning","white","Size","sm","lg","ClickableIcon","preventDefault","SplitButton","disabled","_ref","ref","NotFoundPage","data-text","to","SidebarCollapsibleLink","parent","sections","isActive","location","routes","pathname","oneOfRoutsMatchesLocation","useLocation","active","aria-controls","data-parent","Fragment","SidebarSimpleLink","exact","SidebarGroup","group","entries","entry","undefined","Sidebar","renderBrandName","renderBrandIcon","config","toggled","SBAdmin2","sidebarProps","topbar","copyright","component","FormControl","inline","Form","Group","as","Row","Label","column","Input","SaveButton","buttons","type","save","CancelButton","cancel","FormInModal","onSave","formData","validated","setValidated","form","useRef","handleSave","event","stopPropagation","isValid","checkValidity","changed","input","firstInput","getElementsByTagName","focus","onSubmit","closeButton","Footer","TopbarBudgetSwitcher","budgetLabel","budget","feedback","wrap","Col","child","Control","defaultValue","default","Feedback","DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","Auth0Context","useAuth0","Auth0Provider","onRedirectCallback","returnTo","initOptions","isAuthenticated","setIsAuthenticated","setUser","token","setToken","auth0Client","setAuth0","setLoading","popupOpen","setPopupOpen","a","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","appState","getUser","getTokenSilently","initAuth0","loginWithPopup","params","getIdTokenClaims","loginWithRedirect","getTokenWithPopup","p","getTokenScopes","claimsString","split","claims","JSON","parse","atob","scope","pictureUrl","alertsLabel","messagesLabel","sidebarConfig","sidebar","pages","dashboard","currentMonth","expenses","transfers","plans","accounts","envelopes","RefreshButton","ErrorMessageList","errorMessage","subErrors","ErrorMessage","networkError","result","errors","graphQLErrors","path","join","message","WithQuery","query","showError","QueryTablePanel","getData","refetch","Amount","number","math","replace","Math","round","amount","kSeparator","fixed","toFixed","parts","CreateButton","createFormData","model","rerender","getRoot","Object","prototype","hasOwnProperty","call","$model","$init","_originalPush","push","removeAt","splice","arrayFormData","$process","$default","process","_default","init","simpleFormData","$includeAllValues","keys","reduce","acc","k","compositeFormData","useFormData","setValue","AccountModal","modal","labels","CreateAccountButton","useMutation","update","cache","createAccount","readQuery","writeQuery","concat","mutation","rest","useCreateAccount","createTitle","UpdateAccountButton","account","useUpdateAccount","updateAccount","editTitle","sort","align","headerAlign","formatter","format","isDummyColumn","cell","whiteSpace","width","defaultSorted","order","AccountsTablePanel","onSelectAcount","selectRow","mode","clickToSelect","hideSelectColumn","onSelect","keyField","readTitle","d","table","readColumnNames","DeleteExpenseButton","expense","deleteExpense","refetchQueries","useDeleteExpense","Day","year","month","day","this","String","padStart","date","Date","getYear","getMonth","getDate","monthNames","Month","Number","Combobox","required","defaultValueObject","setFilter","selectedIdx","setSelectedIdx","menuRef","filtered","toLowerCase","wrapperRef","selectedLabel","onClickOutside","contains","target","addEventListener","removeEventListener","selected","onKeyDown","keyCode","data-reference","data-flip","borderTopLeftRadius","borderBottomLeftRadius","margin","tabIndex","maxHeight","overflowY","InlineFormControl","GET_CATEGORIES","CREATE_CATEGORY","UPDATE_CATEGORY","useGetCategories","AmountInput","placeholder","setIsValid","newValue","CategoriesInput","categories","category","categoryFormData","categoryID","ExpenseModal","accountsQuery","accountID","first","firstDay","last","lastDay","accountsData","min","max","UpdateExpenseButton","useUpdateExpense","updateExpense","rowClasses","rowIndex","expandRow","renderer","ExpensesTablePanel","createButton","accountFilter","useGetCurrentExpenses","CreateExpenseButton","createExpense","useCreateExpense","CollapsibleContext","CollapsiblePanel","initialyShown","toggle","s","TransferModal","toAccount","fromAccount","fromAccountID","toAccountID","step","UpdateTransferButton","transfer","useUpdateTransfer","updateTransfer","DeleteTransferButton","deleteTransfer","useDeleteTranfer","Collapse","in","TransfersTablePanel","toAccountFilter","fromAccountFilter","useGetCurrentTransfers","CreateTransferButton","createTransfer","useCreateTransfer","Accounts","selectedAccount","setSelectedAccount","inTransfersTableTitle","outTransfersTableTitle","expensesTableTitle","OptionalFormControl","initEnabled","enabled","setEnabled","toggleEnabled","Check","custom","checked","autoFocus","PropTypes","Account","shape","isRequired","Envelope","totalBalance","envelope","EnvelopeModal","limit","CreateEnvelopeButton","createEnvelope","useCreateEnvelope","UpdateEnvelopeButton","useUpdateEnvelope","updateEnvelope","balance","EnvelopesListPanel","createFunRef","openRef","CategoryModal","envelopeID","description","CreateCategoryButton","createCategory","useCreateCategory","UpdateCategoryButton","useUpdateCategory","CategoriesListPanel","keyMap","handlers","createEnvelopeFunRef","createCategoryFunRef","EnvelopesPage","ExpensesPage","TransfersPage","sortValue","UpdatePlanButton","plan","DeletePlanButton","PlanModal","currentAmount","recurringAmount","fd","fromEnvelopeID","fromEnvelope","toEnvelopeID","toEnvelope","recurring","useUpdatePlan","updatePlan","deletePlan","useDeletePlan","CreatePlanButton","createPlan","useCreatePlan","Plans","useGetCurrentPlans","Gauge","Gauges","planned","totalPlannedAmount","incomes","totalIncomeAmount","leftToPlan","totalExpenseAmount","severityIcon","ERROR","WARNING","INFO","severityVariant","ProblemMessage","problem","envelopesQuery","envelopesData","__typename","overplanned","problems","underplanned","expensesExceedPlans","envelopeOverLimit","negativeAccountBalance","monthNotEnded","Problem","severity","NoProblems","noProblems","MonthProblems","StartNextMonthButton","warn","useCloseCurrentMonth","closeCurrentMonth","closeMonth","CurrentMonth","months","parsed","MonthDashboardPage","fetchPolicy","useGetCurrentMonthlyReport","create","overLimit","totalAmount","pl","Boolean","hostname","match","fragmentMatcher","IntrospectionFragmentMatcher","introspectionQueryResultData","createClient","graphqlApiUrl","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","InMemoryCache","errorLink","onError","REACT_APP_ENV","locations","log","link","ApolloClient","ApolloLink","from","connectToDevTools","AuthApolloProvider","client","targetUrl","redirectURI","origin","AuthorizationProvider","REACT_APP_INSECURE_AUTH_DISABLED","domain","client_id","clientId","redirect_uri","audience","Promise","resolve","ReactDOM","render","setScope","then","basename","Consumer","Envelopes","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"81FAGMA,EAAkBC,IAAMC,gBAEvB,SAASC,EAAT,GAAuD,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,SAAY,EACfC,oBAAS,GADM,mBACpDC,EADoD,KACpCC,EADoC,KAE3D,OACE,kBAACT,EAAgBU,SAAjB,CACEC,MAAO,CACLH,iBACAJ,OACAC,SACAO,cAAe,kBAAMH,GAAkB,SAAAI,GAAO,OAAKA,QAGpDP,GASA,IAAMQ,EAAc,kBAAMC,qBAAWf,I,gBCtB5C,SAASgB,EAAT,GAAmD,IAAlBC,EAAiB,EAAjBA,cAC/B,OACE,0BAAMC,UAAU,2FACbD,KAKP,SAASE,EAAT,GAA4D,IAA1BC,EAAyB,EAAzBA,OAAQH,EAAiB,EAAjBA,cACxC,OACE,wBAAIC,UAAU,wCACZ,0BACEA,UAAU,2BACVG,GAAG,kBACHC,KAAK,SACLC,cAAY,WACZC,gBAAc,OACdC,gBAAc,QACdC,MAAO,CAAEC,OAAQ,YAEjB,uBAAGT,UAAS,iBAAYE,EAAZ,aAEd,yBACEF,UAAU,iEACVU,kBAAgB,mBAEhB,0BAAMV,UAAU,4CACbD,OAOI,SAASY,EAAT,GAAgD,IAAvBC,EAAsB,EAAtBA,SAAaC,EAAS,4BAC5D,OAAOD,EACL,kBAACX,EAA2BY,GAE5B,kBAACf,EAA0Be,GCpChB,SAASC,EAAT,GAKX,IAJFC,EAIC,EAJDA,YACAhB,EAGC,EAHDA,cACAiB,EAEC,EAFDA,WACAC,EACC,EADDA,sBAEQvB,EAAkBE,IAAlBF,cAER,OACE,yBAAKM,UAAU,4EACb,4BACEkB,QAASxB,EACTM,UAAU,8CAEV,uBAAGA,UAAU,gBAGf,kBAACW,EAAD,CAAeC,UAAU,EAAOb,cAAeA,IAE/C,wBAAIC,UAAU,sBACZ,kBAACW,EAAD,CACEC,UAAU,EACVb,cAAeA,EACfG,OAAQe,IAGTF,IAED,yBAAKf,UAAU,qCAEdgB,M,oBC/BT,SAASG,EAAT,GAAyC,IAAZC,EAAW,EAAXA,QACrBC,EAAQD,GAAW,EAAI,KAAO,GAAKA,EACzC,OACEA,EAAU,GACR,0BAAMpB,UAAU,oCAAoCqB,GAKnD,SAASC,EAAT,GAA0D,IAApCC,EAAmC,EAAnCA,KAAMrB,EAA6B,EAA7BA,OAAQd,EAAqB,EAArBA,SAAUgC,EAAW,EAAXA,QAC7CI,EAAcC,IAAW,MAAO,QAAR,aAAuBvB,IAC/CC,EAAE,kBAAcoB,GAAQrB,GAC9B,OACE,wBAAIF,UAAU,mCACZ,0BACEA,UAAU,2BACVG,GAAIA,EACJC,KAAK,SACLC,cAAY,WACZC,gBAAc,OACdC,gBAAc,QACdC,MAAO,CAAEC,OAAQ,YAEjB,uBAAGT,UAAWwB,IACd,kBAACL,EAAD,CAAmBC,QAASA,KAE9B,yBACEpB,UAAU,2EACVU,kBAAiBP,GAEjB,wBAAIH,UAAU,mBAAmBuB,GAChCnC,EACD,0BACEY,UAAU,gDACVQ,MAAO,CAAEC,OAAQ,YAFnB,cCjCO,SAASiB,IAAc,IAAD,EACV9B,IAAjBV,EAD2B,EAC3BA,KAAMC,EADqB,EACrBA,OACd,OACE,wBAAIa,UAAU,8BACZ,0BACEA,UAAU,2BACVG,GAAG,eACHC,KAAK,SACLC,cAAY,WACZC,gBAAc,OACdC,gBAAc,SAEd,0BAAMP,UAAU,+CACbd,EAAKqC,MAER,yBAAKI,IAAI,GAAG3B,UAAU,6BAA6B4B,IAAK1C,EAAK2C,WAE/D,wBACE7B,UAAU,6DACVU,kBAAgB,gBAEhB,wBAAIV,UAAU,iBACZ,uBAAGA,UAAU,+CADf,YAIA,yBAAKA,UAAU,qBACf,wBACEA,UAAU,gBACVK,cAAY,QACZyB,cAAY,eACZZ,QAAS,kBAAM/B,MAEf,uBAAGa,UAAU,uDANf,YC3BO,SAAS+B,EAAT,GAKX,IAJFC,EAIC,EAJDA,MACAvC,EAGC,EAHDA,MACAwC,EAEC,EAFDA,SACAC,EACC,EADDA,cAEA,OACE,yBACElC,UAAU,sCACVQ,MAAO,CAAE2B,QAAS,OAAQC,aAAc,YAExC,yBAAKpC,UAAU,qDACb,2BAAOA,UAAU,6BAA6BgC,IAEhD,yBACEhC,UAAU,+BACVQ,MAAO,CACL6B,SAAU,IAGZ,0BACErC,UAAU,sEACVsC,aAAYN,EACZxB,MAAO,CAAE6B,SAAU,IAElB5C,GAEH,4BACEO,UAAU,iEACVK,cAAY,WACZC,gBAAc,OACdC,gBAAc,QACdC,MAAO,CAAE+B,SAAU,UAErB,yBAAKvC,UAAU,iBACZkC,EAAcM,KAAI,SAAAC,GAAC,OAClB,0BACEzC,UAAU,gBACVkB,QAAS,kBAAMe,EAASQ,EAAEtC,KAC1BuC,IAAKD,EAAEtC,IAENsC,EAAET,a,6vBCvCjB,IAAMW,EAA0BC,IAAH,KAwBhBC,EAA6BD,IAAH,IAQnCD,G,qvBChCG,IAAMG,EAAgBF,IAAH,KAWpBG,EAAkBH,IAAH,KAWfI,EAAkBJ,IAAH,KA2Cd,SAASK,IAAmB,IACzBC,EAAmBC,KAAnBD,eACR,OAAOE,YAASN,EAAe,CAC7BO,UAAW,CAAEC,SAAUJ,EAAe/C,MC5DnC,SAASoD,EAAmBC,EAAMC,GACvC,IAAMC,EAAMF,EAAKG,WAAU,SAAAC,GAAC,OAAIA,EAAEzD,KAAOsD,KACzC,OAAa,IAATC,EACKF,EAEH,GAAN,mBAAWA,EAAKK,MAAM,EAAGH,IAAzB,YAAkCF,EAAKK,MAAMH,EAAI,EAAGF,EAAKM,U,usDCV3D,IAAMC,EAAgBnB,IAAH,KAiBNoB,EAAoBpB,IAAH,IAU1BmB,GAUJ,IAAME,EAAcrB,IAAH,IAMbmB,GAuCJ,IAAMG,EAActB,IAAH,IAMbmB,GAoBJ,IAAMI,EAAcvB,IAAH,K,gsBC/GV,IAAMwB,GAAexB,IAAH,MAUlB,SAASyB,KAAkB,IACxBnB,EAAmBC,KAAnBD,eACR,OAAOE,YAASgB,GAAc,CAC5Bf,UAAW,CAAEC,SAAUJ,EAAe/C,MAI1C,IAAMmE,GAAiB1B,IAAH,MAiCpB,IAAM2B,GAAiB3B,IAAH,M,6vDC/CpB,IAAM4B,GAAoB5B,IAAH,MAiBV6B,GAAwB7B,IAAH,KAU9B4B,IAUJ,IAAME,GAAkB9B,IAAH,KAMjB4B,IAuCJ,IAAMG,GAAkB/B,IAAH,KAMjB4B,IAoBJ,IAAMI,GAAkBhC,IAAH,M,myDC3GrB,IAAMiC,GAAmBjC,IAAH,MAoBTkC,GAAuBlC,IAAH,KAW7BiC,IAGEE,GAAiBnC,IAAH,KAOhBiC,IAGEG,GAAiBpC,IAAH,KAOhBiC,IAiEJ,IAAMI,GAAiBrC,IAAH,M,oXCnHb,IAAMsC,GAAgBlG,0BAChBmE,GAAY,kBAAMtD,qBAAWqF,KAEpCC,GAAcvC,IAAH,MAYXwC,GAAa,wBAEZ,SAASC,GAAT,GAAuC,IAAbjG,EAAY,EAAZA,SAAY,EACCC,mBAAS,MADV,mBACpC6D,EADoC,KACpBoC,EADoB,OAEVlC,YAAS+B,IAAlCI,EAFmC,EAEnCA,QAASC,EAF0B,EAE1BA,MAAOC,EAFmB,EAEnBA,KACxBC,qBAAU,WACJxC,GACFyC,eAAeC,QAAQR,GAAYlC,EAAe/C,MAEnD,CAAC+C,IACJwC,qBAAU,WACR,IAAKxC,GAAkBuC,GAAQA,EAAKI,QAAS,CAC3C,IAAMC,EAAeH,eAAeI,QAAQX,IACtCY,EAAaP,EAAKI,QAAQI,MAAK,SAAAC,GAAC,OAAIA,EAAE/F,KAAO2F,KAC/CE,GACFV,EAAkBU,MAGrB,CAACP,EAAMvC,IACV,IAAMzD,EAAQ,CACZyD,iBACAoC,oBACAC,UACAC,QACAK,QAAUN,GAAYC,EAAuB,GAAfC,EAAKI,SAKrC,OAHIL,GACFW,QAAQX,MAAMA,GAGd,kBAACN,GAAc1F,SAAf,CAAwBC,MAAOA,GAAQL,GAQ3C,IAAMgH,GAAsBxD,IAAH,MC3DV,SAASyD,GAAT,GAAqC,IAAD,EAAjBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,QAChCC,EAAa/E,IAAW,kBAAD,4CACR6E,GAASA,GADD,6BAElBC,GAAYA,GAFM,IAI7B,OACE,yBAAKvG,UAAWwG,EAAYpG,KAAK,UAC/B,0BAAMJ,UAAU,WAAhB,e,+NCLC,IAAMyG,GAAoBzH,0BAE1B,SAAS0H,GAAT,GAAyD,IAA3BC,EAA0B,EAA1BA,aAAcvH,EAAY,EAAZA,SACzCF,EAASU,IAATV,KACR,OACE,kBAACuH,GAAkBjH,SAAnB,CAA4BC,MAAOkH,EAAazH,EAAK0H,SAClDxH,GAUA,IAAMyH,GAAgB,kBAAMhH,qBAAW4G,KAEvC,SAASK,GAAeC,EAAMC,EAAWC,GAC9C,OAAO,SAAApG,GCxBF,IAAoBqG,ED0BjBC,EAAWtG,EADjBoG,EAAeA,GAAY,eCzBJC,EDyB0BH,GCxBrCK,OAAO,GAAGC,cAAgBH,EAAOrD,MAAM,KD0B7CyD,E,2WAAQ,IAAQzG,UACfyG,EAASL,GAChB,IAAMM,EAAaV,KAInB,OAHIM,IACFG,EAASP,GAAQI,EAASI,IAErB,kBAACP,EAAcM,IEPXR,UAAe,SArB9B,YAAqD,IAA/B1H,EAA8B,EAA9BA,SAAUoI,EAAoB,EAApBA,MAAOxH,EAAa,EAAbA,UAC/BwG,EAAa/E,IACjB,MACA,mBACA,eACAzB,GAEF,OACE,wBAAIA,UAAWwG,GACZpH,EACAoI,MCRQ,SAASC,GAAT,GAAyC,IAAxBrI,EAAuB,EAAvBA,SAAUY,EAAa,EAAbA,UACxC,OACE,yBAAKA,UAAWyB,IAAW,OAAQ,SAAU,OAAQzB,IAClDZ,GAUPqI,GAAMC,MAAQC,GACdF,GAAMG,OCjBS,YAA+C,IAAxB5H,EAAuB,EAAvBA,UAAca,EAAS,6BAC3D,OAAO,uCAAKb,UAAWyB,IAAWzB,EAAW,gBAAoBa,KDiBnE4G,GAAMI,KElBS,YAA6C,IAAxB7H,EAAuB,EAAvBA,UAAWZ,EAAY,EAAZA,SAC7C,OAAO,yBAAKY,UAAWyB,IAAWzB,EAAW,cAAeZ,I,uPCgB9D,SAAS0I,GAAeC,EAASR,GAC/B,OAAOQ,EAAQvF,KAAI,SAAAwF,GAAC,O,2WAAA,IAAUA,EAAV,CAAaC,KAAMV,EAAWS,EAAEE,YAAc,QAGrDpB,UAAe,eAnB9B,YAAoD,IAAnCiB,EAAkC,EAAlCA,QAASI,EAAyB,EAAzBA,YAAgBtH,EAAS,yCACjD,OACE,kBAAC,KAAD,eACEuH,YAAU,EACVL,QAASD,GAAeC,EAASI,IAC7BtH,O,6kBCJV,SAASwH,GAAT,GAWI,IAVFb,EAUC,EAVDA,MACAO,EASC,EATDA,QACAO,EAQC,EARDA,cACAC,EAOC,EAPDA,eACSC,EAMR,EANDC,QACAC,EAKC,EALDA,aACAC,EAIC,EAJDA,cACAlD,EAGC,EAHDA,KACAmD,EAEC,EAFDA,QACG/H,EACF,8HAUKgI,EAJe,CALE,MAClBd,EAAQ,GADU,CAErBe,QAAS,OACTC,cAAe,UAEI,mBAEhBhB,EAAQlE,MAAM,EAAGkE,EAAQjE,UAEOtB,KAAI,SAAAwF,GAAC,aACrCA,EADqC,CAExCgB,OAAQL,GAAiBA,EAAcM,MAAK,SAAAC,GAAE,OAAIlB,EAAEE,YAAcgB,UAOpE,IAAMC,EAAe1D,EAAK2D,QAAO,SAAAC,GAAG,OAJpC,SAAsBA,GACpB,OAAOT,EAAQU,OAAM,SAAAC,GAAC,OAAIA,EAAEF,MAGUG,CAAaH,MAErD,OACE,kBAACb,EAAD,eAASxI,UAAWuI,GAAoBG,GACtC,kBAACF,EAAQZ,OAAT,CAAgB5H,UAAU,YACxB,yBAAKA,UAAU,qDACb,kBAACwI,EAAQd,MAAT,CAAeF,MAAOA,EAAOxH,UAAU,uBACvC,6BAAMsI,KAIV,kBAACE,EAAQX,KAAT,CAAc7H,UAAU,OACtB,kBAAC,GAAD,eACE8I,QAAQ,iCACRW,SAAO,EACPC,OAAK,EACLC,UAAU,EACV5B,QAASc,EACTpD,KAAM0D,GACFtI,MAkBdwH,GAAWuB,aAAe,CACxBnB,QAAShB,GACTiB,aAAc,GACdC,cAAe,GACfC,QAAS,IAGI9B,UAAe,QAASuB,I,UC7ExB,SAASwB,GAAT,GAKX,IAJMC,EAIP,EAJDC,OACcC,EAGb,EAHDC,aACAC,EAEC,EAFDA,WACGrJ,EACF,wDACuBxB,oBAAS,GADhC,mBACM8K,EADN,KACYC,EADZ,KAEKC,EAAS,kBAAMD,GAAQ,IACvBlJ,EAAU,kBAAMkJ,GAAQ,IAK9B,OAJIF,IACFA,EAAWvK,QAAUuB,GAIrB,8BACE,kBAAC4I,EAAD,CAAQ5I,QAASA,IACjB,kBAACoJ,GAAA,EAAD,eAAOH,KAAMA,EAAME,OAAQA,GAAYxJ,GACrC,kBAACmJ,EAAD,CAAcK,OAAQA,MCTfvD,UAAe,SAR9B,YAAgC,IAAVU,EAAS,EAATA,MACpB,OAAO,wBAAIxH,UAAU,yBAAyBwH,MCDjC,SAAS+C,GAAT,GAA6B,IAAbnL,EAAY,EAAZA,SAC7B,OAAO,yBAAKY,UAAU,mBAAmBZ,GCD5B,SAASoL,GAAT,GAAoC,IAApBC,EAAmB,EAAnBA,KAAMzK,EAAa,EAAbA,UAC7BwG,EAAa/E,IAAW,MAAD,aAAcgJ,GAAQ,QAASzK,GAC5D,OAAO,uBAAGA,UAAWwG,IDMvB+D,GAAK3C,OAAS8C,GCEdF,GAAKG,QAAU,UACfH,GAAKI,MAAQ,YACbJ,GAAKK,KAAO,OACZL,GAAKM,KAAO,OACZN,GAAKO,MAAQ,QACbP,GAAKQ,KAAO,OACZR,GAAKS,eAAiB,kBACtBT,GAAKU,UAAY,aACjBV,GAAKW,YAAc,eCtBZ,IAAMC,GAAU,CACrBC,UAAW,YACXC,QAAS,UACTC,OAAQ,SACRC,QAAS,UACTC,QAAS,UACTC,MAAO,SAGIC,GAAO,CAClBC,GAAI,KACJC,GAAI,MCLS,SAASC,GAAT,GAMX,IALFrB,EAKC,EALDA,KACAlE,EAIC,EAJDA,QACAvG,EAGC,EAHDA,UACAkB,EAEC,EAFDA,QACGL,EACF,wDACKiI,EAAUrH,IACd,MACA,iBACA,WACA,MACA,OACAzB,EANwB,8BAQbuG,GAAYA,IASzB,OACE,0CAAQvG,UAAW8I,EAAS5H,QAN9B,SAAuB0C,GACrBA,EAAEmI,iBACF7K,GAAWA,EAAQ0C,KAIqC/C,GACtD,kBAAC2J,GAAD,CAAMC,KAAMA,KC1BH,SAASuB,GAAT,GASX,IAAD,EARD5M,EAQC,EARDA,SACAqL,EAOC,EAPDA,KACAlE,EAMC,EANDA,QACAD,EAKC,EALDA,KACAtG,EAIC,EAJDA,UACAiM,EAGC,EAHDA,SACAC,EAEC,EAFDA,KACGrL,EACF,kFACK2F,EAAa/E,IAAW,MAAO,iBAAkBzB,GAA1B,GAC3BiM,YAD2B,4BAEnB3F,GAASA,GAFU,4BAGnBC,GAAYA,GAHO,IAM7B,OACE,0CAAQvG,UAAWwG,EAAYyF,SAAUA,EAAUE,IAAKD,GAAUrL,GAChE,0BAAMb,UAAU,sBACd,kBAACwK,GAAD,CAAMC,KAAMA,KAEd,0BAAMzK,UAAU,QAAQZ,I,aCvBvB,SAASgN,KACd,OACE,kBAAC7B,GAAD,KACE,yBAAKvK,UAAU,eACb,yBAAKA,UAAU,gBAAgBqM,YAAU,OAAzC,OAGA,uBAAGrM,UAAU,2BAAb,kBACA,uBAAGA,UAAU,sBAAb,qDAGA,kBAAC,KAAD,CAAMsM,GAAG,KAAT,8BCHO,SAASC,GAAT,GAKX,IAJFhL,EAIC,EAJDA,KACAiL,EAGC,EAHDA,OACAC,EAEC,EAFDA,SACAvM,EACC,EADDA,OAGMwM,EAbR,SAAmCD,EAAUE,GAC3C,OAAOF,EAASxD,MAAK,qBAAG2D,OACf3D,MAAK,gBAAGqD,EAAH,EAAGA,GAAH,OAAYK,EAASE,WAAaP,QAW/BQ,CAA0BL,EAD1BM,eAEXvG,EAAa/E,IAAW,WAAY,CAAEuL,OAAQN,IAC9CvM,EAAK,YAAcoB,EACnBC,EAAcC,IAAW,MAAO,QAAR,aAAuBvB,IACrD,OACE,wBAAIF,UAAWwG,GACb,0BACExG,UAAU,qBACVK,cAAY,WACZyB,cAAa,IAAM3B,EACnBI,gBAAc,OACd0M,gBAAe9M,GAEf,uBAAGH,UAAWwB,IACd,8BAAOD,IAET,yBAAKpB,GAAIA,EAAIH,UAAU,WAAWkN,cAAa,IAAMV,GACnD,yBAAKxM,UAAU,wCACZyM,EAASjK,KAAI,YAAuB,IAApBjB,EAAmB,EAAnBA,KAAMqL,EAAa,EAAbA,OACrB,OACE,kBAAC,IAAMO,SAAP,CAAgBzK,IAAKnB,GACnB,wBAAIvB,UAAU,mBAAmBuB,EAAjC,KACCqL,EAAOpK,KAAI,YAAoB,IAAjB8J,EAAgB,EAAhBA,GAAItK,EAAY,EAAZA,MACjB,OACE,kBAAC,KAAD,CAASU,IAAKV,EAAOhC,UAAU,gBAAgBsM,GAAIA,GAChDtK,aCvCR,SAASoL,GAAT,GAAkD,IAArB7L,EAAoB,EAApBA,KAAM+K,EAAc,EAAdA,GAAIpM,EAAU,EAAVA,OAC9CsB,EAAcC,IAAW,MAAO,QAAR,aAAuBvB,IACrD,OACE,wBAAIF,UAAU,YACZ,kBAAC,KAAD,CAASA,UAAU,WAAWqN,OAAK,EAACf,GAAIA,GACtC,uBAAGtM,UAAWwB,IACd,8BAAOD,KCNR,SAAS+L,GAAT,GAAkC,IAAVC,EAAS,EAATA,MAC7B,OACE,oCACE,wBAAIvN,UAAU,yBACbuN,EAAMhM,MAAQ,yBAAKvB,UAAU,mBAAmBuN,EAAMhM,MACtDgM,EAAMC,QAAQhL,KAAI,SAAAiL,GAAK,YACTC,IAAbD,EAAMnB,GACJ,kBAACc,GAAD,eAAmB1K,IAAK+K,EAAMlM,MAAUkM,IAExC,kBAAClB,GAAD,eACE7J,IAAK+K,EAAMlM,KACXiL,OAAO,oBACHiB,Q,OCTD,SAASE,GAAT,GAAgE,IAA7CC,EAA4C,EAA5CA,gBAAiBC,EAA2B,EAA3BA,gBAAiBC,EAAU,EAAVA,OAAU,EAClClO,IAAlCN,EADoE,EACpEA,eAAgBI,EADoD,EACpDA,cAClB8G,EAAa/E,IACjB,aACA,sBACA,UACA,eACA,YACA,CAAEsM,QAASzO,IAEb,OACE,wBAAIU,UAAWwG,EAAYrG,GAAG,oBAC5B,kBAAC,KAAD,CACEH,UAAU,iEACVsM,GAAG,KAEH,yBAAKtM,UAAU,kCACZ6N,KAEH,yBAAK7N,UAAU,2BAA2B4N,MAG3CE,EAAOtL,KAAI,SAAC+K,EAAO7J,GAAR,OACV,kBAAC4J,GAAD,CAAc5K,IAAK6K,EAAMhM,MAAQmC,EAAK6J,MAAOA,OAG/C,wBAAIvN,UAAU,sCAEd,yBAAKA,UAAU,kCACb,4BACEA,UAAU,0BACVG,GAAG,gBACHe,QAASxB,MChCZ,SAASsO,GAAT,GAQH,IAPFC,EAOC,EAPDA,aACAC,EAMC,EANDA,OACAhP,EAKC,EALDA,KACAC,EAIC,EAJDA,OACAC,EAGC,EAHDA,SACAuH,EAEC,EAFDA,aACAwH,EACC,EADDA,UAEMrN,EAASoN,EACf,OACE,kBAACjP,EAAD,CAAkBC,KAAMA,EAAMC,OAAQA,GACpC,kBAACuH,GAAD,CAAoBC,aAAcA,GAChC,yBAAKxG,GAAG,WACN,kBAAC,GAAY8N,GACb,yBAAK9N,GAAG,kBAAkBH,UAAU,sBAClC,yBAAKG,GAAG,WACN,kBAACW,EAAD,MACA,kBAAC,IAAD,KACG1B,EACD,kBAAC,IAAD,CAAOgP,UAAWhC,SAK1B,4BAAQpM,UAAU,0BAChB,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,iCACb,gDAAwBmO,Q,iCChC/B,SAASE,GAAT,GAAmD,IAA5BrM,EAA2B,EAA3BA,MAAOsM,EAAoB,EAApBA,OAAWzN,EAAS,kCACvD,OACE,kBAAC0N,GAAA,EAAKC,MAAN,CAAYxO,UAAU,OAAOyO,KAAMH,GAAUI,MAC3C,kBAACH,GAAA,EAAKI,MAAN,CAAYC,SAAUN,GAAStM,GAC/B,kBAACqM,GAAYQ,MAAb,eAAmBP,OAAQA,GAAYzN,KCD9B,SAASiO,GAAWjO,GAAQ,IACjCkO,EAAYlI,KAAZkI,QAER,OACE,kBAAC/C,GAAD,eACEvB,KAAMD,GAAKQ,KACX1E,KAAMqF,GAAKC,GACXrF,QAAS6E,GAAQE,QACjB0D,KAAK,UACDnO,GAEHkO,EAAQE,MCXA,SAASC,GAAT,GAAoC,IAAZhO,EAAW,EAAXA,QAC7B6N,EAAYlI,KAAZkI,QACR,OACE,kBAAC/C,GAAD,CACEzF,QAAS6E,GAAQC,UACjBZ,KAAMD,GAAKI,MACXtE,KAAMqF,GAAKC,GACX1K,QAASA,EACT8N,KAAK,UAEJD,EAAQI,QCXR,SAASC,GAAT,GAAqE,IAA9C5H,EAA6C,EAA7CA,MAAO6C,EAAsC,EAAtCA,OAAQgF,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,SAAUlQ,EAAY,EAAZA,SAAY,EACvCC,oBAAS,GAD8B,mBAClEkQ,EADkE,KACvDC,EADuD,KAEnEC,EAAOC,mBAWb,SAASC,EAAWC,GAClBA,EAAM7D,iBACN6D,EAAMC,kBACN,IAAMC,EAAUL,EAAK9P,QAAQoQ,gBAE7B,GADAP,GAAa,GACRM,EAAL,CAGA,GAAIR,EAASU,UAAW,CACtB,IAAMC,EAAQX,EAAS7P,QACvB4P,EAAOY,GAET5F,IACAmF,GAAa,IAGf,OAzBA9J,qBAAU,WACR,GAAI+J,EAAK9P,QAAS,CAChB,IAAMuQ,EAAaT,EAAK9P,QAAQwQ,qBAAqB,SAAS,GAC1DD,GACFA,EAAWE,WAGd,IAmBD,kBAAC7B,GAAA,EAAD,CAAMgB,UAAWA,EAAWpD,IAAKsD,EAAMY,SAAUV,GAC/C,kBAACrF,GAAA,EAAM1C,OAAP,CACE0I,aAAW,EACXtQ,UAAU,8CAEV,kBAACsK,GAAA,EAAM5C,MAAP,KAAcF,IAEhB,kBAAC8C,GAAA,EAAMzC,KAAP,KAAazI,GACb,kBAACkL,GAAA,EAAMiG,OAAP,CAAcvQ,UAAU,aACtB,kBAACkP,GAAD,CAAchO,QAASmJ,IACvB,kBAACyE,GAAD,CAAY5N,QAASyO,MCxCd,SAASa,KAAwB,IAAD,EAOzCrN,KALFD,EAF2C,EAE3CA,eACAoC,EAH2C,EAG3CA,kBACAO,EAJ2C,EAI3CA,QACAN,EAL2C,EAK3CA,QACAC,EAN2C,EAM3CA,MAEM0I,EAAWrH,KAAXqH,OACFzO,EAAQ8F,EACZ,kBAACc,GAAD,CAASC,KAAK,KAAKC,QAAQ,cACzBf,EACF,uBAAGxF,UAAU,qDAEbkD,GAAkBA,EAAe3B,KAMnC,OACE,kBAACQ,EAAD,CACEC,MAAOkM,EAAOuC,YACdhR,MAAOA,EACPwC,SARa,SAAA9B,GACf,IAAMuQ,EAAS7K,EAAQI,MAAK,SAAAC,GAAC,OAAIA,EAAE/F,KAAOA,KAC1CmF,EAAkBoL,IAOhBxO,cAAe2D,EAAQrD,KAAI,SAAA0D,GAAC,MAAK,CAAE/F,GAAI+F,EAAE/F,GAAI6B,MAAOkE,EAAE3E,WJlB5D8M,GAAYQ,MAAQ,YAAyD,IAAtDP,EAAqD,EAArDA,OAAQgB,EAA6C,EAA7CA,SAAUqB,EAAmC,EAAnCA,SAAUvR,EAAyB,EAAzBA,SAAayB,EAAY,2DACpE+P,EAAOtC,EAAS,SAAAtG,GAAC,OAAI,kBAAC6I,GAAA,EAAD,CAAKjF,GAAI0C,GAAStG,IAAW,SAAAA,GAAC,OAAIA,GACvD8I,EAAQ1R,GACZ,kBAACmP,GAAA,EAAKwC,QAAN,eAAc5E,IAAKmD,EAAU0B,aAAc1B,EAAS2B,WAAepQ,IAErE,OAAO+P,EACL,oCACGE,EACD,kBAACvC,GAAA,EAAKwC,QAAQG,SAAd,CAAuBlC,KAAK,WAAW2B,MAY7CtC,GAAYzE,aAAe,CACzB0E,OAAQ,G,koBK/BV,IAAM6C,GAA4B,kBAChCC,OAAOC,QAAQC,aAAa,GAAIC,SAAS/J,MAAO4J,OAAOzE,SAASE,WAErD2E,GAAezS,IAAMC,gBACrByS,GAAW,kBAAM5R,qBAAW2R,KAC5BE,GAAgB,SAAC,GAKvB,IAJLtS,EAII,EAJJA,SAII,IAHJuS,0BAGI,MAHiBR,GAGjB,EAFJS,EAEI,EAFJA,SACGC,EACC,8DAC0CxS,qBAD1C,mBACGyS,EADH,KACoBC,EADpB,OAEoB1S,qBAFpB,mBAEGH,EAFH,KAES8S,EAFT,OAGsB3S,qBAHtB,mBAGG4S,EAHH,KAGUC,EAHV,OAI4B7S,qBAJ5B,mBAIG8S,EAJH,KAIgBC,EAJhB,OAK0B/S,oBAAS,GALnC,mBAKGkG,EALH,KAKY8M,EALZ,OAM8BhT,oBAAS,GANvC,mBAMGiT,EANH,KAMcC,EANd,KAQJ7M,qBAAU,YACO,yCAAG,uCAAA8M,EAAA,sEACYC,KAAkBZ,GAD9B,UACVa,EADU,OAEhBN,EAASM,IAELtB,OAAOzE,SAASgG,OAAOC,SAAS,SAJpB,iCAKaF,EAAcG,yBAL3B,gBAKNC,EALM,EAKNA,SACRnB,EAAmBmB,GANL,yBAScJ,EAAcZ,kBAT5B,WASVA,EATU,OAWhBC,EAAmBD,IAEfA,EAbY,kCAcKY,EAAcK,UAdnB,eAcR7T,EAdQ,OAed8S,EAAQ9S,GAfM,UAiBMwT,EAAcM,mBAjBpB,QAiBRf,EAjBQ,OAkBdC,EAASD,GAlBK,QAqBhBI,GAAW,GArBK,4CAAH,qDAuBfY,KAEC,IAEH,IAAMC,EAAc,yCAAG,2CAAAV,EAAA,6DAAOW,EAAP,+BAAgB,GACrCZ,GAAa,GADQ,kBAGbJ,EAAYe,eAAeC,GAHd,uDAKnBhN,QAAQX,MAAR,MALmB,yBAOnB+M,GAAa,GAPM,sCASFJ,EAAYY,UATV,QASf7T,EATe,OAUrB8S,EAAQ9S,GACR6S,GAAmB,GAXE,+DAAH,qDAcdc,EAAsB,yCAAG,6BAAAL,EAAA,6DAC7BH,GAAW,GADkB,SAEvBF,EAAYU,yBAFW,uBAGVV,EAAYY,UAHF,OAGvB7T,EAHuB,OAI7BmT,GAAW,GACXN,GAAmB,GACnBC,EAAQ9S,GANqB,2CAAH,qDAQ5B,OACE,kBAACsS,GAAahS,SAAd,CACEC,MAAO,CACLwS,QACAH,kBACA5S,OACAqG,UACA+M,YACAY,iBACAL,yBACAO,iBAAkB,kBAAUjB,EAAYiB,iBAAZ,MAAAjB,EAAW,YACvCkB,kBAAmB,kBAAUlB,EAAYkB,kBAAZ,MAAAlB,EAAW,YACxCa,iBAAkB,kBAAUb,EAAYa,iBAAZ,MAAAb,EAAW,YACvCmB,kBAAmB,kBAAUnB,EAAYmB,kBAAZ,MAAAnB,EAAW,YACxChT,OAAQ,sCAAIoU,EAAJ,yBAAIA,EAAJ,uBAAUpB,EAAYhT,OAAZ,MAAwBoU,EAAxB,CAA2B3B,eAC7C4B,eAAe,WAAD,8BAAE,+CAAAhB,EAAA,sEACML,EAAYa,iBAAZ,MAAAb,EAAW,GADjB,cACRF,EADQ,OAERwB,EAAexB,EAAMyB,MAAM,KAAK,GAChCC,EAASC,KAAKC,MAAMC,KAAKL,IACzBM,EAAQJ,EAAOI,MAAML,MAAM,KAJnB,kBAKPK,GALO,2CAAF,kDAAC,KAShB3U,ICvFQ,SAAS0B,KAAU,IAAD,EACN2Q,KAAjBvS,EADuB,EACvBA,KAAMC,EADiB,EACjBA,OACN+O,EAAWrH,KAAXqH,OACR,OACE,kBAAC,EAAD,CACEjN,sBAAsB,SACtBlB,cAAe,kBAAM,kBAACyQ,GAAD,OACrBxP,WAAY,kBACV,kBAACU,EAAD,CACEH,KAAMrC,EAAKqC,KACXyS,WAAY9U,EAAK2C,QACjB1C,OAAQA,KAGZ4B,YAAa,kBACX,oCACE,kBAACO,EAAD,CACEC,KAAM2M,EAAO+F,YACb/T,OAAO,OACPkB,QAAS,IAEX,kBAACE,EAAD,CACEC,KAAM2M,EAAOgG,cACbhU,OAAO,WACPkB,QAAS,QChCd,IAAM+S,GAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,MAAiB,CAC5C,CACE5G,QAAS,CACP,CACEjM,KAAM6S,EAAQC,MAAMC,UACpBpU,OAAQ,UACRoM,GAAI,OAIV,CACE/K,KAAM6S,EAAQ3H,SAAS8H,aACvB/G,QAAS,CACP,CACEjM,KAAM6S,EAAQC,MAAMG,SACpBtU,OAAQ,UACRoM,GAAI,aAEN,CACE/K,KAAM6S,EAAQC,MAAMI,UACpBvU,OAAQ,eACRoM,GAAI,cAEN,CACE/K,KAAM6S,EAAQC,MAAMK,MACpBxU,OAAQ,iBACRoM,GAAI,YAIV,CACE/K,KAAM6S,EAAQ3H,SAASiE,OACvBlD,QAAS,CACP,CACEjM,KAAM6S,EAAQC,MAAMM,SACpBzU,OAAQ,cACRoM,GAAI,aAEN,CACE/K,KAAM6S,EAAQC,MAAMO,UACpB1U,OAAQ,qBACRoM,GAAI,kBCrCG,SAASuI,GAAT,GAAiD,IAAxB7U,EAAuB,EAAvBA,UAAca,EAAS,6BACvDiI,EAAUrH,IAAW,MAAO,SAAU,gBAAiBzB,GAC7D,OACE,0CAAQgP,KAAK,SAAShP,UAAW8I,GAAajI,GAC5C,uBAAGb,UAAU,2BCJnB,SAAS8U,GAAT,GAAwD,IAA5BC,EAA2B,EAA3BA,aAAcC,EAAa,EAAbA,UACxC,OACE,oCACGD,EACD,4BACGC,EAAUxS,KAAI,SAACoB,EAAGF,GAAJ,OACb,wBAAIhB,IAAKgB,GAAME,QAOzB,SAASqR,GAAT,GAAkC,IAAVzP,EAAS,EAATA,MAChBwP,EAAYxP,EAAM0P,aACpB1P,EAAM0P,aAAaC,OAAOC,OAC1B5P,EAAM6P,cAAc7S,KAAI,SAAAoB,GAAC,gBAAOA,EAAE0R,KAAKC,KAAK,KAAnB,aAA4B3R,EAAE4R,YAC3D,OACE,yBAAKxV,UAAU,eACb,uBAAGA,UAAU,sCACb,kBAAC8U,GAAD,CAAkBC,aAAcvP,EAAMgQ,QAASR,UAAWA,KAKzD,SAASS,GAAT,GAA8D,IAAzCC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,UAAWvW,EAAsB,EAAtBA,SAAayB,EAAS,gDAC1D0E,EAAmBmQ,EAAnBnQ,QAASC,EAAUkQ,EAAVlQ,MACjB,OAAOD,EACL,kBAACc,GAAYxF,GACX2E,EACFmQ,GAAa,kBAACV,GAAD,CAAczP,MAAOA,IAElCpG,EAASsW,GC9BN,SAASE,GAAT,GAAiE,IAAtCF,EAAqC,EAArCA,MAAO3G,EAA8B,EAA9BA,QAAS8G,EAAqB,EAArBA,QAAYhV,EAAS,6CACrE,OACE,kBAAC4U,GAAD,CAAWC,MAAOA,EAAOpP,KAAK,KAAKqP,WAAW,IAC3C,gBAAGG,EAAH,EAAGA,QAASrQ,EAAZ,EAAYA,KAAZ,OACC,kBAAC,GAAD,eACE6C,cACE,oCACE,kBAACuM,GAAD,CAAe3T,QAAS,kBAAM4U,KAAW9V,UAAU,SAClD+O,GAGLtJ,KAAMoQ,EAAQpQ,IACV5E,OD+Bd4U,GAAU7L,aAAe,CACvB+L,WAAW,G,gCEhDQI,G,qGACN7O,GACX,GAAe,OAAXA,GAA8B,KAAXA,EACrB,OAAO,KAET,IAAM8O,EAASC,KAAc/O,EAAOgP,QAAQ,IAAK,MACjD,OAAOC,KAAKC,MAAe,IAATJ,K,8BAGL9O,GACb,GAAe,OAAXA,GAA8B,KAAXA,EACrB,OAAO,EAGT,IAEE,OADA+O,KAAW/O,EAAOgP,QAAQ,IAAK,OACxB,EACP,MAAOtS,GACP,OAAO,K,6BAKT,OAAO,I,6BAGKyS,GAA4B,IAApBC,IAAmB,yDACvC,GAAe,OAAXD,EACF,OAAO,KAET,IAAME,GAASF,EAAS,KAAKG,QAAQ,GACrC,IAAKF,EACH,OAAOC,EAET,IAAIE,EAAQF,EAAM7C,MAAM,KAExB,OADA+C,EAAM,GAAKA,EAAM,GAAGP,QAAQ,wBAAyB,KAC9CO,EAAMlB,KAAK,S,KClCP,SAASmB,GAAT,GAAgD,IAAxB1W,EAAuB,EAAvBA,UAAca,EAAS,6BACtDiI,EAAUrH,IAAW,MAAO,SAAU,cAAezB,GAC3D,OACE,0CAAQgP,KAAK,SAAShP,UAAW8I,GAAajI,GAC5C,uBAAGb,UAAU,uB,6kBCwEnB,SAAS2W,GAAeC,EAAOC,EAAUC,GACvC,OAAIC,OAAOC,UAAUC,eAAeC,KAAKN,EAAO,SAC1CG,OAAOC,UAAUC,eAAeC,KAAKN,EAAO,UApDpD,WAA0CC,EAAUC,GAAU,IAArCK,EAAoC,EAApCA,OAAQC,EAA4B,EAA5BA,MACzB9H,EAAW8H,EAAM5U,KAAI,SAAAC,GAAC,OAAIkU,GAAeQ,EAAO1U,GAAIoU,KAAWC,GAqBrE,OApBAxH,EAAS+H,cAAgB/H,EAASgI,KAElChI,EAAS7P,MAAQ,WACf,OAAO6P,EAAS9M,KAAI,SAAAC,GAAC,OAAIA,EAAEhD,YAG7B6P,EAASU,QAAU,WACjB,OAAOV,EAASxL,SAAWsT,EAAMtT,QAAUwL,EAASrG,MAAK,SAAAxG,GAAC,OAAIA,EAAEuN,cAGlEV,EAASgI,KAAO,SAAA7U,GACd6M,EAAS+H,cAAcV,GAAeQ,EAAO1U,GAAIoU,IACjDA,KAGFvH,EAASiI,SAAW,SAAA7T,GAClB4L,EAASkI,OAAO9T,EAAK,GACrBmT,KAGKvH,EA+BImI,CAAcb,EAAOC,EAAUC,GAjF5C,WAAuDA,GAAU,IAAvCM,EAAsC,EAAtCA,MAAOM,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,SACnCC,EAAUF,GAAa,SAAAjV,GAAC,OAAIA,GAC5B6M,EAAW,CAAE3P,QAAS,MACtBkY,EACgB,oBAAbF,EAA0B,kBAAMA,EAASb,MAAa,kBAAMa,GAqBrE,OAnBArI,EAAS7P,MAAQ,WACf,OAAyB,OAArB6P,EAAS3P,QACJ,KAEFiY,EAAQtI,EAAS3P,QAAQF,QAGlC6P,EAASU,QAAU,WACjB,OAAyB,OAArBV,EAAS3P,QACM,OAAVyX,EAEF9H,EAAS3P,QAAQF,QAAU2X,GAGpC9H,EAAS2B,QAAU,kBACP,OAAVmG,QAA4B1J,IAAV0J,EAAsBA,EAAQS,KAElDvI,EAASwI,KAAO,kBAAMV,GAEf9H,EA0DEyI,CAAenB,EAAOE,GA9BjC,WAA4DD,EAAUC,GAAU,IAAnDkB,EAAkD,EAAlDA,kBAAsBpB,EAA4B,qCACvEtH,EAAWyH,OAAOkB,KAAKrB,GAAOsB,QAClC,SAACC,EAAKzV,GAAN,aACKyV,EADL,eAEGzV,EAAMiU,GAAeC,EAAMlU,GAAMmU,EAAUC,OAE9C,IAgBF,OAbAxH,EAASU,QAAU,WACjB,OAAO+G,OAAOkB,KAAKrB,GAAO3N,MAAK,SAAAmP,GAAC,OAAI9I,EAAS8I,GAAGpI,cAGlDV,EAAS7P,MAAQ,WACf,OAAOsX,OAAOkB,KAAKrB,GAAOsB,QAAO,SAACC,EAAKzV,GACrC,OAAK4M,EAAS5M,GAAKsN,WAAcgI,EAG1B,MAAKG,EAAZ,eAAkBzV,EAAM4M,EAAS5M,GAAKjD,UAF7B0Y,IAGR,KAGE7I,EAUA+I,CAAkBzB,EAAOC,EAAUC,GAGrC,SAASwB,GAAY1B,GAAQ,IAG9BtH,EAH6B,EACZjQ,oBAAS,GAArBkZ,EADwB,oBAOjC,OAFAjJ,EAAWqH,GAAeC,GAHT,kBAAM2B,GAAS,SAAA9V,GAAC,OAAKA,QAE1B,kBAAM6M,KAENI,iBAAOJ,GACR3P,QC5FN,SAAS6Y,GAAT,GAA2C,IAAnBV,EAAkB,EAAlBA,KAASjX,EAAS,wBACvC8T,EAAa9N,KAAb8N,SACFrF,EAAWgJ,GAAY,CAC3B/W,KAAM,CAAE6V,MAAOU,EAAKvW,QAEtB,OACE,kBAAC6N,GAAD,eAAaE,SAAUA,GAAczO,GACnC,kBAACwN,GAAD,CACErM,MAAO2S,EAAS8D,MAAMC,OAAOnX,KAC7B+M,OAAQ,GACRgB,SAAUA,EAAS/N,KACnBoP,SAAS,kBCTV,SAASgI,KAAuB,IAAD,EzCwB/B,WAA6B,IAC1BzV,EAAmBC,KAAnBD,eADyB,EAEL0V,YAAYtU,GAAgB,CACtDuU,OAAQ,SAACC,EAAD,GAAyC,IAAvBC,EAAsB,EAA9BtT,KAAQsT,cAChBpE,EAAamE,EAAME,UAAU,CACnCtD,MAAOtR,GACPf,UAAW,CAAEC,SAAUJ,EAAe/C,MAFhCwU,SAIRmE,EAAMG,WAAW,CACfvD,MAAOtR,GACPf,UAAW,CAAEC,SAAUJ,EAAe/C,IACtCsF,KAAM,CACJkP,SAAUA,EAASuE,OAAO,CAACH,UAZF,iBAE1BI,EAF0B,KAEbC,EAFa,WAoBjC,MAAM,CAHU,SAAAnJ,GACdkJ,EAAS,CAAE9V,UAAW,CAAEC,SAAUJ,EAAe/C,GAAI8P,aAEvD,mBAAoBmJ,IyC3CIC,GAAjBN,EAD6B,oBAE5BpE,EAAa9N,KAAb8N,SACR,OACE,kBAAC9K,GAAD,CACEE,OAAQ,SAAAlJ,GAAK,OAAI,kBAAC6V,GAAiB7V,IACnCoJ,aAAc,SAAApJ,GAAK,OACjB,kBAAC2X,GAAD,eACEV,KAAM,CAAEvW,KAAM,IACdiG,MAAOmN,EAAS8D,MAAMa,YACtBjK,OAAQ0J,GACJlY,O,OCVP,SAAS0Y,GAAT,GAA2C,IAAZC,EAAW,EAAXA,QAAW,E1CwD1C,WAA6B,IAC1BtW,EAAmBC,KAAnBD,eADyB,EAEL0V,YAAYrU,IAFP,iBAE1B4U,EAF0B,KAEbC,EAFa,WAMjC,MAAM,CAHU,SAACjZ,EAAI8P,GACnBkJ,EAAS,CAAE9V,UAAW,CAAEC,SAAUJ,EAAe/C,GAAIA,KAAI8P,aAE3D,mBAAoBmJ,I0C7DIK,GAAjBC,EADwC,oBAEvC/E,EAAa9N,KAAb8N,SACR,OACE,kBAAC9K,GAAD,CACEE,OAAQ,SAAAlJ,GAAK,OACX,kBAACiL,GAAD,eACE9L,UAAU,0BACVyK,KAAMD,GAAKK,KACXtE,QAAS6E,GAAQE,SACbzK,KAGRoJ,aAAc,SAAApJ,GAAK,OACjB,kBAAC2X,GAAD,eACEV,KAAM0B,EACNhS,MAAOmN,EAAS8D,MAAMkB,UACtBtK,OAAQ,SAAAY,GAAK,OAAIyJ,EAAcF,EAAQrZ,GAAI8P,KACvCpP,OClBd,IAAMkH,GAAU,CACd,CAAEG,UAAW,OAAQ0R,MAAM,GAC3B,CACE1R,UAAW,UACX2R,MAAO,QACPC,YAAa,QACbC,UAAWhE,GAAOiE,QAEpB,CACE9R,UAAW,UACX+R,eAAe,EACfF,UAAW,SAACG,EAAM7Q,GAAP,OACT,8BACE,kBAAC,GAAD,CAAqBmQ,QAASnQ,IAC9B,0BAAM7I,MAAO,CAAEC,OAAQ,YACrB,uBAAGT,UAAU,4BAInBQ,MAAO,CACL2Z,WAAY,SACZC,MAAO,QAKPC,GAAgB,CACpB,CACEnS,UAAW,OACXoS,MAAO,QAIJ,SAASC,GAAT,GAAiD,IAAnBC,EAAkB,EAAlBA,eAC7B9E,EAAQrR,KAERoW,EAAY,CAChBC,KAAM,QACNC,eAAe,EACfC,kBAAkB,EAClB9R,QAAS,iCACT+R,SAAU,SAAArB,GAAO,OAAIgB,EAAehB,KAGtC,OACE,kBAAC5D,GAAD,CACEF,MAAOA,EACPG,QAAS,SAAApQ,GAAI,OAAIA,EAAKkP,UACtB5F,QAAS,kBAAC4J,GAAD,MACT5Q,QAASA,GACT+S,SAAS,KACTC,UAAW,SAAAC,GAAC,OAAIA,EAAErG,SAASsG,MAAMzT,OACjC0T,gBAAiB,SAAAF,GAAC,OAAIA,EAAErG,SAASsG,MAAMlT,SACvC0S,UAAWA,EACXJ,cAAeA,KCxDd,SAASc,GAAT,GAA2C,IAAZC,EAAW,EAAXA,QAAW,E1C8H1C,WAA6B,IAC1BlY,EAAmBC,KAAnBD,eADyB,EAEL0V,YAAY3T,GAAgB,CACtD4T,OAAQ,SAACC,EAAD,GAAyC,IAAvBuC,EAAsB,EAA9B5V,KAAQ4V,cAChB3K,EAAWoI,EAAME,UAAU,CACjCtD,MAAO5Q,GACPzB,UAAW,CAAEC,SAAUJ,EAAe/C,MAFhCuQ,OAIRoI,EAAMG,WAAW,CACfvD,MAAO5Q,GACPzB,UAAW,CAAEC,SAAUJ,EAAe/C,IACtCsF,KAAM,CACJiL,OAAO,MACFA,EADC,CAEJ6D,aAAa,MACR7D,EAAO6D,aADA,CAEVC,SAAUjR,EACRmN,EAAO6D,aAAaC,SACpB6G,EAAclb,YAO1Bmb,eAAgB,iBAAM,CACpB,CAAE5F,MAAOtR,GAAcf,UAAW,CAAEC,SAAUJ,EAAe/C,KAC7D,CAAEuV,MAAO5S,EAAeO,UAAW,CAAEC,SAAUJ,EAAe/C,KAC9D,CACEuV,MAAO7S,EACPQ,UAAW,CAAEC,SAAUJ,EAAe/C,SA9BX,iBAE1BgZ,EAF0B,KAEbC,EAFa,WAqCjC,MAAM,CAHU,SAAAjZ,GACdgZ,EAAS,CAAE9V,UAAW,CAAEC,SAAUJ,EAAe/C,GAAIA,UAEvD,mBAAoBiZ,I0ClKImC,GAAjBF,EADwC,oBAE/C,OACE,kBAACvP,GAAD,CACErB,KAAMD,GAAKI,MACXrE,QAAS6E,GAAQG,OACjBrK,QAAS,kBAAMma,EAAcD,EAAQjb,O,ICZtBqb,G,WACnB,WAAYC,EAAMC,EAAOC,GAAM,qBAC7BC,KAAKH,KAAOA,EACZG,KAAKF,MAAQA,EACbE,KAAKD,IAAMA,E,sDAQX,MAAM,GAAN,OAAUC,KAAKH,KAAf,YAAuBI,OAAOD,KAAKF,OAAOI,SAAS,EAAG,KAAtD,YAA8DD,OAC5DD,KAAKD,KACLG,SAAS,EAAG,S,gCAPAC,GACd,OAAO,IAAIC,KAAKD,EAAKE,UAAWF,EAAKG,WAAYH,EAAKI,e,KCNpDC,GAAa,CACjB,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAGmBC,G,WACnB,WAAYZ,EAAMC,GAAQ,qBACxBE,KAAKH,KAAOA,EACZG,KAAKF,MAAQA,E,wDAQb,OAAO,IAAIF,GAAII,KAAKH,KAAMG,KAAKF,MAAO,K,gCAItC,IAAMK,EAAO,IAAIC,KAAKJ,KAAKH,KAAMG,KAAKF,MAAO,GAC7C,OAAO,IAAIF,GAAII,KAAKH,KAAMG,KAAKF,MAAOK,EAAKI,a,+BAI3C,MAAM,GAAN,OAAUC,GAAWR,KAAKF,MAAQ,GAAlC,YAAwCE,KAAKH,S,6BAflCvU,GAAS,IAAD,EACGA,EAAOwM,MAAM,KADhB,mBACZ+H,EADY,KACNC,EADM,KAEnB,OAAO,IAAIW,EAAMC,OAAOb,GAAOa,OAAOZ,Q,YClBnC,SAASa,GAAT,GAOH,IANFtQ,EAMC,EANDA,SACA/J,EAKC,EALDA,cACAgK,EAIC,EAJDA,KACA8E,EAGC,EAHDA,aACAhR,EAEC,EAFDA,UACAwc,EACC,EADDA,SAEMC,EAAqBva,EAAc+D,MAAK,SAAAxD,GAAC,OAAIA,EAAEtC,KAAO6Q,KAD3D,EAEuB3R,oBAAS,GAFhC,mBAEM8K,EAFN,KAEYC,EAFZ,OAG2B/K,mBAC1Bod,EAAqBA,EAAmBza,MAAQ,IAJjD,mBAGMoH,EAHN,KAGcsT,EAHd,OAMqCrd,mBAAS,GAN9C,mBAMMsd,EANN,KAMmBC,EANnB,KAOKC,EAAUnN,mBACVlJ,EAAa/E,IAAW,WAAY,cAAezB,GACnD8c,EAAW5a,EAAckH,QAAO,SAAA3G,GAAC,OACrCA,EAAET,MAAM+a,cAAcnK,SAASxJ,EAAO2T,kBAElCC,EAAatN,mBAuBnB,SAASxO,EAAQf,GACf,IAAM8c,EAAgB/a,EAAc+D,MAAK,SAAAxD,GAAC,OAAIA,EAAEtC,KAAOA,KAAI6B,MAC3DoI,GAAQ,GACRsS,EAAUO,GACV/Q,EAAKvM,QAAU,CAAEF,MAAOU,GAyC1B,OAlEAuF,qBAAU,WACRwG,EAAKvM,QAAU,CAAEF,MAAOuR,KAEvB,IAEHtL,qBAAU,WACR,SAASwX,EAAetN,GACjBoN,EAAWrd,UAAWqd,EAAWrd,QAAQwd,SAASvN,EAAMwN,UAI7DhT,GAAQ,GACSlI,EAAc+D,MAAK,SAAAxD,GAAC,OAAIA,EAAET,QAAUoH,MAEnDsT,EAAU,KAId,OADAnL,SAAS8L,iBAAiB,YAAaH,GAChC,kBAAM3L,SAAS+L,oBAAoB,YAAaJ,OAiDvD,yBAAKld,UAAWwG,EAAY2F,IAAK6Q,GAC/B,2BACEhd,UAAU,eACVP,MAAO2J,EACP4F,KAAK,OACL/M,SA5CN,SAAuB2B,GACrB,IAAMnE,EAAQmE,EAAEwZ,OAAO3d,MACvB2K,GAAQ,GACRsS,EAAUjd,GACVmd,EAAe,GACf,IAAMW,EAAWrb,EAAc+D,MAAK,SAAAxD,GAAC,OAAIA,EAAET,QAAUvC,KACjD8d,IACFrR,EAAKvM,QAAU,CAAEF,MAAO8d,EAASpd,MAsC/Bqd,UAlCN,SAAmB5Z,GACC,KAAdA,EAAE6Z,SAEJ7Z,EAAEmI,iBACE4Q,GAAeG,EAAShZ,OAAS,EACnC8Y,EAAe,GAEfA,GAAe,SAAAna,GAAC,OAAIA,EAAI,MAEH,KAAdmB,EAAE6Z,SAEX7Z,EAAEmI,iBAEA6Q,EADED,GAAe,EACFG,EAAShZ,OAAS,EAElB,SAAArB,GAAC,OAAIA,EAAI,KAEH,KAAdmB,EAAE6Z,SAAkBtT,GAE7BvG,EAAEmI,iBACF7K,EAAQ4b,EAASH,GAAaxc,KACP,IAAdyD,EAAE6Z,SAAiBtT,GAE5BjJ,EAAQ4b,EAASH,GAAaxc,KAY5B8L,SAAUA,EACVuQ,SAAUA,IAEZ,4BACExc,UAAU,mEACVK,cAAY,WACZqd,iBAAe,SACfC,YAAU,QACVnd,MAAO,CACL+B,SAAU,OACVqb,oBAAqB,EACrBC,uBAAwB,EACxBC,QAAS,GAEXC,UAAW,EACX9R,SAAUA,EACV+C,KAAK,WAEP,wBACE7C,IAAK0Q,EACLzc,KAAK,OACLJ,UAAWyB,IAAW,gBAAiB,CAAE0I,SACzC3J,MAAO,CACLwd,UAAW,QACXC,UAAW,SAGZnB,EAASta,KAAI,SAACC,EAAGiB,GAAJ,OACZ,wBACE1D,UAAS,wBAAmB0D,IAAQiZ,EAAc,SAAW,IAC7Dzb,QAAS,kBAAMA,EAAQuB,EAAEtC,KACzBuC,IAAKD,EAAEtC,IAENsC,EAAET,YClIR,SAASkc,GAAT,GAAiE,IAApClc,EAAmC,EAAnCA,MAAOsE,EAA4B,EAA5BA,KAAMqK,EAAsB,EAAtBA,SAAUvR,EAAY,EAAZA,SACzD,OACE,kBAACmP,GAAA,EAAKC,MAAN,CAAYC,GAAIC,MACd,kBAACH,GAAA,EAAKI,MAAN,CAAYC,QAAM,GAAE5M,GACpB,kBAAC6O,GAAA,EAAD,CAAKjF,GAAItF,GACNlH,EACAuR,GACC,kBAACpC,GAAA,EAAKwC,QAAQG,SAAd,CAAuBlC,KAAK,WACzB2B,K,q3BAebuN,GAAkBtU,aAAe,CAC/B0E,OAAQ,GCxBV,IAAM6P,GAAiBvb,IAAH,MAcdwb,GAAkBxb,IAAH,MAcfyb,GAAkBzb,IAAH,MA8Cd,SAAS0b,KAAoB,IAC1Bpb,EAAmBC,KAAnBD,eACR,OAAOE,YAAS+a,GAAgB,CAC9B9a,UAAW,CAAEC,SAAUJ,EAAe/C,MC5EnC,SAASoe,GAAT,GAAiD,IAA1BC,EAAyB,EAAzBA,YAAalP,EAAY,EAAZA,SAAY,EACvBjQ,oBAAS,GADc,mBAC9CyQ,EAD8C,KACrC2O,EADqC,OAE3Bpf,mBAASiQ,EAAS2B,WAAa,IAFJ,mBAE9CxR,EAF8C,KAEvC8Y,EAFuC,KAWrD,OARA7S,qBAAU,WACR4J,EAAS3P,QAAU,CAAEF,WACpB,CAAC6P,EAAU7P,IAOZ,kBAAC8O,GAAA,EAAKwC,QAAN,CACEyL,UAAQ,EACRxN,KAAK,OACLwP,YAAaA,EACb/e,MAAOA,EACPwC,SAXJ,SAAkB2B,GAChB,IAAM8a,EAAW9a,EAAEwZ,OAAO3d,MAC1B8Y,EAASmG,GACTD,EAAW1I,GAAOjG,QAAQ4O,KASxB5O,QAASA,ICZR,SAAS6O,GAAT,GAAwC,IAAbrP,EAAY,EAAZA,SAC1BoG,EAAQ4I,KACN9J,EAAa3N,KAAb2N,SACR,OACE,kBAACiB,GAAD,CAAWC,MAAOA,IACf,gBAAGjQ,EAAH,EAAGA,KAAH,OACC,oCACE,2BAAOzF,UAAU,kCACdwU,EAASiE,MAAMC,OAAOkG,WACvB,kBAAC9S,GAAD,CACErB,KAAMD,GAAKM,KACXvE,QAAS6E,GAAQE,QACjBhF,KAAMqF,GAAKC,GACX1K,QAAS,kBACPoO,EAASgI,KAAK,CACZuH,SAAU,CAAE1e,GAAI,MAChBkW,OAAQ,QAGZrH,KAAK,YAGRM,EAAS9M,KAAI,SAACsc,EAAkBpb,GAAnB,OACZ,kBAAC6K,GAAA,EAAKC,MAAN,CACEC,GAAIC,KACJhM,IAAKoc,EAAiBC,WAAWjH,QAAUpU,EAC3C1D,UAAU,6BAEV,kBAAC6Q,GAAA,EAAD,CAAKjF,GAAI,GACP,kBAAC,GAAD,CACEM,KAAM4S,EAAiBC,WACvB/N,aAAc8N,EAAiBC,WAAWjH,OAC1C5V,cAAeuD,EAAKmZ,WAAWpc,KAAI,kBAAmB,CACpDrC,GADiC,EAAGA,GAEpC6B,MAFiC,EAAOT,SAI1Cib,UAAQ,KAGZ,kBAAC3L,GAAA,EAAD,CAAK7Q,UAAU,QACb,kBAACue,GAAD,CACEC,YAAahK,EAASiE,MAAMC,OAAOrC,OACnC/G,SAAUwP,EAAiBzI,UAG/B,kBAACxF,GAAA,EAAD,CAAKjF,GAAI,EAAG5L,UAAU,QACpB,kBAAC8L,GAAD,CACErB,KAAK,QACLlE,QAAQ,SACRD,KAAK,KACLpF,QAAS,kBAAMoO,EAASiI,SAAS7T,IACjCsL,KAAK,oBChDhB,SAASgQ,GAAT,GAAoD,IAA5BxF,EAA2B,EAA3BA,QAAS1B,EAAkB,EAAlBA,KAASjX,EAAS,kCAChDqC,EAAmBC,KAAnBD,eACAsR,EAAa3N,KAAb2N,SACFyK,EAAgB5a,KAChBiL,EAAWgJ,GAAY,CAC3B9Q,MAAO,CAAE4P,MAAOU,EAAKtQ,OACrBuU,KAAM,CAAE3E,MAAOU,EAAKiE,MACpBmD,UAAW,CACT9H,MAAOU,EAAK0B,QAAQrZ,GACpBwX,SAAU6B,GAAWA,EAAQrZ,IAE/Bye,WAAY,CACVxH,MAAOU,EAAK8G,WACZzH,OAAQ,SAAAnP,GAAC,MAAK,CACZ+W,WAAY,CAAE3H,MAAOpP,EAAE6W,SAAS1e,IAChCkW,OAAQ,CACNe,MAAOrB,GAAOiE,OAAOhS,EAAEqO,QAAQ,GAC/BqB,SAAU3B,GAAOlC,OAEnBmE,mBAAmB,OAInB0D,EAAQW,GAAMxI,MAAM3Q,EAAeqR,aAAamH,OAChDyD,EAAQzD,EAAM0D,WACdC,EAAO3D,EAAM4D,UAEnB,OACE,kBAAClQ,GAAD,eAAaE,SAAUA,GAAczO,GACnC,kBAAC4U,GAAD,CAAWC,MAAOuJ,IACf,gBAASM,EAAT,EAAG9Z,KAAH,OACC,oCACE,kBAAC4I,GAAD,CACErM,MAAOwS,EAASiE,MAAMC,OAAOlR,MAC7B8G,OAAQ,GACRgB,SAAUA,EAAS9H,MACnBmJ,SAAS,eACT6L,UAAQ,IAEV,kBAACnO,GAAD,CACErM,MAAOwS,EAASiE,MAAMC,OAAOqD,KAC7BzN,OAAQ,GACRgB,SAAUA,EAASyM,KACnBpL,SAAS,eACT3B,KAAK,OACLwN,UAAQ,EACRgD,IAAKL,EAAMnF,SACXyF,IAAKJ,EAAKrF,WAEZ,kBAACkE,GAAD,CAAmBlc,MAAOwS,EAASiE,MAAMC,OAAOc,QAASlT,KAAM,GAC7D,kBAAC,GAAD,CACE4F,KAAMoD,EAAS4P,UACflO,aAAc1B,EAAS4P,UAAUjO,UACjC/O,cAAeqd,EAAa5K,SAASnS,KAAI,kBAAmB,CAC1DrC,GADuC,EAAGA,GAE1C6B,MAFuC,EAAOT,SAIhD0K,WAAYuN,EACZgD,UAAQ,KAGZ,kBAACmC,GAAD,CAAiBrP,SAAUA,EAASsP,kBCrEzC,SAASc,GAAT,GAA2C,IAAZtE,EAAW,EAAXA,QAAW,EnD6F1C,WAA6B,IAC1BlY,EAAmBC,KAAnBD,eADyB,EAEL0V,YAAY5T,GAAgB,CACtDsW,eAAgB,iBAAM,CACpB,CAAE5F,MAAOtR,GAAcf,UAAW,CAAEC,SAAUJ,EAAe/C,KAC7D,CAAEuV,MAAO5S,EAAeO,UAAW,CAAEC,SAAUJ,EAAe/C,KAC9D,CACEuV,MAAO7S,EACPQ,UAAW,CAAEC,SAAUJ,EAAe/C,SARX,iBAE1BgZ,EAF0B,KAEbC,EAFa,WAejC,MAAM,CAHU,SAACjZ,EAAI8P,GACnBkJ,EAAS,CAAE9V,UAAW,CAAEC,SAAUJ,EAAe/C,GAAIA,KAAI8P,aAE3D,mBAAoBmJ,ImD3GIuG,GAAjBC,EADwC,oBAEvCpL,EAAa3N,KAAb2N,SACR,OACE,kBAAC3K,GAAD,CACEE,OAAQ,SAAAlJ,GAAK,OACX,kBAACiL,GAAD,eAAerB,KAAMD,GAAKK,KAAMtE,QAAS6E,GAAQE,SAAazK,KAEhEoJ,aAAc,SAAApJ,GAAK,OACjB,kBAACme,GAAD,eACElH,KAAMsD,EACN5T,MAAOgN,EAASiE,MAAMkB,UACtBtK,OAAQ,SAAAY,GAAK,OAAI2P,EAAcxE,EAAQjb,GAAI8P,KACvCpP,OCZd,IAAMkH,GAAU,CACd,CAAEG,UAAW,SACb,CAAEA,UAAW,OAAQ0R,MAAM,GAC3B,CACE1R,UAAW,UACX6R,UAAW,SAAAvH,GAAC,OAAIA,EAAEjR,OAEpB,CACE2G,UAAW,cACX6R,UAAWhE,GAAOiE,OAClBH,MAAO,QACPC,YAAa,SAEf,CACE5R,UAAW,UACX+R,eAAe,EACfF,UAAW,SAACG,EAAM7Q,GAAP,OACT,8BACE,kBAACqW,GAAD,CAAqBtE,QAAS/R,IAC9B,kBAAC8R,GAAD,CAAqBC,QAAS/R,MAGlC7I,MAAO,CACL2Z,WAAY,SACZC,MAAO,QAKPyF,GAAa,SAACxW,EAAKyW,GACvB,OAAOA,EAAW,IAAM,GAAK,iBAGzBC,GAAY,CAChB/f,UAAW,yBACXggB,SAAU,SAAA3W,GAAG,OACX,2BAAOrJ,UAAU,uBACf,+BACGqJ,EAAIuV,WAAWpc,KAAI,SAACqc,EAAUnb,GAAX,OAClB,wBAAIhB,IAAKgB,GACP,wBAAI1D,UAAU,QAAQ6e,EAASA,SAAStd,MACxC,4BAAKwU,GAAOiE,OAAO6E,EAASxI,iBAQlCgE,GAAgB,CACpB,CACEnS,UAAW,OACXoS,MAAO,SAIJ,SAAS2F,GAAT,GAKH,IAJFlF,EAIC,EAJDA,UACAmF,EAGC,EAHDA,aACAC,EAEC,EAFDA,cACGtf,EACF,4DACK6U,EpDgDD,WAAkC,IAC/BxS,EAAmBC,KAAnBD,eACR,OAAOE,YAAS0B,GAAsB,CACpCzB,UAAW,CAAEC,SAAUJ,EAAe/C,MoDnD1BigB,GAEVxX,EAAU,GAKd,OAJIuX,GACFvX,EAAQ0O,MAAK,SAAAjO,GAAG,OAAIA,EAAImQ,QAAQrZ,KAAOggB,KAIvC,kBAACvK,GAAD,iBACM/U,EADN,CAEE6U,MAAOA,EACPG,QAAS,SAAAmF,GAAC,OAAIA,EAAEtK,OAAO6D,aAAaC,UACpCzF,QAASmR,EACTnY,QAASA,GACT+S,SAAS,KACTiF,UAAWA,GACXF,WAAYA,GACZpW,SAAS,EACTsR,UAAWA,EACXG,gBAAiB,SAAAF,GAAC,OAAIA,EAAExG,SAASyG,MAAMlT,SACvCsS,cAAeA,GACfzR,QAASA,KCnFR,SAASyX,GAAT,GAA2C,IAAZ7G,EAAW,EAAXA,QAAW,ErDuD1C,WAA6B,IAC1BtW,EAAmBC,KAAnBD,eADyB,EAEL0V,YAAY7T,GAAgB,CACtD8T,OAAQ,SAACC,EAAD,GAAyC,IAAvBwH,EAAsB,EAA9B7a,KAAQ6a,cAChB5P,EAAWoI,EAAME,UAAU,CACjCtD,MAAO5Q,GACPzB,UAAW,CAAEC,SAAUJ,EAAe/C,MAFhCuQ,OAIRoI,EAAMG,WAAW,CACfvD,MAAO5Q,GACPzB,UAAW,CAAEC,SAAUJ,EAAe/C,IACtCsF,KAAM,CACJiL,OAAO,MACFA,EADC,CAEJ6D,aAAa,MACR7D,EAAO6D,aADA,CAEVC,SAAU9D,EAAO6D,aAAaC,SAAS0E,OAAO,CAACoH,YAMzDhF,eAAgB,iBAAM,CACpB,CAAE5F,MAAOtR,GAAcf,UAAW,CAAEC,SAAUJ,EAAe/C,KAC7D,CAAEuV,MAAO5S,EAAeO,UAAW,CAAEC,SAAUJ,EAAe/C,KAC9D,CACEuV,MAAO7S,EACPQ,UAAW,CAAEC,SAAUJ,EAAe/C,SA3BX,iBAE1BgZ,EAF0B,KAEbC,EAFa,WAkCjC,MAAM,CAHU,SAAAnJ,GACdkJ,EAAS,CAAE9V,UAAW,CAAEC,SAAUJ,EAAe/C,GAAI8P,aAEvD,mBAAoBmJ,IqDxFImH,GAAjBD,EADwC,oBAEvC9L,EAAa3N,KAAb2N,SAER,OACE,kBAAC3K,GAAD,CACEE,OAAQ,SAAAlJ,GAAK,OAAI,kBAAC6V,GAAiB7V,IACnCoJ,aAAc,SAAApJ,GAAK,OACjB,kBAACme,GAAD,eACElH,KAAM,CACJvW,KAAM,KACNiY,QAAS,GACTuC,KAAM,KACN6C,WAAY,IAEdpF,QAASA,EACThS,MAAOgN,EAASiE,MAAMa,YACtBjK,OAAQiR,GACJzf,O,cCjBR2f,I,OAAqBxhB,2BAEpB,SAASyhB,GAAT,GAAwD,IAA5BC,EAA2B,EAA3BA,cAAkB7f,EAAS,mCACpCxB,mBAASqhB,GAD2B,mBACrDvW,EADqD,KAC/CC,EAD+C,KAE5D,OACE,kBAACoW,GAAmBhhB,SAApB,CACEC,MAAO,CAAE0K,OAAMwW,OAAQ,kBAAMvW,GAAQ,SAAAwW,GAAC,OAAKA,QAE3C,kBAACnZ,GAAU5G,ICHV,SAASggB,GAAT,GAAoE,IAA3CC,EAA0C,EAA1CA,UAAWC,EAA+B,EAA/BA,YAAajJ,EAAkB,EAAlBA,KAASjX,EAAS,kDAChEqC,EAAmBC,KAAnBD,eACAuR,EAAc5N,KAAd4N,UACFiB,EAAQrR,KACRiL,EAAWgJ,GAAY,CAC3B9Q,MAAO,CAAE4P,MAAOU,EAAKtQ,OACrBuU,KAAM,CAAE3E,MAAOU,EAAKiE,MACpB1F,OAAQ,CACNe,MAAOrB,GAAOiE,OAAOlC,EAAKzB,QAAQ,GAClCqB,SAAU3B,GAAOlC,OAEnBmN,cAAe,CACb5J,MAAOU,EAAKiJ,aAAejJ,EAAKiJ,YAAY5gB,GAC5CuX,SAAU,SAAAjV,GAAC,MAAW,KAANA,EAAW,KAAOA,GAClCkV,SAAUoJ,GAAeA,EAAY5gB,IAEvC8gB,YAAa,CACX7J,MAAOU,EAAKgJ,UAAU3gB,GACtBwX,SAAUmJ,GAAaA,EAAU3gB,MAI/Bub,EAAQW,GAAMxI,MAAM3Q,EAAeqR,aAAamH,OAChDyD,EAAQzD,EAAM0D,WACdC,EAAO3D,EAAM4D,UACnB,OACE,kBAAClQ,GAAD,eAAaE,SAAUA,GAAczO,GACnC,kBAAC4U,GAAD,CAAWC,MAAOA,IACf,gBAAGjQ,EAAH,EAAGA,KAAH,OACC,oCACE,kBAAC4I,GAAD,CACEmO,UAAQ,EACRxa,MAAOyS,EAAUgE,MAAMC,OAAOlR,MAC9B8G,OAAQ,GACRgB,SAAUA,EAAS9H,MACnBmJ,SAAS,kBAEX,kBAACtC,GAAD,CACErM,MAAOyS,EAAUgE,MAAMC,OAAOqD,KAC9BzN,OAAQ,GACRgB,SAAUA,EAASyM,KACnBpL,SAAS,eACT3B,KAAK,OACLwN,UAAQ,EACRgD,IAAKL,EAAMnF,SACXyF,IAAKJ,EAAKrF,WAEZ,kBAAC3L,GAAD,CACEC,OAAQ,GACRtM,MAAOyS,EAAUgE,MAAMC,OAAOrC,OAC9B1F,SAAS,iBACT3B,KAAK,SACLwN,UAAQ,EACRlN,SAAUA,EAAS+G,OACnB6K,KAAK,SAEP,kBAAChD,GAAD,CACE5X,KAAM,GACNtE,MAAOyS,EAAUgE,MAAMC,OAAOqI,aAE9B,kBAAC,GAAD,CACE7e,cAAeuD,EAAKkP,SAASnS,KAAI,kBAAmB,CAClDrC,GAD+B,EAAGA,GAElC6B,MAF+B,EAAOT,SAIxC2K,KAAMoD,EAAS0R,cACfhQ,aAAc1B,EAAS0R,cAAc/P,UACrChF,WAAY8U,KAGhB,kBAAC7C,GAAD,CACE5X,KAAM,GACNtE,MAAOyS,EAAUgE,MAAMC,OAAOoI,WAE9B,kBAAC,GAAD,CACE5e,cAAeuD,EAAKkP,SAASnS,KAAI,kBAAmB,CAClDrC,GAD+B,EAAGA,GAElC6B,MAF+B,EAAOT,SAIxC2K,KAAMoD,EAAS2R,YACfjQ,aAAc1B,EAAS2R,YAAYhQ,UACnChF,WAAY6U,UCxFrB,SAASK,GAAT,GAA6C,IAAbC,EAAY,EAAZA,SAAY,EzD4F5C,WAA8B,IAC3Ble,EAAmBC,KAAnBD,eAD0B,EAEN0V,YAAYjU,GAAiB,CACvD2W,eAAgB,iBAAM,CACpB,CAAE5F,MAAOtR,GAAcf,UAAW,CAAEC,SAAUJ,EAAe/C,KAC7D,CACEuV,MAAO7S,EACPQ,UAAW,CAAEC,SAAUJ,EAAe/C,SAPV,iBAE3BgZ,EAF2B,KAEdC,EAFc,WAclC,MAAM,CAHU,SAACjZ,EAAI8P,GACnBkJ,EAAS,CAAE9V,UAAW,CAAEC,SAAUJ,EAAe/C,GAAIA,KAAI8P,aAE3D,mBAAoBmJ,IyDzGKiI,GAAlBC,EAD0C,oBAEzC7M,EAAc5N,KAAd4N,UACR,OACE,kBAAC5K,GAAD,CACEE,OAAQ,SAAAlJ,GAAK,OACX,kBAACiL,GAAD,eAAerB,KAAMD,GAAKK,KAAMtE,QAAS6E,GAAQE,SAAazK,KAEhEoJ,aAAc,SAAApJ,GAAK,OACjB,kBAACggB,GAAD,eACE/I,KAAMsJ,EACN5Z,MAAOiN,EAAUgE,MAAMkB,UACvBtK,OAAQ,SAAAY,GAAK,OAAIqR,EAAeF,EAASjhB,GAAI8P,KACzCpP,OCZP,SAAS0gB,GAAT,GAA6C,IAAbH,EAAY,EAAZA,SAAY,E1DoH5C,WAA6B,IAC1Ble,EAAmBC,KAAnBD,eADyB,EAEL0V,YAAYhU,GAAiB,CACvDiU,OAAQ,SAACC,EAAD,GAA0C,IAAxB0I,EAAuB,EAA/B/b,KAAQ+b,eAChB9Q,EAAWoI,EAAME,UAAU,CACjCtD,MAAOjR,GACPpB,UAAW,CAAEC,SAAUJ,EAAe/C,MAFhCuQ,OAIRoI,EAAMG,WAAW,CACfvD,MAAOjR,GACPpB,UAAW,CAAEC,SAAUJ,EAAe/C,IACtCsF,KAAM,CACJiL,OAAO,MACFA,EADC,CAEJ6D,aAAa,MACR7D,EAAO6D,aADA,CAEVE,UAAWlR,EACTmN,EAAO6D,aAAaE,UACpB+M,EAAerhB,YAO3Bmb,eAAgB,iBAAM,CACpB,CAAE5F,MAAOtR,GAAcf,UAAW,CAAEC,SAAUJ,EAAe/C,KAC7D,CACEuV,MAAO7S,EACPQ,UAAW,CAAEC,SAAUJ,EAAe/C,SA7BX,iBAE1BgZ,EAF0B,KAEbC,EAFa,WAoCjC,MAAM,CAHU,SAAAjZ,GACdgZ,EAAS,CAAE9V,UAAW,CAAEC,SAAUJ,EAAe/C,GAAIA,UAEvD,mBAAoBiZ,I0DvJKqI,GAAlBD,EAD0C,oBAEjD,OACE,kBAAC1V,GAAD,CACErB,KAAMD,GAAKI,MACXrE,QAAS6E,GAAQG,OACjBrK,QAAS,kBAAMsgB,EAAeJ,EAASjhB,OHW7CsgB,GAAiB7W,aAAe,CAC9B8W,eAAe,GAajBD,GAAiB7Y,OAVjB,YAA0D,IAAxB5H,EAAuB,EAAvBA,UAAca,EAAS,6BAC/C8f,EAAW9gB,qBAAW2gB,IAAtBG,OACFna,EAAa/E,IAAW,4BAA6BzB,GAC3D,OACE,kBAACyH,GAAMG,OAAP,eAAc1G,QAAS,kBAAMyf,KAAU3gB,UAAWwG,GAAgB3F,KAuBtE4f,GAAiB/Y,MAfjB,YAAwD,IAAvBtI,EAAsB,EAAtBA,SAAayB,EAAS,4BAC7CsJ,EAAStK,qBAAW2gB,IAApBrW,KACR,OACE,kBAAC1C,GAAMC,MAAU7G,EACf,kBAAC2J,GAAD,CACEC,KAAMN,EAAOK,GAAKU,UAAYV,GAAKW,YACnCnL,UAAU,wBAEXZ,IAiBPqhB,GAAiB5Y,KARjB,SAA8BhH,GAAQ,IAC5BsJ,EAAStK,qBAAW2gB,IAApBrW,KACR,OACE,kBAACuX,GAAA,EAAD,CAAUC,GAAIxX,GACZ,kBAAC1C,GAAMI,KAAShH,KIrDtB,IAAMkH,GAAU,CACd,CAAEG,UAAW,SACb,CACEA,UAAW,cACX6R,UAAW,SAAAvH,GAAC,OAAIA,GAAKA,EAAEjR,OAEzB,CACE2G,UAAW,YACX6R,UAAW,SAAAvH,GAAC,OAAIA,EAAEjR,OAEpB,CACE2G,UAAW,SACX2R,MAAO,QACPC,YAAa,QACbC,UAAWhE,GAAOiE,QAEpB,CACE9R,UAAW,OACX2R,MAAO,QACPC,YAAa,SAEf,CACE5R,UAAW,UACX+R,eAAe,EACfF,UAAW,SAACG,EAAM7Q,GAAP,OACT,8BACE,kBAAC8X,GAAD,CAAsBC,SAAU/X,IAChC,kBAACkY,GAAD,CAAsBH,SAAU/X,MAGpC7I,MAAO,CACL2Z,WAAY,SACZC,MAAO,QAKN,SAASwH,GAAT,GAKH,IAJFC,EAIC,EAJDA,gBACAC,EAGC,EAHDA,kBACA5B,EAEC,EAFDA,aACGrf,EACF,sEACK6U,E3DdD,WAAmC,IAChCxS,EAAmBC,KAAnBD,eACR,OAAOE,YAASqB,GAAuB,CACrCpB,UAAW,CAAEC,SAAUJ,EAAe/C,M2DW1B4hB,GACVnZ,EAAU,GASd,OARIiZ,GACFjZ,EAAQ0O,MAAK,SAAAjO,GAAG,OAAIA,EAAIyX,UAAU3gB,KAAO0hB,KAEvCC,GACFlZ,EAAQ0O,MACN,SAAAjO,GAAG,OAAIA,EAAI0X,aAAe1X,EAAI0X,YAAY5gB,KAAO2hB,KAInD,kBAAClM,GAAD,iBACM/U,EADN,CAEE6U,MAAOA,EACPG,QAAS,SAAApQ,GAAI,OAAIA,EAAKiL,OAAO6D,aAAaE,WAC1C1F,QAASmR,EACTnY,QAASA,GACT+S,SAAS,KACTI,gBAAiB,SAAAF,GAAC,OAAIA,EAAEvG,UAAUwG,MAAMlT,SACxCa,QAASA,KC/DR,SAASoZ,GAAT,GAA2D,IAA3BlB,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,YAAe,E5D8C1D,WAA8B,IAC3B7d,EAAmBC,KAAnBD,eAD0B,EAEN0V,YAAYlU,GAAiB,CACvDmU,OAAQ,SAACC,EAAD,GAA0C,IAAxBmJ,EAAuB,EAA/Bxc,KAAQwc,eAChBvR,EAAWoI,EAAME,UAAU,CACjCtD,MAAOjR,GACPpB,UAAW,CAAEC,SAAUJ,EAAe/C,MAFhCuQ,OAIRoI,EAAMG,WAAW,CACfvD,MAAOjR,GACPpB,UAAW,CAAEC,SAAUJ,EAAe/C,IACtCsF,KAAM,CACJiL,OAAO,MACFA,EADC,CAEJ6D,aAAa,MACR7D,EAAO6D,aADA,CAEVE,UAAW/D,EAAO6D,aAAaE,UAAUyE,OAAO,CAAC+I,YAM3D3G,eAAgB,iBAAM,CACpB,CAAE5F,MAAOtR,GAAcf,UAAW,CAAEC,SAAUJ,EAAe/C,KAC7D,CACEuV,MAAO7S,EACPQ,UAAW,CAAEC,SAAUJ,EAAe/C,SA1BV,iBAE3BgZ,EAF2B,KAEdC,EAFc,WAiClC,MAAM,CAHU,SAAAnJ,GACdkJ,EAAS,CAAE9V,UAAW,CAAEC,SAAUJ,EAAe/C,GAAI8P,aAEvD,mBAAoBmJ,I4D9EK8I,GAAlBD,EADwD,oBAEvDxN,EAAc5N,KAAd4N,UACR,OACE,kBAAC5K,GAAD,CACEE,OAAQ,SAAAlJ,GAAK,OAAI,kBAAC6V,GAAiB7V,IACnCoJ,aAAc,SAAApJ,GAAK,OACjB,kBAACggB,GAAD,eACE/I,KAAM,CACJtQ,MAAO,KACPuZ,YAAa,CAAE5gB,GAAI,MACnB2gB,UAAW,CAAE3gB,GAAI,MACjBkW,OAAQ,KACR0F,KAAM,MAERvU,MAAOiN,EAAUgE,MAAMa,YACvBjK,OAAQ4S,EACRnB,UAAWA,EACXC,YAAaA,GACTlgB,OCdC,SAASshB,KAAY,IAAD,EACa9iB,mBAAS,MADtB,mBAC1B+iB,EAD0B,KACTC,EADS,KAGjC,OACE,kBAAC9X,GAAD,KACE,kBAACA,GAAK3C,OAAN,CAAamT,UAAW,SAAAC,GAAC,OAAIA,EAAE5G,QAAQC,MAAMM,YAC7C,kBAACjG,GAAA,EAAD,KACE,kBAACmC,GAAA,EAAD,CAAKjF,GAAI,GACP,kBAAC2O,GAAD,CAAoBC,eAAgB,SAAAhI,GAAC,OAAI6P,EAAmB7P,OAE9D,kBAAC3B,GAAA,EAAD,KACIuR,EACA,oCACE,4BAAKA,EAAgB7gB,MACrB,kBAACqgB,GAAD,CACE7G,UAAW,SAAAC,GAAC,OAAIA,EAAErG,SAAS2N,uBAC3BpC,aACE,kBAAC8B,GAAD,CAAsBlB,UAAWsB,IAEnCjC,cAAeiC,EAAgBjiB,GAC/BwI,cAAe,CAAC,aAChBF,QAASgY,GACToB,gBAAiBO,EAAgBjiB,KAEnC,kBAACyhB,GAAD,CACE7G,UAAW,SAAAC,GAAC,OAAIA,EAAErG,SAAS4N,wBAC3BrC,aACE,kBAAC8B,GAAD,CAAsBjB,YAAaqB,IAErCjC,cAAeiC,EAAgBjiB,GAC/BwI,cAAe,CAAC,eAChBF,QAASgY,GACTqB,kBAAmBM,EAAgBjiB,KAErC,kBAAC8f,GAAD,CACElF,UAAW,SAAAC,GAAC,OAAIA,EAAErG,SAAS6N,oBAC3BtC,aAAc,kBAACG,GAAD,CAAqB7G,QAAS4I,IAC5CjC,cAAeiC,EAAgBjiB,GAC/BwI,cAAe,CAAC,WAChBF,QAASgY,GACT/X,aAAc,CAAEgY,eAAe,MA7BjB,QClBvB,SAAS+B,GAAT,GAMH,IALFC,EAKC,EALDA,YACA1gB,EAIC,EAJDA,MACAsM,EAGC,EAHDA,OACAgB,EAEC,EAFDA,SACGzO,EACF,6DAC6BxB,mBAASqjB,GADtC,mBACMC,EADN,KACeC,EADf,KAEKC,EAAgB,kBAAMD,GAAW,SAAAngB,GAAC,OAAKA,MAC7C,OACE,kBAAC8L,GAAA,EAAKC,MAAN,CAAYxO,UAAU,OAAOyO,KAAMH,GAAUI,MAC3C,kBAACH,GAAA,EAAKI,MAAN,CAAYC,SAAUN,GACpB,kBAACC,GAAA,EAAKuU,MAAN,CAAYC,QAAM,EAAC/T,KAAK,UACtB,kBAACT,GAAA,EAAKuU,MAAMjU,MAAZ,CAAkBmU,QAASL,EAAS1gB,SAAU4gB,IAC9C,kBAACtU,GAAA,EAAKuU,MAAMnU,MAAZ,CAAkBzN,QAAS2hB,GAAgB7gB,KAG9C2gB,GACC,kBAACtU,GAAYQ,MAAb,eACEoU,WAAS,EACT3T,SAAUA,EACVhB,OAAQA,GACJzN,KAed4hB,GAAoB7Y,aAAe,CACjC0E,OAAQ,G,uBCzCGyH,GAASmN,KAAUlN,OAEnBmN,GAAUD,KAAUE,MAAM,CACrCjjB,GAAI+iB,KAAUhc,OAAOmc,WACrB9hB,KAAM2hB,KAAUhc,OAAOmc,aAYZC,IATUJ,KAAUE,MAAM,CACrCjjB,GAAI+iB,KAAUhc,OAAOmc,WACrB7b,MAAO0b,KAAUhc,OAAOmc,WACxBtH,KAAMmH,KAAUhc,OAChBqc,aAAcxN,GAAOsN,WACrB1W,SAAUuW,KAAUhc,OACpBsS,QAAS2J,KAGaD,KAAUE,MAAM,CACtCjjB,GAAI+iB,KAAUhc,OAAOmc,WACrB9hB,KAAM2hB,KAAUhc,OAAOmc,cAGDH,KAAUE,MAAM,CACtCjjB,GAAI+iB,KAAUhc,OAAOmc,WACrB9hB,KAAM2hB,KAAUhc,OAAOmc,WACvBG,SAAUF,KChBL,SAASG,GAAT,GAA4C,IAAnB3L,EAAkB,EAAlBA,KAASjX,EAAS,wBACxC+T,EAAc/N,KAAd+N,UACFtF,EAAWgJ,GAAY,CAC3B/W,KAAM,CAAE6V,MAAOU,EAAKvW,MACpBmiB,MAAO,CAAEtM,MAAOrB,GAAOiE,OAAOlC,EAAK4L,OAAO,GAAQhM,SAAU3B,GAAOlC,SAErE,OACE,kBAACzE,GAAD,eAAaE,SAAUA,GAAczO,GACnC,kBAACwN,GAAD,CACErM,MAAO4S,EAAU6D,MAAMC,OAAOnX,KAC9B+M,OAAQ,EACRqC,SAAS,kCACT6L,UAAQ,EACRlN,SAAUA,EAAS/N,OAErB,kBAACkhB,GAAD,CACEC,cAAe5K,EAAK4L,MACpBpV,OAAQ,EACRtM,MAAO4S,EAAU6D,MAAMC,OAAOgL,MAC9B/S,SAAS,mCACT3B,KAAK,SACLwN,UAAQ,EACRlN,SAAUA,EAASoU,MACnBxC,KAAK,UCzBN,SAASyC,GAAT,GAA+C,IAAfzZ,EAAc,EAAdA,WAAc,ErE6B9C,WAA8B,IAC3BhH,EAAmBC,KAAnBD,eAD0B,EAEN0V,YAAY7V,EAAiB,CACvD8V,OAAQ,SAACC,EAAD,GAA0C,IAAxB8K,EAAuB,EAA/Bne,KAAQme,eAChBhP,EAAckE,EAAME,UAAU,CACpCtD,MAAO5S,EACPO,UAAW,CAAEC,SAAUJ,EAAe/C,MAFhCyU,UAIRkE,EAAMG,WAAW,CACfvD,MAAO5S,EACPO,UAAW,CAAEC,SAAUJ,EAAe/C,IACtCsF,KAAM,CACJmP,UAAWA,EAAUsE,OAAO,CAAC0K,UAZH,iBAE3BzK,EAF2B,KAEdC,EAFc,WAoBlC,MAAM,CAHU,SAAAnJ,GACdkJ,EAAS,CAAE9V,UAAW,CAAEC,SAAUJ,EAAe/C,GAAI8P,aAEvD,mBAAoBmJ,IqEhDKyK,GAAlBD,EAD4C,oBAE3ChP,EAAc/N,KAAd+N,UACR,OACE,kBAAC/K,GAAD,CACEK,WAAYA,EACZH,OAAQ,SAAAlJ,GAAK,OAAI,kBAAC6V,GAAiB7V,IACnCoJ,aAAc,SAAApJ,GAAK,OACjB,kBAAC4iB,GAAD,eACEjc,MAAOoN,EAAU6D,MAAMa,YACvBxB,KAAM,CAAEvW,KAAM,GAAImiB,MAAO,MACzBrU,OAAQuU,GACJ/iB,OCZP,SAASijB,GAAT,GAA6C,IAAbN,EAAY,EAAZA,SAAY,EtEoD5C,WAA8B,IAC3BtgB,EAAmBC,KAAnBD,eAD0B,EAEN0V,YAAY5V,GAFN,iBAE3BmW,EAF2B,KAEdC,EAFc,WAMlC,MAAM,CAHU,SAACjZ,EAAI8P,GACnBkJ,EAAS,CAAE9V,UAAW,CAAEC,SAAUJ,EAAe/C,GAAIA,KAAI8P,aAE3D,mBAAoBmJ,IsEzDK2K,GAAlBC,EAD0C,oBAEzCpP,EAAc/N,KAAd+N,UAEFvF,EAAS,SAAAY,GACb+T,EAAeR,EAASrjB,GAAI8P,IAE9B,OACE,kBAACpG,GAAD,CACEE,OAAQ,SAAAlJ,GAAK,OACX,kBAACiL,GAAD,eAAerB,KAAMD,GAAKK,KAAMtE,QAAS6E,GAAQE,SAAazK,KAEhEoJ,aAAc,SAAApJ,GAAK,OACjB,kBAAC4iB,GAAD,eACEjc,MAAOoN,EAAU6D,MAAMkB,UACvB7B,KAAM0L,EACNnU,OAAQA,GACJxO,OChBd,IAAMkH,GAAU,CACd,CAAEG,UAAW,OAAQ0R,MAAM,GAC3B,CACE1R,UAAW,QACX6R,UAAWhE,GAAOiE,OAClBH,MAAO,QACPC,YAAa,SAEf,CACE5R,UAAW,UACX6R,UAAWhE,GAAOiE,OAClBH,MAAO,QACPC,YAAa,SAEf,CACE5R,UAAW,YACX2R,MAAO,QACPC,YAAa,QACbC,UAAW,SAACG,EAAM7Q,GAAP,OACK,OAAdA,EAAIqa,OAAkBra,EAAIqa,MAAQra,EAAI4a,QAClClO,GAAOiE,OAAO3Q,EAAI4a,QAAU5a,EAAIqa,OAChC,KAER,CACExb,UAAW,UACX+R,eAAe,EACfF,UAAW,SAACG,EAAM7Q,GAAP,OACT,8BACE,kBAACya,GAAD,CAAsBN,SAAUna,IAChC,kBAACyC,GAAD,CAAerB,KAAMD,GAAKG,QAASpE,QAAS6E,GAAQC,cAGxD7K,MAAO,CACL2Z,WAAY,SACZC,MAAO,QAKPC,GAAgB,CACpB,CACEnS,UAAW,OACXoS,MAAO,QAIJ,SAAS4J,GAAT,GAA+C,IAAjBC,EAAgB,EAAhBA,aAC7BzO,EAAQzS,IACd,OACE,kBAAC2S,GAAD,CACEF,MAAOA,EACP3G,QAAS,kBAAC4U,GAAD,CAAsBS,QAASD,IACxCtO,QAAS,SAAApQ,GAAI,OAAIA,EAAKmP,WACtB7M,QAASA,GACT+S,SAAS,KACTC,UAAW,SAAAC,GAAC,OAAIA,EAAEpG,UAAUqG,MAAMzT,OAClC0T,gBAAiB,SAAAF,GAAC,OAAIA,EAAEpG,UAAUqG,MAAMlT,SACxCsS,cAAeA,KCvDd,SAASgK,GAAT,GAA4C,IAAnBvM,EAAkB,EAAlBA,KAASjX,EAAS,wBAC1C6U,EAAQzS,IACN2b,EAAe/X,KAAf+X,WACFtP,EAAWgJ,GAAY,CAC3B/W,KAAM,CAAE6V,MAAOU,EAAKvW,MACpB+iB,WAAY,CACVlN,MAAOU,EAAK0L,SAASrjB,IAEvBokB,YAAa,CAAEnN,MAAOU,EAAKyM,eAE7B,OACE,kBAACnV,GAAD,eAAaE,SAAUA,GAAczO,GACnC,kBAAC4U,GAAD,CAAWC,MAAOA,IACf,gBAAGjQ,EAAH,EAAGA,KAAH,OACC,oCACE,kBAAC4I,GAAD,CACErM,MAAO4c,EAAWnG,MAAMC,OAAOnX,KAC/B+M,OAAQ,EACRgB,SAAUA,EAAS/N,KACnBoP,SAAS,iBAEX,kBAACuN,GAAD,CACE5X,KAAM,EACNtE,MAAO4c,EAAWnG,MAAMC,OAAO8K,UAE/B,kBAAC,GAAD,CACEthB,cAAeuD,EAAKmP,UAAUpS,KAAI,kBAAmB,CACnDrC,GADgC,EAAGA,GAEnC6B,MAFgC,EAAOT,SAIzC2K,KAAMoD,EAASgV,WACftT,aAAc1B,EAASgV,WAAWrT,aAGtC,kBAAC5C,GAAD,CACErM,MAAO4c,EAAWnG,MAAMC,OAAO6L,YAC/BjW,OAAQ,EACRgB,SAAUA,EAASiV,YACnB5T,SAAS,6BCzChB,SAAS6T,GAAT,GAA+C,IAAfta,EAAc,EAAdA,WAAc,ErBsC9C,WAA8B,IAC3BhH,EAAmBC,KAAnBD,eAD0B,EAEN0V,YAAYwF,GAAiB,CACvDvF,OAAQ,SAACC,EAAD,GAA0C,IAAxB2L,EAAuB,EAA/Bhf,KAAQgf,eAChB7F,EAAe9F,EAAME,UAAU,CACrCtD,MAAOyI,GACP9a,UAAW,CAAEC,SAAUJ,EAAe/C,MAFhCye,WAIR9F,EAAMG,WAAW,CACfvD,MAAOyI,GACP9a,UAAW,CAAEC,SAAUJ,EAAe/C,IACtCsF,KAAM,CACJmZ,WAAYA,EAAW1F,OAAO,CAACuL,UAZL,iBAE3BtL,EAF2B,KAEdC,EAFc,WAoBlC,MAAM,CAHU,SAAAnJ,GACdkJ,EAAS,CAAE9V,UAAW,CAAEC,SAAUJ,EAAe/C,GAAI8P,aAEvD,mBAAoBmJ,IqBzDKsL,GAAlBD,EAD4C,oBAE3C7F,EAAe/X,KAAf+X,WACR,OACE,kBAAC/U,GAAD,CACEK,WAAYA,EACZH,OAAQ,SAAAlJ,GAAK,OAAI,kBAAC6V,GAAiB7V,IACnCoJ,aAAc,SAAApJ,GAAK,OACjB,kBAACwjB,GAAD,eACE7c,MAAOoX,EAAWnG,MAAMa,YACxBxB,KAAM,CAAEvW,KAAM,GAAIiiB,SAAU,CAAErjB,GAAI,MAAQokB,YAAa,IACvDlV,OAAQoV,GACJ5jB,OCZP,SAAS8jB,GAAT,GAA6C,IAAb9F,EAAY,EAAZA,SAAY,EtB6D5C,WAA8B,IAC3B3b,EAAmBC,KAAnBD,eAD0B,EAEN0V,YAAYyF,IAFN,iBAE3BlF,EAF2B,KAEdC,EAFc,WAMlC,MAAM,CAHU,SAACjZ,EAAI8P,GACnBkJ,EAAS,CAAE9V,UAAW,CAAEC,SAAUJ,EAAe/C,GAAIA,KAAI8P,aAE3D,mBAAoBmJ,IsBlEKwL,GAAlBZ,EAD0C,oBAEzCpF,EAAe/X,KAAf+X,WACFvP,EAAS,SAAAY,GACb+T,EAAenF,EAAS1e,GAAI8P,IAE9B,OACE,kBAACpG,GAAD,CACEE,OAAQ,SAAAlJ,GAAK,OACX,kBAACiL,GAAD,eAAerB,KAAMD,GAAKK,KAAMtE,QAAS6E,GAAQE,SAAazK,KAEhEoJ,aAAc,SAAApJ,GAAK,OACjB,kBAACwjB,GAAD,eACE7c,MAAOoX,EAAWnG,MAAMkB,UACxB7B,KAAM+G,EACNxP,OAAQA,GACJxO,OChBd,IAAMkH,GAAU,CACd,CAAEG,UAAW,OAAQ0R,MAAM,GAC3B,CACE1R,UAAW,WACX6R,UAAW,SAAAvH,GAAC,OAAIA,EAAEjR,MAClBqY,MAAM,GAER,CAAE1R,UAAW,eACb,CACEA,UAAW,UACX+R,eAAe,EACfF,UAAW,SAACG,EAAM7Q,GAAP,OACT,8BACE,kBAACsb,GAAD,CAAsB9F,SAAUxV,IAChC,kBAACyC,GAAD,CAAerB,KAAMD,GAAKG,QAASpE,QAAS6E,GAAQC,cAGxD7K,MAAO,CACL2Z,WAAY,SACZC,MAAO,QAKPC,GAAgB,CACpB,CACEnS,UAAW,OACXoS,MAAO,QAIJ,SAASuK,GAAT,GAAgD,IAAjBV,EAAgB,EAAhBA,aAC9BzO,EAAQ4I,KACd,OACE,kBAAC1I,GAAD,CACEkF,SAAS,KACT/S,QAASA,GACTgH,QAAS,kBAACyV,GAAD,CAAsBJ,QAASD,IACxCzO,MAAOA,EACPG,QAAS,SAAApQ,GAAI,OAAIA,EAAKmZ,YACtB7D,UAAW,SAAAC,GAAC,OAAIA,EAAE4D,WAAW3D,MAAMzT,OACnC0T,gBAAiB,SAAAF,GAAC,OAAIA,EAAE4D,WAAW3D,MAAMlT,SACzCsS,cAAeA,K,aC5CfyK,GAAS,CACblB,eAAgB,IAChBa,eAAgB,KAGZM,GAAW,SAACC,EAAsBC,GAAvB,MAAiD,CAChErB,eAAgB,kBAAMoB,EAAqBrlB,WAC3C8kB,eAAgB,kBAAMQ,EAAqBtlB,aAG9B,SAASulB,KACtB,IAAMF,EAAuBtV,mBACvBuV,EAAuBvV,mBAC7B,OACE,kBAACnF,GAAD,KACE,kBAAC,iBAAD,CACEua,OAAQA,GACRC,SAAUA,GAASC,EAAsBC,KAE3C,kBAAC1a,GAAK3C,OAAN,CAAamT,UAAW,SAAAC,GAAC,OAAIA,EAAE5G,QAAQC,MAAMO,aAC7C,kBAACsP,GAAD,CAAoBC,aAAca,IAClC,kBAACH,GAAD,CAAqBV,aAAcc,KCtB1B,SAASE,KACtB,OACE,kBAAC5a,GAAD,KACE,kBAACA,GAAK3C,OAAN,CAAamT,UAAW,SAAAC,GAAC,OAAIA,EAAE5G,QAAQC,MAAMG,YAC7C,kBAACyL,GAAD,CACElF,UAAW,SAAAC,GAAC,OAAIA,EAAExG,SAASyG,MAAMzT,OACjC0Y,aAAc,kBAACG,GAAD,SCNf,SAAS+E,KACd,OACE,kBAAC7a,GAAD,KACE,kBAACA,GAAK3C,OAAN,CAAamT,UAAW,SAAAC,GAAC,OAAIA,EAAE5G,QAAQC,MAAMI,aAC7C,kBAACmN,GAAD,CACE7G,UAAW,SAAAC,GAAC,OAAIA,EAAEvG,UAAUwG,MAAMzT,OAClC0Y,aAAc,kBAAC8B,GAAD,SCYtB,IAAMja,GAAU,CACd,CAAEG,UAAW,QAAS0R,MAAM,GAC5B,CACE1R,UAAW,eACX0R,MAAM,EACNyL,UAAW,SAAAnL,GAAI,OAAIA,EAAK3Y,MACxBwY,UAAW,SAAAvH,GAAC,OAAIA,GAAKA,EAAEjR,OAEzB,CACE2G,UAAW,aACX0R,MAAM,EACNyL,UAAW,SAAAnL,GAAI,OAAIA,EAAK3Y,MACxBwY,UAAW,SAAAvH,GAAC,OAAIA,EAAEjR,OAEpB,CACE2G,UAAW,gBACX6R,UAAWhE,GAAOiE,OAClBH,MAAO,QACPC,YAAa,SAEf,CACE5R,UAAW,kBACX6R,UAAW,SAAAvH,GAAC,OACJ,OAANA,EAAa,uBAAGxS,UAAU,0BAA6B,OAE3D,CACEkI,UAAW,UACX+R,eAAe,EACfF,UAAW,SAACG,EAAM7Q,GAAP,OACT,8BACE,kBAACic,GAAD,CAAkBC,KAAMlc,IACxB,kBAACmc,GAAD,CAAkBD,KAAMlc,MAG5B7I,MAAO,CACL2Z,WAAY,SACZC,MAAO,QAKPC,GAAgB,CACpB,CACEnS,UAAW,QACXoS,MAAO,QAIX,SAASmL,GAAT,GAAwC,IAAnB3N,EAAkB,EAAlBA,KAASjX,EAAS,wBAC/B6U,EAAQzS,IACNyR,EAAU7N,KAAV6N,MACFpF,EAAWgJ,GAAY,CAC3B9Q,MAAO,CAAE4P,MAAOU,EAAKtQ,OACrBke,cAAe,CACbtO,MAAOrB,GAAOiE,OAAOlC,EAAK4N,eAAe,GACzChO,SAAU3B,GAAOlC,OAEnB8R,gBAAiB,CACfvO,MAAOrB,GAAOiE,OAAOlC,EAAK6N,iBAAiB,GAC3ChO,SAAU,SAAAiO,GAAE,OAAI7P,GAAOiE,OAAO4L,EAAGF,cAAcjmB,UAC/CiY,SAAU3B,GAAOlC,OAEnBgS,eAAgB,CACdzO,MAA6B,OAAtBU,EAAKgO,aAAwBhO,EAAKgO,aAAa3lB,GAAK,GAC3DuX,SAAU,SAAAjV,GAAC,MAAW,KAANA,EAAW,KAAOA,IAEpCsjB,aAAc,CAAE3O,MAAOU,EAAKkO,WAAW7lB,MAEzC,OACE,kBAACiP,GAAD,eAAaE,SAAUA,GAAczO,GACnC,kBAAC4U,GAAD,CAAWC,MAAOA,IACf,gBAAGjQ,EAAH,EAAGA,KAAH,OACC,oCACE,kBAAC4I,GAAD,CACEmO,UAAQ,EACRxa,MAAO0S,EAAM+D,MAAMC,OAAOlR,MAC1B8G,OAAQ,GACRgB,SAAUA,EAAS9H,MACnBmJ,SAAS,kBAEX,kBAACtC,GAAD,CAAaC,OAAQ,EAAGtM,MAAO0S,EAAM+D,MAAMC,OAAOrC,QAChD,kBAACkI,GAAD,CAAajP,SAAUA,EAASoW,iBAElC,kBAACjD,GAAD,CACEC,YAAsC,OAAzB5K,EAAK6N,gBAClBrX,OAAQ,EACRtM,MAAO0S,EAAM+D,MAAMC,OAAOuN,UAC1BtV,SAAS,qCACT3B,KAAK,SACLwN,UAAQ,EACRlN,SAAUA,EAASqW,gBACnBzE,KAAK,SAEP,kBAAChD,GAAD,CAAmB5X,KAAM,EAAGtE,MAAO0S,EAAM+D,MAAMC,OAAOoN,cACpD,kBAAC,GAAD,CACE5Z,KAAMoD,EAASuW,eACf7U,aAAc1B,EAASuW,eAAe5U,UACtC/O,cAAeuD,EAAKmP,UAAUpS,KAAI,kBAAmB,CACnDrC,GADgC,EAAGA,GAEnC6B,MAFgC,EAAOT,YAM7C,kBAAC2c,GAAD,CAAmB5X,KAAM,EAAGtE,MAAO0S,EAAM+D,MAAMC,OAAOsN,YACpD,kBAAC,GAAD,CACE9Z,KAAMoD,EAASyW,aACf/U,aAAc1B,EAASyW,aAAa9U,UACpC/O,cAAeuD,EAAKmP,UAAUpS,KAAI,kBAAmB,CACnDrC,GADgC,EAAGA,GAEnC6B,MAFgC,EAAOT,iBAazD,SAAS+jB,GAAT,GAAqC,IAATC,EAAQ,EAARA,KAAQ,E7E7C7B,WAA0B,IACvBriB,EAAmBC,KAAnBD,eADsB,EAEF0V,YAAY1U,EAAa,CACnDoX,eAAgB,iBAAM,CACpB,CAAE5F,MAAO5S,EAAeO,UAAW,CAAEC,SAAUJ,EAAe/C,KAC9D,CACEuV,MAAO7S,EACPQ,UAAW,CAAEC,SAAUJ,EAAe/C,SAPd,iBAEvBgZ,EAFuB,KAEVC,EAFU,WAc9B,MAAM,CAHU,SAACjZ,EAAI8P,GACnBkJ,EAAS,CAAE9V,UAAW,CAAEC,SAAUJ,EAAe/C,GAAIA,KAAI8P,aAE3D,mBAAoBmJ,I6EgCC8M,GAAdC,EAD2B,oBAE1BzR,EAAU7N,KAAV6N,MAER,OACE,kBAAC7K,GAAD,CACEE,OAAQ,SAAAlJ,GAAK,OACX,kBAACiL,GAAD,eAAerB,KAAMD,GAAKK,KAAMtE,QAAS6E,GAAQE,SAAazK,KAEhEoJ,aAAc,SAAApJ,GAAK,OACjB,kBAAC4kB,GAAD,eACE3N,KAAMyN,EACN/d,MAAOkN,EAAM+D,MAAMkB,UACnBtK,OAAQ,SAAAY,GAAK,OAAIkW,EAAWZ,EAAKplB,GAAI8P,KACjCpP,OAOd,SAAS2kB,GAAT,GAAqC,IAATD,EAAQ,EAARA,KAAQ,E7EzC7B,WAA0B,IACvBriB,EAAmBC,KAAnBD,eADsB,EAEF0V,YAAYzU,EAAa,CACnD0U,OAAQ,SAACC,EAAD,GAAsC,IAApBsN,EAAmB,EAA3B3gB,KAAQ2gB,WAChB1V,EAAWoI,EAAME,UAAU,CACjCtD,MAAO1R,EACPX,UAAW,CAAEC,SAAUJ,EAAe/C,MAFhCuQ,OAIRoI,EAAMG,WAAW,CACfvD,MAAO1R,EACPX,UAAW,CAAEC,SAAUJ,EAAe/C,IACtCsF,KAAM,CACJiL,OAAO,EAAD,GACDA,EADC,CAEJ6D,aAAa,EAAD,GACP7D,EAAO6D,aADA,CAEVG,MAAOnR,EACLmN,EAAO6D,aAAaG,MACpB0R,EAAWjmB,YAOvBmb,eAAgB,iBAAM,CACpB,CAAE5F,MAAO5S,EAAeO,UAAW,CAAEC,SAAUJ,EAAe/C,KAC9D,CACEuV,MAAO7S,EACPQ,UAAW,CAAEC,SAAUJ,EAAe/C,SA7Bd,iBAEvBgZ,EAFuB,KAEVC,EAFU,WAoC9B,MAAM,CAHU,SAAAjZ,GACdgZ,EAAS,CAAE9V,UAAW,CAAEC,SAAUJ,EAAe/C,GAAIA,UAEvD,mBAAoBiZ,I6EMCiN,GAAdD,EAD2B,oBAElC,OACE,kBAACta,GAAD,CACErB,KAAMD,GAAKI,MACXrE,QAAS6E,GAAQC,UACjBnK,QAAS,kBAAMklB,EAAWb,EAAKplB,OAKrC,SAASmmB,KAAoB,IAAD,E7E1HrB,WAA0B,IACvBpjB,EAAmBC,KAAnBD,eADsB,EAEF0V,YAAY3U,EAAa,CACnD4U,OAAQ,SAACC,EAAD,GAAsC,IAApByN,EAAmB,EAA3B9gB,KAAQ8gB,WAChB7V,EAAWoI,EAAME,UAAU,CACjCtD,MAAO1R,EACPX,UAAW,CAAEC,SAAUJ,EAAe/C,MAFhCuQ,OAIRoI,EAAMG,WAAW,CACfvD,MAAO1R,EACPX,UAAW,CAAEC,SAAUJ,EAAe/C,IACtCsF,KAAM,CACJiL,OAAO,EAAD,GACDA,EADC,CAEJ6D,aAAa,EAAD,GACP7D,EAAO6D,aADA,CAEVG,MAAOhE,EAAO6D,aAAaG,MAAMwE,OAAO,CAACqN,YAMnDjL,eAAgB,iBAAM,CACpB,CAAE5F,MAAO5S,EAAeO,UAAW,CAAEC,SAAUJ,EAAe/C,KAC9D,CACEuV,MAAO7S,EACPQ,UAAW,CAAEC,SAAUJ,EAAe/C,SA1Bd,iBAEvBgZ,EAFuB,KAEVC,EAFU,WAiC9B,MAAM,CAHU,SAAAnJ,GACdkJ,EAAS,CAAE9V,UAAW,CAAEC,SAAUJ,EAAe/C,GAAI8P,aAEvD,mBAAoBmJ,I6E0FCoN,GAAdD,EADmB,oBAElB7R,EAAU7N,KAAV6N,MAER,OACE,kBAAC7K,GAAD,CACEE,OAAQ,SAAAlJ,GAAK,OAAI,kBAAC6V,GAAiB7V,IACnCoJ,aAAc,SAAApJ,GAAK,OACjB,kBAAC4kB,GAAD,eACE3N,KAAM,CACJtQ,MAAO,KACPse,aAAc,CAAE3lB,GAAI,MACpB6lB,WAAY,CAAE7lB,GAAI,MAClBulB,cAAe,KACfC,gBAAiB,KACjB5J,KAAM,MAERvU,MAAOkN,EAAM+D,MAAMa,YACnBjK,OAAQkX,GACJ1lB,OAOC,SAAS4lB,KACtB,IAAM/Q,E7ErKD,WAA+B,IAC5BxS,EAAmBC,KAAnBD,eACR,OAAOE,YAASY,EAAmB,CACjCX,UAAW,CAAEC,SAAUJ,EAAe/C,M6EkK1BumB,GAEd,OACE,kBAACnc,GAAD,KACE,kBAACA,GAAK3C,OAAN,CAAamT,UAAW,SAAAC,GAAC,OAAIA,EAAE5G,QAAQC,MAAMK,SAC7C,kBAACkB,GAAD,CACEF,MAAOA,EACPG,QAAS,SAAApQ,GAAI,OAAIA,EAAKiL,OAAO6D,aAAaG,OAC1C3F,QAAS,kBAACuX,GAAD,MACTve,QAASA,GACT+S,SAAS,KACTC,UAAW,SAAAC,GAAC,OAAIA,EAAEtG,MAAMuG,MAAMzT,OAC9B0T,gBAAiB,SAAAF,GAAC,OAAIA,EAAEtG,MAAMuG,MAAMlT,SACpCsS,cAAeA,MCrNhB,SAASsM,GAAT,GAA8D,IAA7C3mB,EAA4C,EAA5CA,UAAWuG,EAAiC,EAAjCA,QAASiB,EAAwB,EAAxBA,MAAO/H,EAAiB,EAAjBA,MAAOS,EAAU,EAAVA,OACxD,OACE,yBAAKF,UAAWA,GACd,yBAAKA,UAAS,2BAAsBuG,EAAtB,uBACZ,yBAAKvG,UAAU,aACb,yBAAKA,UAAU,qCACb,yBAAKA,UAAU,YACb,yBACEA,UAAS,wCAAmCuG,EAAnC,yBAERiB,GAEH,yBAAKxH,UAAU,0CACZP,IAGL,yBAAKO,UAAU,YACb,uBAAGA,UAAS,iBAAYE,EAAZ,+BCN1B,SAAS0mB,GAAT,GAAuC,IAArB5mB,EAAoB,EAApBA,UAAW0b,EAAS,EAATA,MACnBpH,EAAczN,KAAdyN,UACR,OACE,yBAAKtU,UAAWA,GACd,kBAAC0O,GAAA,EAAD,KACE,kBAACiY,GAAD,CACE3mB,UAAU,uBACVuG,QAAQ,UACRiB,MAAO8M,EAAUuS,QACjBpnB,MAAOsW,GAAOiE,OAAO0B,EAAMoL,oBAC3B5mB,OAAO,mBAET,kBAACymB,GAAD,CACE3mB,UAAU,uBACVuG,QAAQ,UACRiB,MAAO8M,EAAUyS,QACjBtnB,MAAOsW,GAAOiE,OAAO0B,EAAMsL,mBAC3B9mB,OAAO,cAET,kBAACymB,GAAD,CACE3mB,UAAU,uBACVuG,QAAQ,UACRiB,MAAO8M,EAAU2S,WACjBxnB,MAAOsW,GAAOiE,OACZ0B,EAAMsL,kBAAoBtL,EAAMoL,oBAElC5mB,OAAO,kBAET,kBAACymB,GAAD,CACE3mB,UAAU,uBACVuG,QAAQ,UACRiB,MAAO8M,EAAUE,SACjB/U,MAAOsW,GAAOiE,OAAO0B,EAAMwL,oBAC3BhnB,OAAO,cAOjB,IAAMinB,GAAe,CACnBC,MAAO,qBACPC,QAAS,uBACTC,KAAM,eAGFC,GAAkB,CACtBH,MAAO,SACPC,QAAS,UACTC,KAAM,WAGR,SAASE,GAAT,GAAsC,IAAZC,EAAW,EAAXA,QAClBC,EAAiBzkB,IACjBgc,EAAgB5a,KACdiQ,EAAczN,KAAdyN,UAER,OACE,kBAACmB,GAAD,CAAWC,MAAOgS,IACf,gBAASC,EAAT,EAAGliB,KAAH,OACC,kBAACgQ,GAAD,CAAWC,MAAOuJ,IACf,gBAASM,EAAT,EAAG9Z,KAAH,MACwB,eAAvBgiB,EAAQG,WACJH,EAAQI,YACNvT,EAAUwT,SAASD,YACnBvT,EAAUwT,SAASC,aACE,8BAAvBN,EAAQG,WACRtT,EAAUwT,SAASE,oBACjBL,EAAc/S,UAAU3O,MAAK,SAAArC,GAAC,OAAIA,EAAEzD,KAAOsnB,EAAQtnB,MAAIoB,MAElC,sBAAvBkmB,EAAQG,WACRtT,EAAUwT,SAASG,kBACjBN,EAAc/S,UAAU3O,MAAK,SAAArC,GAAC,OAAIA,EAAEzD,KAAOsnB,EAAQtnB,MAAIoB,MAElC,6BAAvBkmB,EAAQG,WACRtT,EAAUwT,SAASI,uBACjB3I,EAAa5K,SAAS1O,MAAK,SAAAuM,GAAC,OAAIA,EAAErS,KAAOsnB,EAAQtnB,MAAIoB,MAEhC,yBAAvBkmB,EAAQG,WACRtT,EAAUwT,SAASK,cACnBV,EAAQG,iBAQxB,SAASQ,GAAT,GAA+B,IAAZX,EAAW,EAAXA,QACjB,OACE,wBAAIznB,UAAS,+BAA0BunB,GAAgBE,EAAQY,YAC7D,uBAAGroB,UAAS,uBAAkBmnB,GAAaM,EAAQY,UAAvC,WACZ,kBAACb,GAAD,CAAgBC,QAASA,KAK/B,SAASa,KAAc,IACbhU,EAAczN,KAAdyN,UACR,OACE,wBAAItU,UAAU,gCACZ,uBAAGA,UAAU,mCACZsU,EAAUiU,YAKjB,SAASC,GAAT,GAAiD,IAAxBxoB,EAAuB,EAAvBA,UAAW8nB,EAAY,EAAZA,SAClC,OACE,kBAACrgB,GAAD,CAAOzH,UAAWA,GAChB,kBAACyH,GAAMG,OAAP,KACE,yBAAK5H,UAAU,qDACb,kBAACyH,GAAMC,MAAP,CAAaqT,UAAW,SAAAC,GAAC,OAAIA,EAAE1G,UAAUwT,SAAStgB,WAGtD,kBAACC,GAAMI,KAAP,KACE,wBAAI7H,UAAU,+BACX8nB,EAAShkB,OAAS,EACjBgkB,EAAStlB,KAAI,SAACilB,EAAS/jB,GAAV,OACX,kBAAC0kB,GAAD,CAAS1lB,IAAKgB,EAAK+jB,QAASA,OAG9B,kBAACa,GAAD,SAQZ,SAASG,GAAT,GAAmD,IAAnBxc,EAAkB,EAAlBA,SAAUyc,EAAQ,EAARA,KAAQ,E3EzE3C,WAAiC,IAC9BxlB,EAAmBC,KAAnBD,eAD6B,EAET0V,YAAYxS,GAAqB,CAC3DkV,eAAgB,iBAAM,CACpB,CACE5F,MAAO7S,EACPQ,UAAW,CAAEC,SAAUJ,EAAe/C,KAExC,CACEuV,MAAO1R,EACPX,UAAW,CAAEC,SAAUJ,EAAe/C,KAExC,CACEuV,MAAOjR,GACPpB,UAAW,CAAEC,SAAUJ,EAAe/C,KAExC,CACEuV,MAAO5Q,GACPzB,UAAW,CAAEC,SAAUJ,EAAe/C,SAlBP,iBAE9BgZ,EAF8B,KAEjBC,EAFiB,WAyBrC,MAAM,CAHU,SAAAnJ,GACdkJ,EAAS,CAAE9V,UAAW,CAAEC,SAAUJ,EAAe/C,GAAI8P,aAEvD,mBAAoBmJ,I2EiDQuP,GAArBC,EADyC,oBAExCtU,EAAczN,KAAdyN,UACR,OACE,kBAACtI,GAAD,CACEvB,KAAMD,GAAKS,eACX1E,QACE0F,EAAWb,GAAQC,UAAYqd,EAAOtd,GAAQK,QAAUL,GAAQI,QAElES,SAAUA,EACV/K,QAAS,kBAAM0nB,MAEdtU,EAAUvF,QAAQ8Z,YAKzB,SAASC,GAAT,GAA6C,IAArB9oB,EAAoB,EAApBA,UAAW0b,EAAS,EAATA,MAAS,EACZ7U,KAAtByN,EADkC,EAClCA,UAAWyU,EADuB,EACvBA,OACbC,EAAS3M,GAAMxI,MAAM6H,EAAMA,OAEjC,OACE,kBAACjU,GAAD,CAAOzH,UAAWA,GAChB,kBAACyH,GAAMG,OAAP,KACE,yBAAK5H,UAAU,qDACb,kBAACyH,GAAMC,MAAP,CACEF,MACE,8BACG8M,EAAUC,aADb,IAC4B,IAC1B,gCACE,4BACGwU,EAAOC,EAAOtN,MAAQ,GADzB,IAC8BsN,EAAOvN,UAM7C,6BACE,kBAACgN,GAAD,CACExc,SAAUyP,EAAMoM,SAAS7e,MAAK,SAAAsK,GAAC,MAAmB,UAAfA,EAAE8U,YACrCK,KAAMhN,EAAMoM,SAAShkB,OAAS,QASrC,SAASmlB,KACd,IAAMvT,ElF1JD,WAAuC,IACpCxS,EAAmBC,KAAnBD,eACR,OAAOE,YAASP,EAA4B,CAC1CQ,UAAW,CAAEC,SAAUJ,EAAe/C,IACtC+oB,YAAa,iBkFsJDC,GACd,OACE,kBAAC5e,GAAD,KACE,kBAACkL,GAAD,CAAWC,MAAOA,IACf,gBAAGjQ,EAAH,EAAGA,KAAH,OACC,kBAACiJ,GAAA,EAAD,KACE,kBAACoa,GAAD,CACE9oB,UAAU,wBACV0b,MAAOjW,EAAKiL,OAAO6D,eAErB,kBAACqS,GAAD,CACE5mB,UAAU,kBACV0b,MAAOjW,EAAKiL,OAAO6D,eAErB,kBAACiU,GAAD,CACExoB,UAAU,wBACV8nB,SAAUriB,EAAKiL,OAAO6D,aAAauT,WAErC,kBAACpZ,GAAA,EAAD,CAAK1O,UAAU,kCACb,kBAAC8oB,GAAD,CACE9oB,UAAU,oBACV0b,MAAOjW,EAAKiL,OAAO6D,eAErB,kBAACiU,GAAD,CACExoB,UAAU,gCACV8nB,SAAUriB,EAAKiL,OAAO6D,aAAauT,iBC1NpC,QACb/Y,QAAS,CACPqa,OAAQ,QACRja,OAAQ,SACRF,KAAM,UAERmF,QAAS,CACP3H,SAAU,CACR8H,aAAc,iCACd7D,OAAQ,eAEV2D,MAAO,CACLC,UAAW,eACXE,SAAU,UACVC,UAAW,WACXC,MAAO,QACPC,SAAU,QACVC,UAAW,YAGf1G,OAAQ,CACNuC,YAAa,cACbwD,YAAa,gBACbC,cAAe,mBAEjBI,UAAW,CACTuS,QAAS,cACTE,QAAS,cACTE,WAAY,iCACZzS,SAAU,UACVD,aAAc,iCACdgU,WAAY,2BACZT,SAAU,CACRtgB,MAAO,WACPqgB,YAAa,wEACbE,aAAc,4DACdC,oBAAqB,SAAAxE,GAAQ,+EAC6BA,EAD7B,MAE7ByE,kBAAmB,SAAAzE,GAAQ,mCACHA,EADG,+BAE3B0E,uBAAwB,SAAA1O,GAAO,kCACRA,EADQ,kBAE/B2O,cAAe,wDAEjBpZ,QAAS,CACP8Z,WAAY,yBAGhBlU,SAAU,CACRsG,MAAO,CACLzT,MAAO,QACPO,QAAS,CACPkc,QAAS,SACT1iB,KAAM,UAGVihB,mBAAoB,UACpBF,sBAAuB,6BACvBC,uBAAwB,2BACxB9J,MAAO,CACLa,YAAa,mBACbK,UAAW,eACXjB,OAAQ,CACNnX,KAAM,WAIZqT,UAAW,CACTqG,MAAO,CACLzT,MAAO,UACPO,QAAS,CACPkc,QAAS,SACT1iB,KAAM,QACNmiB,MAAO,QACP2F,UAAW,gBAGf5Q,MAAO,CACLa,YAAa,+BACbK,UAAW,sBACXjB,OAAQ,CACNnX,KAAM,QACNmiB,MAAO,WAIb9E,WAAY,CACV3D,MAAO,CACLzT,MAAO,YACPO,QAAS,CACPxG,KAAM,QACNiiB,SAAU,UACVe,YAAa,SAGjB9L,MAAO,CACLa,YAAa,iCACbK,UAAW,wBACXjB,OAAQ,CACNnX,KAAM,QACNiiB,SAAU,UACVe,YAAa,UAInB7P,MAAO,CACLuG,MAAO,CACLzT,MAAO,QACPO,QAAS,CACPP,MAAO,aACPse,aAAc,IACdE,WAAY,KACZN,cAAe,UAGnBjN,MAAO,CACLa,YAAa,kBACbK,UAAW,cACXjB,OAAQ,CACNlR,MAAO,aACPse,aAAc,IACdE,WAAY,KACZ3P,OAAQ,QACR4P,UAAW,gBAIjBxR,UAAW,CACTwG,MAAO,CACLzT,MAAO,WACPO,QAAS,CACPP,MAAO,aACPuZ,YAAa,IACbD,UAAW,KACXzK,OAAQ,QACR0F,KAAM,SAGVtD,MAAO,CACLa,YAAa,qBACbK,UAAW,iBACXjB,OAAQ,CACNlR,MAAO,aACPuZ,YAAa,IACbD,UAAW,KACXzK,OAAQ,QACR0F,KAAM,UAIZvH,SAAU,CACRyG,MAAO,CACLzT,MAAO,UACPO,QAAS,CACPP,MAAO,aACP8hB,YAAa,QACbvN,KAAM,OACNvC,QAAS,UAGbf,MAAO,CACLa,YAAa,qBACbK,UAAW,iBACXjB,OAAQ,CACNlR,MAAO,aACPuZ,YAAa,IACbD,UAAW,KACXtH,QAAS,QACTuC,KAAM,OACN6C,WAAY,YACZvI,OAAQ,QACRwI,SAAU,eAIhBkK,OAAQ,CACN,eACA,OACA,SACA,gBACA,MACA,WACA,SACA,gBACA,gBACA,mBACA,WACA,kBC5KEpiB,GAAe,CACnB4iB,OCJkBC,QACW,cAA7BpY,OAAOzE,SAAS8c,UAEe,UAA7BrY,OAAOzE,SAAS8c,UAEhBrY,OAAOzE,SAAS8c,SAASC,MACvB,2D,2qBCJN,IAAMC,GAAkB,IAAIC,KAA6B,CACvDC,kCAWK,SAASC,GAAa7X,GAC3B,IAAM8X,EAAgBnS,6CAEhBoS,EAAWC,aAAe,CAAEC,IAAKH,IACjCI,EAAWC,cAAW,SAACC,EAAD,GAG1B,MAAO,CACLC,QAAQ,MAJoC,EAAdA,QAIvB,CAELC,cAAetY,EAAK,iBAAaA,GAAU,SAI3C6G,EAAQ,IAAI0R,KAAc,CAAEb,qBAE5Bc,EAAYC,cAAQ,YAAsC,IAAnCrV,EAAkC,EAAlCA,cAAeH,EAAmB,EAAnBA,aACR,eAA9B0C,uHAAY+S,gBACVtV,GACFA,EAAc7S,KAAI,gBAAGgT,EAAH,EAAGA,QAASoV,EAAZ,EAAYA,UAAWtV,EAAvB,EAAuBA,KAAvB,OAChBnP,QAAQ0kB,IAAR,oCAC+BrV,EAD/B,uBACqDoV,EADrD,mBACyEtV,OAKzEJ,GAAc/O,QAAQ0kB,IAAR,2BAAgC3V,QAKhD4V,EAAOX,EAASjR,OAAO8Q,GAE7B,OAAO,IAAIe,KAAa,CACtBb,IAAKH,EACLjR,QACAgS,KAAME,KAAWC,KAAK,CAACR,EAAWK,IAClCI,mBAAmB,IAIhB,SAASC,GAAT,GAA2C,IAAb/rB,EAAY,EAAZA,SAAY,EACgBqS,KAAvDK,EADuC,EACvCA,gBAAiBvM,EADsB,EACtBA,QAAS8N,EADa,EACbA,kBAAmBpB,EADN,EACMA,MAYrD,OAVAvM,qBAAU,WACJH,GAGCuM,GACHuB,EAAkB,MAGnB,CAACvB,EAAiBuB,EAAmB9N,IAEpCA,EACK,2CAGJuM,GAAoBG,EAKvB,kBAAC,KAAD,CAAgBmZ,OAAQtB,GAAa7X,IAAS7S,GAJvC,8B,aCrEX,IAAMuS,GAAqB,SAAAmB,GACzB1B,OAAOC,QAAQC,aACb,GACAC,SAAS/J,MACTsL,GAAYA,EAASuY,UACjBvY,EAASuY,UACTja,OAAOzE,SAASE,WAIlBye,GAAW,UAAMla,OAAOzE,SAAS4e,QAAtB,OAA+B3T,cAoC1C4T,GACa,SAFE5T,uHAAY6T,iCAjCC,SAAC,GAAD,IAAGrsB,EAAH,EAAGA,SAAH,OAChC,kBAAC,GAAD,CACEssB,OAAQ5d,GAAO4d,OACfC,UAAW7d,GAAO8d,SAClBC,aAAcP,GACd3Z,mBAAoBA,GACpBma,SAAUhe,GAAOge,SACjB/X,MAAM,OACNnC,SAAU0Z,IAEV,kBAACH,GAAD,KAAqB/rB,KAIQ,SAAC,GAAD,IAAGA,EAAH,EAAGA,SAAH,OAC/B,kBAACoS,GAAahS,SAAd,CACEC,MAAO,CACLqS,iBAAiB,EACjBvM,SAAS,EACT8N,kBAAmB,aACnBnU,KAAM,CACJqC,KAAM,eACNM,QAAS,gDACT+E,OAAQ,MAEV4M,eAAgB,kBAAMuY,QAAQC,QAAQ,CAAC,UACvC7sB,OAAQ,eAGV,kBAAC,KAAD,CAAgBisB,OAAQtB,MAAiB1qB,KAU7C6sB,IAASC,OACP,kBAACV,GAAD,KACE,mBClEG,YAA6B,IAAbpsB,EAAY,EAAZA,SACboU,EAAmB/B,KAAnB+B,eADyB,EAEPnU,qBAFO,mBAE1B0U,EAF0B,KAEnBoY,EAFmB,KAQjC,OAJAzmB,qBAAU,WACR8N,IAAiB4Y,KAAKD,KACrB,CAACA,EAAU3Y,IAETO,EAIcA,EAAM9K,MAAK,SAAAxG,GAAC,MAAU,SAANA,KAG1BrD,EAEF,4EARE,gCDyDP,KACE,kBAAC,KAAD,CAAeitB,SAAUzU,cACvB,mBHpDO,WAAgB,IAAD,EACHnG,KAAjBvS,EADoB,EACpBA,KAAMC,EADc,EACdA,OACd,OACE,kBAACkG,GAAD,KACE,kBAAC2I,GAAD,CACEC,aAAc,CACZL,gBAAiB,iBAAM,UACvBC,gBAAiB,kBAAM,uBAAG7N,UAAU,iBACpC8N,OAAQqG,GAAcoV,KAExBrb,OAAQpN,GACRqN,UAAW,cACXxH,aAAcA,GACdzH,KAAMA,EACNC,OAAQA,GAER,kBAAC+F,GAAconB,SAAf,MACG,qBAAGppB,gBAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoS,KAAK,YAAYlH,UAAW+T,KACnC,kBAAC,IAAD,CAAO7M,KAAK,aAAalH,UAAWme,KACpC,kBAAC,IAAD,CAAOjX,KAAK,YAAYlH,UAAW+W,KACnC,kBAAC,IAAD,CAAO7P,KAAK,aAAalH,UAAWgX,KACpC,kBAAC,IAAD,CAAO9P,KAAK,SAASlH,UAAWqY,KAChC,kBAAC,IAAD,CAAOnR,KAAK,IAAIlH,UAAW6a,aG2BnC,SAIN1X,SAASib,eAAe,SFsDpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMP,MAAK,SAAAQ,GACjCA,EAAaC,iB","file":"static/js/main.2f648b33.chunk.js","sourcesContent":["import React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nconst SBAdmin2Context = React.createContext();\n\nexport function SBAdmin2Provider({ user, logout, children }) {\n  const [sidebarToggled, setSidebarToggled] = useState(false);\n  return (\n    <SBAdmin2Context.Provider\n      value={{\n        sidebarToggled,\n        user,\n        logout,\n        toggleSidebar: () => setSidebarToggled(current => !current),\n      }}\n    >\n      {children}\n    </SBAdmin2Context.Provider>\n  );\n}\n\nSBAdmin2Provider.propTypes = {\n  children: PropTypes.any,\n};\n\nexport const useSBAdmin2 = () => useContext(SBAdmin2Context);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction TopbarContextExpanded({ renderContext }) {\n  return (\n    <form className=\"d-none d-sm-inline-block form-inline mr-auto ml-md-3 my-2 my-md-0 mw-100 navbar-context\">\n      {renderContext()}\n    </form>\n  );\n}\n\nfunction TopbarContextMinimized({ faIcon, renderContext }) {\n  return (\n    <li className=\"nav-item dropdown no-arrow d-sm-none\">\n      <span\n        className=\"nav-link dropdown-toggle\"\n        id=\"contextDropdown\"\n        role=\"button\"\n        data-toggle=\"dropdown\"\n        aria-haspopup=\"true\"\n        aria-expanded=\"false\"\n        style={{ cursor: 'pointer' }}\n      >\n        <i className={`fas fa-${faIcon} fa-fw`}></i>\n      </span>\n      <div\n        className=\"dropdown-menu dropdown-menu-right p-3 shadow animated--grow-in\"\n        aria-labelledby=\"contextDropdown\"\n      >\n        <form className=\"form-inline mr-auto w-100 navbar-context\">\n          {renderContext()}\n        </form>\n      </div>\n    </li>\n  );\n}\n\nexport default function TopbarContext({ minified, ...props }) {\n  return minified ? (\n    <TopbarContextMinimized {...props} />\n  ) : (\n    <TopbarContextExpanded {...props} />\n  );\n}\n\nTopbarContext.propTypes = {\n  minified: PropTypes.bool,\n};\n","import React from 'react';\nimport { useSBAdmin2 } from '../context';\nimport './Topbar.css';\nimport TopbarContext from './TopbarContext';\n\nexport default function Topbar({\n  renderMenus,\n  renderContext,\n  renderUser,\n  faIconContextMinified,\n}) {\n  const { toggleSidebar } = useSBAdmin2();\n\n  return (\n    <nav className=\"navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow\">\n      <button\n        onClick={toggleSidebar}\n        className=\"btn btn-link d-md-none rounded-circle mr-3\"\n      >\n        <i className=\"fa fa-bars\"></i>\n      </button>\n\n      <TopbarContext minified={false} renderContext={renderContext} />\n\n      <ul className=\"navbar-nav ml-auto\">\n        <TopbarContext\n          minified={true}\n          renderContext={renderContext}\n          faIcon={faIconContextMinified}\n        />\n\n        {renderMenus()}\n\n        <div className=\"topbar-divider d-none d-sm-block\" />\n\n        {renderUser()}\n      </ul>\n    </nav>\n  );\n}\n","import React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nfunction TopbarMenuCounter({ counter }) {\n  const badge = counter >= 3 ? '3+' : '' + counter;\n  return (\n    counter > 0 && (\n      <span className=\"badge badge-danger badge-counter\">{badge}</span>\n    )\n  );\n}\n\nexport function TopbarMenu({ name, faIcon, children, counter }) {\n  const iconClasses = classnames('fas', 'fa-fw', `fa-${faIcon}`);\n  const id = `topbar--${name || faIcon}`;\n  return (\n    <li className=\"nav-item dropdown no-arrow mx-1\">\n      <span\n        className=\"nav-link dropdown-toggle\"\n        id={id}\n        role=\"button\"\n        data-toggle=\"dropdown\"\n        aria-haspopup=\"true\"\n        aria-expanded=\"false\"\n        style={{ cursor: 'pointer' }}\n      >\n        <i className={iconClasses} />\n        <TopbarMenuCounter counter={counter} />\n      </span>\n      <div\n        className=\"dropdown-list dropdown-menu dropdown-menu-right shadow animated--grow-in\"\n        aria-labelledby={id}\n      >\n        <h6 className=\"dropdown-header\">{name}</h6>\n        {children}\n        <span\n          className=\"dropdown-item text-center small text-gray-500\"\n          style={{ cursor: 'pointer' }}\n        >\n          Show All\n        </span>\n      </div>\n    </li>\n  );\n}\n\nTopbarMenu.propTypes = {\n  entries: PropTypes.arrayOf(\n    PropTypes.shape({\n      highlighted: PropTypes.bool,\n      render: PropTypes.func.isRequired,\n    })\n  ),\n  faIcon: PropTypes.string,\n  name: PropTypes.string,\n};\n","import React from 'react';\nimport { useSBAdmin2 } from '../context';\n\nexport default function TopbarUser() {\n  const { user, logout } = useSBAdmin2();\n  return (\n    <li className=\"nav-item dropdown no-arrow\">\n      <span\n        className=\"nav-link dropdown-toggle\"\n        id=\"userDropdown\"\n        role=\"button\"\n        data-toggle=\"dropdown\"\n        aria-haspopup=\"true\"\n        aria-expanded=\"false\"\n      >\n        <span className=\"mr-2 d-none d-lg-inline text-gray-600 small\">\n          {user.name}\n        </span>\n        <img alt=\"\" className=\"img-profile rounded-circle\" src={user.picture} />\n      </span>\n      <ul\n        className=\"dropdown-menu dropdown-menu-right shadow animated--grow-in\"\n        aria-labelledby=\"userDropdown\"\n      >\n        <li className=\"dropdown-item\">\n          <i className=\"fas fa-cogs fa-sm fa-fw mr-2 text-gray-400\"></i>\n          Settings\n        </li>\n        <div className=\"dropdown-divider\"></div>\n        <li\n          className=\"dropdown-item\"\n          data-toggle=\"modal\"\n          data-target=\"#logoutModal\"\n          onClick={() => logout()}\n        >\n          <i className=\"fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400\"></i>\n          Logout\n        </li>\n      </ul>\n    </li>\n  );\n}\n","import React from 'react';\n\nexport default function TopbarContextSwitcher({\n  label,\n  value,\n  onChange,\n  allowedValues,\n}) {\n  return (\n    <div\n      className=\"input-group navbar-context-switcher\"\n      style={{ display: 'flex', alignContent: 'stretch' }}\n    >\n      <div className=\"input-group-prepend navbar-context-switcher-label\">\n        <label className=\"input-group-text border-0\">{label}</label>\n      </div>\n      <div\n        className=\"input-group-append btn-group\"\n        style={{\n          flexGrow: 1,\n        }}\n      >\n        <span\n          className=\"input-group-text bg-light border-0 navbar-context-display text-dark\"\n          aria-label={label}\n          style={{ flexGrow: 1 }}\n        >\n          {value}\n        </span>\n        <button\n          className=\"btn btn-primary dropdown-toggle dropdown-toggle-split no-arrow\"\n          data-toggle=\"dropdown\"\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\"\n          style={{ maxWidth: '2rem' }}\n        />\n        <div className=\"dropdown-menu\">\n          {allowedValues.map(v => (\n            <span\n              className=\"dropdown-item\"\n              onClick={() => onChange(v.id)}\n              key={v.id}\n            >\n              {v.label}\n            </span>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import gql from 'graphql-tag';\nimport { useBudget } from './budget';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst MONTHLY_REPORT_FRAGMENT = gql`\n  fragment MonthlyReport on MonthlyReport {\n    month\n    totalPlannedAmount\n    totalIncomeAmount\n    totalExpenseAmount\n    problems {\n      severity\n      ... on EnvelopeOverLimit {\n        id\n      }\n      ... on NegativeBalanceOnAccount {\n        id\n      }\n      ... on NegativeBalanceOnEnvelope {\n        id\n      }\n      ... on Misplanned {\n        overplanned\n      }\n    }\n  }\n`;\n\nexport const GET_CURRENT_MONTHLY_REPORT = gql`\n  query GetCurrentMonthlyReport($budgetID: ID!) {\n    budget(budgetID: $budgetID) {\n      currentMonth {\n        ...MonthlyReport\n      }\n    }\n  }\n  ${MONTHLY_REPORT_FRAGMENT}\n`;\n\nexport function useGetCurrentMonthlyReport() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_CURRENT_MONTHLY_REPORT, {\n    variables: { budgetID: selectedBudget.id },\n    fetchPolicy: 'network-only',\n  });\n}\n","import gql from 'graphql-tag';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { useBudget } from './budget';\n\nexport const GET_ENVELOPES = gql`\n  query GetEnvelopes($budgetID: ID!) {\n    envelopes(budgetID: $budgetID) {\n      id\n      name\n      balance\n      limit\n    }\n  }\n`;\n\nconst CREATE_ENVELOPE = gql`\n  mutation CreateEnvelope($budgetID: ID!, $input: EnvelopeInput!) {\n    createEnvelope(budgetID: $budgetID, in: $input) {\n      id\n      name\n      balance\n      limit\n    }\n  }\n`;\n\nconst UPDATE_ENVELOPE = gql`\n  mutation UpdateEnvelope($budgetID: ID!, $id: ID!, $input: EnvelopeUpdate!) {\n    updateEnvelope(budgetID: $budgetID, id: $id, in: $input) {\n      id\n      name\n      balance\n      limit\n    }\n  }\n`;\n\nexport function useCreateEnvelope() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_ENVELOPE, {\n    update: (cache, { data: { createEnvelope } }) => {\n      const { envelopes } = cache.readQuery({\n        query: GET_ENVELOPES,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_ENVELOPES,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          envelopes: envelopes.concat([createEnvelope]),\n        },\n      });\n    },\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useUpdateEnvelope() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_ENVELOPE);\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useGetEnvelopes() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_ENVELOPES, {\n    variables: { budgetID: selectedBudget.id },\n  });\n}\n","export function addToList(list, element) {\n  return [...list, element]\n}\n\nexport function removeFromList(list, element) {\n  const idx = list.indexOf(element);\n  if (idx === -1) {\n    return list\n  }\n  return [...list.slice(0, idx), ...list.slice(idx+1, list.length)]\n}\n\nexport function removeFromListByID(list, elementId) {\n  const idx = list.findIndex(e => e.id === elementId);\n  if (idx === -1) {\n    return list\n  }\n  return [...list.slice(0, idx), ...list.slice(idx+1, list.length)]\n}\n\nexport function replaceOnList(list, idx, element) {\n  if (idx < 0 || idx > list.length) {\n    return list\n  }\n  return [...list.slice(0, idx), element, ...list.slice(idx+1, list.length)]\n}\n\nexport function replaceOnListByID(list, element) {\n  const idx = list.findIndex(e => e.id === element.id);\n\n  if (idx === -1) {\n    return list\n  }\n\n  return [...list.slice(0, idx), element, ...list.slice(idx+1, list.length)]\n}","import gql from 'graphql-tag';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { useBudget } from './budget';\nimport { GET_ENVELOPES } from './envelopes';\nimport { GET_CURRENT_MONTHLY_REPORT } from './monthlyReport';\nimport { removeFromListByID } from '../../util/immutable';\n\nconst PLAN_FRAGMENT = gql`\n  fragment Plan on Plan {\n    id\n    title\n    fromEnvelope {\n      id\n      name\n    }\n    toEnvelope {\n      id\n      name\n    }\n    currentAmount\n    recurringAmount\n  }\n`;\n\nexport const GET_CURRENT_PLANS = gql`\n  query getCurrentPlans($budgetID: ID!) {\n    budget(budgetID: $budgetID) {\n      currentMonth {\n        plans {\n          ...Plan\n        }\n      }\n    }\n  }\n  ${PLAN_FRAGMENT}\n`;\n\nexport function useGetCurrentPlans() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_CURRENT_PLANS, {\n    variables: { budgetID: selectedBudget.id },\n  });\n}\n\nconst CREATE_PLAN = gql`\n  mutation createPlan($budgetID: ID!, $input: PlanInput!) {\n    createPlan(budgetID: $budgetID, in: $input) {\n      ...Plan\n    }\n  }\n  ${PLAN_FRAGMENT}\n`;\n\nexport function useCreatePlan() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_PLAN, {\n    update: (cache, { data: { createPlan } }) => {\n      const { budget } = cache.readQuery({\n        query: GET_CURRENT_PLANS,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_CURRENT_PLANS,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          budget: {\n            ...budget,\n            currentMonth: {\n              ...budget.currentMonth,\n              plans: budget.currentMonth.plans.concat([createPlan]),\n            },\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_CURRENT_MONTHLY_REPORT,\n        variables: { budgetID: selectedBudget.id },\n      },\n    ],\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nconst UPDATE_PLAN = gql`\n  mutation updatePlan($budgetID: ID!, $id: ID!, $input: PlanUpdate!) {\n    updatePlan(budgetID: $budgetID, id: $id, in: $input) {\n      ...Plan\n    }\n  }\n  ${PLAN_FRAGMENT}\n`;\n\nexport function useUpdatePlan() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_PLAN, {\n    refetchQueries: () => [\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_CURRENT_MONTHLY_REPORT,\n        variables: { budgetID: selectedBudget.id },\n      },\n    ],\n  });\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nconst DELETE_PLAN = gql`\n  mutation deletePlan($budgetID: ID!, $id: ID!) {\n    deletePlan(budgetID: $budgetID, id: $id) {\n      id\n    }\n  }\n`;\n\nexport function useDeletePlan() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(DELETE_PLAN, {\n    update: (cache, { data: { deletePlan } }) => {\n      const { budget } = cache.readQuery({\n        query: GET_CURRENT_PLANS,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_CURRENT_PLANS,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          budget: {\n            ...budget,\n            currentMonth: {\n              ...budget.currentMonth,\n              plans: removeFromListByID(\n                budget.currentMonth.plans,\n                deletePlan.id\n              ),\n            },\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_CURRENT_MONTHLY_REPORT,\n        variables: { budgetID: selectedBudget.id },\n      },\n    ],\n  });\n  const wrapper = id => {\n    mutation({ variables: { budgetID: selectedBudget.id, id } });\n  };\n  return [wrapper, ...rest];\n}\n","import gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { useBudget } from './budget';\n\nexport const GET_ACCOUNTS = gql`\n  query GetAccounts($budgetID: ID!) {\n    accounts(budgetID: $budgetID) {\n      id\n      name\n      balance\n    }\n  }\n`;\n\nexport function useGetAccounts() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_ACCOUNTS, {\n    variables: { budgetID: selectedBudget.id },\n  });\n}\n\nconst CREATE_ACCOUNT = gql`\n  mutation CreateAccount($budgetID: ID!, $input: AccountInput!) {\n    createAccount(budgetID: $budgetID, in: $input) {\n      id\n      name\n      balance\n    }\n  }\n`;\n\nexport function useCreateAccount() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_ACCOUNT, {\n    update: (cache, { data: { createAccount } }) => {\n      const { accounts } = cache.readQuery({\n        query: GET_ACCOUNTS,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_ACCOUNTS,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          accounts: accounts.concat([createAccount]),\n        },\n      });\n    },\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nconst UPDATE_ACCOUNT = gql`\n  mutation UpdateAccount($budgetID: ID!, $id: ID!, $input: AccountUpdate!) {\n    updateAccount(budgetID: $budgetID, id: $id, in: $input) {\n      id\n      name\n      balance\n    }\n  }\n`;\n\nexport function useUpdateAccount() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_ACCOUNT);\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n","import gql from 'graphql-tag';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { useBudget } from './budget';\nimport { GET_CURRENT_MONTHLY_REPORT } from './monthlyReport';\nimport { GET_ACCOUNTS } from './accounts';\nimport { removeFromListByID } from '../../util/immutable';\n\nconst TRANSFER_FRAGMENT = gql`\n  fragment Transfer on Transfer {\n    id\n    title\n    fromAccount {\n      id\n      name\n    }\n    toAccount {\n      id\n      name\n    }\n    amount\n    date\n  }\n`;\n\nexport const GET_CURRENT_TRANSFERS = gql`\n  query getCurrentTransfers($budgetID: ID!) {\n    budget(budgetID: $budgetID) {\n      currentMonth {\n        transfers {\n          ...Transfer\n        }\n      }\n    }\n  }\n  ${TRANSFER_FRAGMENT}\n`;\n\nexport function useGetCurrentTransfers() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_CURRENT_TRANSFERS, {\n    variables: { budgetID: selectedBudget.id },\n  });\n}\n\nconst CREATE_TRANSFER = gql`\n  mutation createTransfer($budgetID: ID!, $input: TransferInput!) {\n    createTransfer(budgetID: $budgetID, in: $input) {\n      ...Transfer\n    }\n  }\n  ${TRANSFER_FRAGMENT}\n`;\n\nexport function useCreateTransfer() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_TRANSFER, {\n    update: (cache, { data: { createTransfer } }) => {\n      const { budget } = cache.readQuery({\n        query: GET_CURRENT_TRANSFERS,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_CURRENT_TRANSFERS,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          budget: {\n            ...budget,\n            currentMonth: {\n              ...budget.currentMonth,\n              transfers: budget.currentMonth.transfers.concat([createTransfer]),\n            },\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_CURRENT_MONTHLY_REPORT,\n        variables: { budgetID: selectedBudget.id },\n      },\n    ],\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nconst UPDATE_TRANSFER = gql`\n  mutation updateTransfer($budgetID: ID!, $id: ID!, $input: TransferUpdate!) {\n    updateTransfer(budgetID: $budgetID, id: $id, in: $input) {\n      ...Transfer\n    }\n  }\n  ${TRANSFER_FRAGMENT}\n`;\n\nexport function useUpdateTransfer() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_TRANSFER, {\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_CURRENT_MONTHLY_REPORT,\n        variables: { budgetID: selectedBudget.id },\n      },\n    ],\n  });\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nconst DELETE_TRANSFER = gql`\n  mutation deleteTransfer($budgetID: ID!, $id: ID!) {\n    deleteTransfer(budgetID: $budgetID, id: $id) {\n      id\n    }\n  }\n`;\n\nexport function useDeleteTranfer() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(DELETE_TRANSFER, {\n    update: (cache, { data: { deleteTransfer } }) => {\n      const { budget } = cache.readQuery({\n        query: GET_CURRENT_TRANSFERS,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_CURRENT_TRANSFERS,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          budget: {\n            ...budget,\n            currentMonth: {\n              ...budget.currentMonth,\n              transfers: removeFromListByID(\n                budget.currentMonth.transfers,\n                deleteTransfer.id\n              ),\n            },\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_CURRENT_MONTHLY_REPORT,\n        variables: { budgetID: selectedBudget.id },\n      },\n    ],\n  });\n  const wrapper = id => {\n    mutation({ variables: { budgetID: selectedBudget.id, id } });\n  };\n  return [wrapper, ...rest];\n}\n","import gql from 'graphql-tag';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { useBudget } from './budget';\nimport { removeFromListByID } from '../../util/immutable';\nimport { GET_ACCOUNTS } from './accounts';\nimport { GET_CURRENT_MONTHLY_REPORT } from './monthlyReport';\nimport { GET_ENVELOPES } from './envelopes';\n\nconst EXPENSE_FRAGMENT = gql`\n  fragment Expense on Expense {\n    id\n    title\n    account {\n      id\n      name\n    }\n    categories {\n      category {\n        id\n        name\n      }\n      amount\n    }\n    totalAmount\n    date\n  }\n`;\n\nexport const GET_CURRENT_EXPENSES = gql`\n  query getCurrentExpenses($budgetID: ID!) {\n    budget(budgetID: $budgetID) {\n      currentMonth {\n        expenses {\n          ...Expense\n        }\n      }\n    }\n  }\n\n  ${EXPENSE_FRAGMENT}\n`;\n\nconst CREATE_EXPENSE = gql`\n  mutation createExpense($budgetID: ID!, $input: ExpenseInput!) {\n    createExpense(budgetID: $budgetID, in: $input) {\n      ...Expense\n    }\n  }\n\n  ${EXPENSE_FRAGMENT}\n`;\n\nconst UPDATE_EXPENSE = gql`\n  mutation updateExpense($budgetID: ID!, $id: ID!, $input: ExpenseUpdate!) {\n    updateExpense(budgetID: $budgetID, id: $id, in: $input) {\n      ...Expense\n    }\n  }\n\n  ${EXPENSE_FRAGMENT}\n`;\n\nexport function useCreateExpense() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_EXPENSE, {\n    update: (cache, { data: { createExpense } }) => {\n      const { budget } = cache.readQuery({\n        query: GET_CURRENT_EXPENSES,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_CURRENT_EXPENSES,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          budget: {\n            ...budget,\n            currentMonth: {\n              ...budget.currentMonth,\n              expenses: budget.currentMonth.expenses.concat([createExpense]),\n            },\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_CURRENT_MONTHLY_REPORT,\n        variables: { budgetID: selectedBudget.id },\n      },\n    ],\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useUpdateExpense() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_EXPENSE, {\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_CURRENT_MONTHLY_REPORT,\n        variables: { budgetID: selectedBudget.id },\n      },\n    ],\n  });\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useGetCurrentExpenses() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_CURRENT_EXPENSES, {\n    variables: { budgetID: selectedBudget.id },\n  });\n}\n\nconst DELETE_EXPENSE = gql`\n  mutation deleteExpense($budgetID: ID!, $id: ID!) {\n    deleteExpense(budgetID: $budgetID, id: $id) {\n      id\n    }\n  }\n`;\n\nexport function useDeleteExpense() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(DELETE_EXPENSE, {\n    update: (cache, { data: { deleteExpense } }) => {\n      const { budget } = cache.readQuery({\n        query: GET_CURRENT_EXPENSES,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_CURRENT_EXPENSES,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          budget: {\n            ...budget,\n            currentMonth: {\n              ...budget.currentMonth,\n              expenses: removeFromListByID(\n                budget.currentMonth.expenses,\n                deleteExpense.id\n              ),\n            },\n          },\n        },\n      });\n    },\n    refetchQueries: () => [\n      { query: GET_ACCOUNTS, variables: { budgetID: selectedBudget.id } },\n      { query: GET_ENVELOPES, variables: { budgetID: selectedBudget.id } },\n      {\n        query: GET_CURRENT_MONTHLY_REPORT,\n        variables: { budgetID: selectedBudget.id },\n      },\n    ],\n  });\n  const wrapper = id => {\n    mutation({ variables: { budgetID: selectedBudget.id, id } });\n  };\n  return [wrapper, ...rest];\n}\n","import React, { createContext, useState, useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { GET_CURRENT_MONTHLY_REPORT } from './monthlyReport';\nimport { GET_CURRENT_PLANS } from './plans';\nimport { GET_CURRENT_TRANSFERS } from './transfers';\nimport { GET_CURRENT_EXPENSES } from './expenses';\n\nexport const BudgetContext = createContext();\nexport const useBudget = () => useContext(BudgetContext);\n\nconst GET_BUDGETS = gql`\n  query GetBudgets {\n    budgets {\n      id\n      name\n      currentMonth {\n        month\n      }\n    }\n  }\n`;\n\nconst storageKey = 'LAST-CHOSEN-BUDGET-ID';\n\nexport function BudgetProvider({ children }) {\n  const [selectedBudget, setSelectedBudget] = useState(null);\n  const { loading, error, data } = useQuery(GET_BUDGETS);\n  useEffect(() => {\n    if (selectedBudget) {\n      sessionStorage.setItem(storageKey, selectedBudget.id);\n    }\n  }, [selectedBudget]);\n  useEffect(() => {\n    if (!selectedBudget && data && data.budgets) {\n      const lastChosenID = sessionStorage.getItem(storageKey);\n      const lastChosen = data.budgets.find(b => b.id === lastChosenID);\n      if (lastChosen) {\n        setSelectedBudget(lastChosen);\n      }\n    }\n  }, [data, selectedBudget]);\n  const value = {\n    selectedBudget,\n    setSelectedBudget,\n    loading,\n    error,\n    budgets: !loading && !error ? data.budgets : [],\n  };\n  if (error) {\n    console.error(error);\n  }\n  return (\n    <BudgetContext.Provider value={value}>{children}</BudgetContext.Provider>\n  );\n}\n\nBudgetProvider.propTypes = {\n  children: PropTypes.node,\n};\n\nconst CLOSE_CURRENT_MONTH = gql`\n  mutation closeMonth($budgetID: ID!) {\n    closeCurrentMonth(budgetID: $budgetID) {\n      id\n    }\n  }\n`;\n\nexport function useCloseCurrentMonth() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CLOSE_CURRENT_MONTH, {\n    refetchQueries: () => [\n      {\n        query: GET_CURRENT_MONTHLY_REPORT,\n        variables: { budgetID: selectedBudget.id },\n      },\n      {\n        query: GET_CURRENT_PLANS,\n        variables: { budgetID: selectedBudget.id },\n      },\n      {\n        query: GET_CURRENT_TRANSFERS,\n        variables: { budgetID: selectedBudget.id },\n      },\n      {\n        query: GET_CURRENT_EXPENSES,\n        variables: { budgetID: selectedBudget.id },\n      },\n    ],\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n","import React from 'react';\nimport classnames from 'classnames';\n\nexport default function Spinner({ size, variant }) {\n  const classNames = classnames('spinner-border', {\n    [`spinner-border-${size}`]: size,\n    [`text-${variant}`]: variant,\n  });\n  return (\n    <div className={classNames} role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </div>\n  );\n}\n","import React, { createContext, useContext } from 'react';\nimport { useSBAdmin2 } from './context';\nimport PropTypes from 'prop-types';\nimport { capitalize } from '../../util/capitalize';\n\nexport const DictionaryContext = createContext();\n\nexport function DictionaryProvider({ dictionaries, children }) {\n  const { user } = useSBAdmin2();\n  return (\n    <DictionaryContext.Provider value={dictionaries[user.locale]}>\n      {children}\n    </DictionaryContext.Provider>\n  );\n}\n\nDictionaryProvider.propTypes = {\n  dictionaries: PropTypes.object,\n  children: PropTypes.node,\n};\n\nexport const useDictionary = () => useContext(DictionaryContext);\n\nexport function withDictionary(prop, Component, readPropName) {\n  return props => {\n    readPropName = readPropName || `read${capitalize(prop)}`;\n    const readDict = props[readPropName];\n    const newProps = { ...props };\n    delete newProps[readPropName];\n    const dictionary = useDictionary();\n    if (readDict) {\n      newProps[prop] = readDict(dictionary);\n    }\n    return <Component {...newProps} />;\n  };\n}\n","export function capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { withDictionary } from '../../language';\n\nfunction PanelTitle({ children, title, className }) {\n  const classNames = classnames(\n    'm-0',\n    'font-weight-bold',\n    'text-primary',\n    className\n  );\n  return (\n    <h6 className={classNames}>\n      {children}\n      {title}\n    </h6>\n  );\n}\n\nPanelTitle.propTypes = {\n  title: PropTypes.node.isRequired,\n  className: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default withDictionary('title', PanelTitle);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport PanelTitle from './PanelTitle';\nimport PanelHeader from './PanelHeader';\nimport PanelBody from './PanelBody';\n\nexport default function Panel({ children, className }) {\n  return (\n    <div className={classnames('card', 'shadow', 'mb-4', className)}>\n      {children}\n    </div>\n  );\n}\n\nPanel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n};\n\nPanel.Title = PanelTitle;\nPanel.Header = PanelHeader;\nPanel.Body = PanelBody;\n","import React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport default function PanelHeader({ className, ...props }) {\n  return <div className={classnames(className, 'card-header')} {...props} />;\n}\n\nPanelHeader.propTypes = {\n  className: PropTypes.string,\n};\n","import React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport default function PanelBody({ className, children }) {\n  return <div className={classnames(className, 'card-body')}>{children}</div>;\n}\n\nPanelBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport BootstrapTable from 'react-bootstrap-table-next';\n\nimport { withDictionary } from '../../language';\n\nfunction Table({ columns, columnNames, ...props }) {\n  return (\n    <BootstrapTable\n      bootstrap4\n      columns={addColumnNames(columns, columnNames)}\n      {...props}\n    />\n  );\n}\n\nTable.propTypes = {\n  columns: PropTypes.array.isRequired,\n  columnNames: PropTypes.object.isRequired,\n};\n\nfunction addColumnNames(columns, dictionary) {\n  return columns.map(c => ({ ...c, text: dictionary[c.dataField] || '' }));\n}\n\nexport default withDictionary('columnNames', Table);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Panel from '../Panel/Panel';\nimport Table from '../Table/Table';\nimport { withDictionary } from '../../language';\n\nfunction TablePanel({\n  title,\n  columns,\n  headerButtons,\n  panelClassName,\n  wrapper: Wrapper,\n  wrapperProps,\n  hiddenColumns,\n  data,\n  filters,\n  ...props\n}) {\n  const paddedFirstColumn = {\n    ...columns[0],\n    classes: 'pl-3',\n    headerClasses: 'pl-3',\n  };\n  const modifiedColumns = [\n    paddedFirstColumn,\n    ...columns.slice(1, columns.length),\n  ];\n  const wihtouHidden = modifiedColumns.map(c => ({\n    ...c,\n    hidden: hiddenColumns && hiddenColumns.some(hc => c.dataField === hc),\n  }));\n\n  function filtersMatch(row) {\n    return filters.every(f => f(row));\n  }\n\n  const filteredData = data.filter(row => filtersMatch(row));\n\n  return (\n    <Wrapper className={panelClassName} {...wrapperProps}>\n      <Wrapper.Header className=\"p-2 pl-3\">\n        <div className=\"d-flex justify-content-between align-items-center\">\n          <Wrapper.Title title={title} className=\"table-panel--title\" />\n          <div>{headerButtons}</div>\n        </div>\n      </Wrapper.Header>\n\n      <Wrapper.Body className=\"p-0\">\n        <Table\n          classes=\"table-layout-auto table-sm m-0\"\n          striped\n          hover\n          bordered={false}\n          columns={wihtouHidden}\n          data={filteredData}\n          {...props}\n        />\n      </Wrapper.Body>\n    </Wrapper>\n  );\n}\n\nTablePanel.propTypes = {\n  wrapper: PropTypes.elementType,\n  wrapperProps: PropTypes.object,\n  title: PropTypes.string.isRequired,\n  headerButtons: PropTypes.node,\n  columns: PropTypes.array.isRequired,\n  panelClassName: PropTypes.string,\n  hiddenColumns: PropTypes.arrayOf(PropTypes.string),\n  filters: PropTypes.arrayOf(PropTypes.func),\n};\n\nTablePanel.defaultProps = {\n  wrapper: Panel,\n  wrapperProps: {},\n  hiddenColumns: [],\n  filters: [],\n};\n\nexport default withDictionary('title', TablePanel);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Modal } from 'react-bootstrap';\n\nexport default function OpenModalButton({\n  button: Button,\n  modalContent: ModalContent,\n  onClickRef,\n  ...props\n}) {\n  const [show, setShow] = useState(false);\n  const onHide = () => setShow(false);\n  const onClick = () => setShow(true);\n  if (onClickRef) {\n    onClickRef.current = onClick;\n  }\n\n  return (\n    <span>\n      <Button onClick={onClick} />\n      <Modal show={show} onHide={onHide} {...props}>\n        <ModalContent onHide={onHide} />\n      </Modal>\n    </span>\n  );\n}\n\nOpenModalButton.propTypes = {\n  button: PropTypes.elementType.isRequired,\n  modalContent: PropTypes.elementType.isRequired,\n  onClickRef: PropTypes.shape({ current: PropTypes.any }),\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withDictionary } from '../../language';\n\nfunction PageHeader({ title }) {\n  return <h1 className=\"h3 mb-4 text-gray-800\">{title}</h1>;\n}\n\nPageHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default withDictionary('title', PageHeader);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PageHeader from './PageHeader';\n\nexport default function Page({ children }) {\n  return <div className=\"container-fluid\">{children}</div>;\n}\n\nPage.propTypes = {\n  children: PropTypes.node,\n};\n\nPage.Header = PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nexport default function Icon({ icon, className }) {\n  const classNames = classnames('fas', `fa-${icon}`, 'fa-fw', className);\n  return <i className={classNames} />;\n}\n\nIcon.propTypes = {\n  icon: PropTypes.string.isRequired,\n  className: PropTypes.string,\n};\n\nIcon.Archive = 'archive';\nIcon.Trash = 'trash-alt';\nIcon.Edit = 'edit';\nIcon.Plus = 'plus';\nIcon.Minus = 'minus';\nIcon.Save = 'save';\nIcon.ClipboardCheck = 'clipboard-check';\nIcon.ChevronUp = 'chevron-up';\nIcon.ChevronDown = 'chevron-down';\n","export const Variant = {\n  secondary: 'secondary',\n  primary: 'primary',\n  danger: 'danger',\n  success: 'success',\n  warning: 'warning',\n  white: 'white',\n};\n\nexport const Size = {\n  sm: 'sm',\n  lg: 'lg',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport Icon from '../Icon/Icon';\nimport { Variant } from '../../bootstrap';\n\nexport default function ClickableIcon({\n  icon,\n  variant,\n  className,\n  onClick,\n  ...props\n}) {\n  const classes = classnames(\n    'btn',\n    'bg-transparent',\n    'border-0',\n    'p-0',\n    'mx-1',\n    className,\n    {\n      [`text-${variant}`]: variant,\n    }\n  );\n\n  function handleOnClick(e) {\n    e.preventDefault();\n    onClick && onClick(e);\n  }\n\n  return (\n    <button className={classes} onClick={handleOnClick} {...props}>\n      <Icon icon={icon} />\n    </button>\n  );\n}\n\nClickableIcon.propTypes = {\n  icon: PropTypes.string.isRequired,\n  className: PropTypes.string,\n  onClick: PropTypes.func,\n  variant: PropTypes.oneOf(Object.keys(Variant)),\n};\n","import React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport Icon from '../Icon/Icon';\nimport { Variant, Size } from '../../bootstrap';\n\nexport default function SplitButton({\n  children,\n  icon,\n  variant,\n  size,\n  className,\n  disabled,\n  _ref,\n  ...props\n}) {\n  const classNames = classnames('btn', 'btn-icon-split', className, {\n    disabled,\n    [`btn-${size}`]: size,\n    [`btn-${variant}`]: variant,\n  });\n\n  return (\n    <button className={classNames} disabled={disabled} ref={_ref} {...props}>\n      <span className=\"icon text-white-50\">\n        <Icon icon={icon} />\n      </span>\n      <span className=\"text\">{children}</span>\n    </button>\n  );\n}\n\nSplitButton.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  icon: PropTypes.string.isRequired,\n  size: PropTypes.oneOf(Object.keys(Size)),\n  variant: PropTypes.oneOf(Object.keys(Variant)),\n  _ref: PropTypes.any,\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Page from './components/Page/Page';\n\nexport function NotFoundPage() {\n  return (\n    <Page>\n      <div className=\"text-center\">\n        <div className=\"error mx-auto\" data-text=\"404\">\n          404\n        </div>\n        <p className=\"lead text-gray-800 mb-5\">Page Not Found</p>\n        <p className=\"text-gray-500 mb-0\">\n          It looks like you found a glitch in the matrix...\n        </p>\n        <Link to=\"/\">&larr; Back to Dashboard</Link>\n      </div>\n    </Page>\n  );\n}\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useLocation } from 'react-router';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nfunction oneOfRoutsMatchesLocation(sections, location) {\n  return sections.some(({ routes }) =>\n    routes.some(({ to }) => location.pathname === to)\n  );\n}\n\nexport default function SidebarCollapsibleLink({\n  name,\n  parent,\n  sections,\n  faIcon,\n}) {\n  const location = useLocation();\n  const isActive = oneOfRoutsMatchesLocation(sections, location);\n  const classNames = classnames('nav-item', { active: isActive });\n  const id = 'sidebar--' + name;\n  const iconClasses = classnames('fas', 'fa-fw', `fa-${faIcon}`);\n  return (\n    <li className={classNames}>\n      <span\n        className=\"nav-link collapsed\"\n        data-toggle=\"collapse\"\n        data-target={'#' + id}\n        aria-expanded=\"true\"\n        aria-controls={id}\n      >\n        <i className={iconClasses}></i>\n        <span>{name}</span>\n      </span>\n      <div id={id} className=\"collapse\" data-parent={'#' + parent}>\n        <div className=\"bg-white py-2 collapse-inner rounded\">\n          {sections.map(({ name, routes }) => {\n            return (\n              <React.Fragment key={name}>\n                <h6 className=\"collapse-header\">{name}:</h6>\n                {routes.map(({ to, label }) => {\n                  return (\n                    <NavLink key={label} className=\"collapse-item\" to={to}>\n                      {label}\n                    </NavLink>\n                  );\n                })}\n              </React.Fragment>\n            );\n          })}\n        </div>\n      </div>\n    </li>\n  );\n}\n\nSidebarCollapsibleLink.propTypes = {\n  faIcon: PropTypes.string,\n  name: PropTypes.string,\n  parent: PropTypes.string,\n  sections: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      routes: PropTypes.arrayOf(\n        PropTypes.shape({\n          label: PropTypes.string,\n          to: PropTypes.string,\n        })\n      ).isRequired,\n    })\n  ),\n};\n","import React from 'react';\nimport classnames from 'classnames';\nimport { NavLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport default function SidebarSimpleLink({ name, to, faIcon }) {\n  const iconClasses = classnames('fas', 'fa-fw', `fa-${faIcon}`);\n  return (\n    <li className=\"nav-item\">\n      <NavLink className=\"nav-link\" exact to={to}>\n        <i className={iconClasses} />\n        <span>{name}</span>\n      </NavLink>\n    </li>\n  );\n}\n\nSidebarSimpleLink.propTypes = {\n  faIcon: PropTypes.string,\n  name: PropTypes.string,\n  to: PropTypes.string,\n};\n","import React from 'react';\nimport SidebarCollapsibleLink from './SidebarCollapsibleLink';\nimport SidebarSimpleLink from './SidebarSimpleLink';\nimport PropTypes from 'prop-types';\n\nexport function SidebarGroup({ group }) {\n  return (\n    <>\n      <hr className=\"sidebar-divider my-1\" />\n      {group.name && <div className=\"sidebar-heading\">{group.name}</div>}\n      {group.entries.map(entry =>\n        entry.to !== undefined ? (\n          <SidebarSimpleLink key={entry.name} {...entry} />\n        ) : (\n          <SidebarCollapsibleLink\n            key={entry.name}\n            parent=\"accordionSidebar\"\n            {...entry}\n          />\n        )\n      )}\n    </>\n  );\n}\n\nSidebarGroup.propTypes = {\n  group: PropTypes.shape({\n    name: PropTypes.string,\n    entries: PropTypes.arrayOf(\n      PropTypes.oneOfType([\n        PropTypes.shape(SidebarCollapsibleLink.propTypes),\n        PropTypes.shape(SidebarSimpleLink.propTypes),\n      ])\n    ).isRequired,\n  }),\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { SidebarGroup } from './SidebarGroup';\nimport { useSBAdmin2 } from '../context';\nimport './Sidebar.css';\n\nexport default function Sidebar({ renderBrandName, renderBrandIcon, config }) {\n  const { sidebarToggled, toggleSidebar } = useSBAdmin2();\n  const classNames = classnames(\n    'navbar-nav',\n    'bg-gradient-primary',\n    'sidebar',\n    'sidebar-dark',\n    'accordion',\n    { toggled: sidebarToggled }\n  );\n  return (\n    <ul className={classNames} id=\"accordionSidebar\">\n      <Link\n        className=\"sidebar-brand d-flex align-items-center justify-content-center\"\n        to=\"/\"\n      >\n        <div className=\"sidebar-brand-icon rotate-n-15\">\n          {renderBrandIcon()}\n        </div>\n        <div className=\"sidebar-brand-text mx-3\">{renderBrandName()}</div>\n      </Link>\n\n      {config.map((group, idx) => (\n        <SidebarGroup key={group.name || idx} group={group} />\n      ))}\n\n      <hr className=\"sidebar-divider d-none d-md-block\" />\n\n      <div className=\"text-center d-none d-md-inline\">\n        <button\n          className=\"rounded-circle border-0\"\n          id=\"sidebarToggle\"\n          onClick={toggleSidebar}\n        ></button>\n      </div>\n    </ul>\n  );\n}\n\nSidebar.propTypes = {\n  config: PropTypes.arrayOf(SidebarGroup.propTypes.group).isRequired,\n  renderBrandIcon: PropTypes.func.isRequired,\n  renderBrandName: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { SBAdmin2Provider } from './context';\nimport PropTypes from 'prop-types';\nimport { Switch, Route } from 'react-router-dom';\nimport { NotFoundPage } from './NotFoundPage';\nimport Sidebar from './Sidebar/Sidebar';\nimport { DictionaryProvider } from './language';\n\nexport function SBAdmin2({\n  sidebarProps,\n  topbar,\n  user,\n  logout,\n  children,\n  dictionaries,\n  copyright,\n}) {\n  const Topbar = topbar;\n  return (\n    <SBAdmin2Provider user={user} logout={logout}>\n      <DictionaryProvider dictionaries={dictionaries}>\n        <div id=\"wrapper\">\n          <Sidebar {...sidebarProps} />\n          <div id=\"content-wrapper\" className=\"d-flex flex-column\">\n            <div id=\"content\">\n              <Topbar />\n              <Switch>\n                {children}\n                <Route component={NotFoundPage} />\n              </Switch>\n            </div>\n          </div>\n        </div>\n        <footer className=\"sticky-footer bg-white\">\n          <div className=\"container my-auto\">\n            <div className=\"copyright text-center my-auto\">\n              <span>Copyright &copy; {copyright}</span>\n            </div>\n          </div>\n        </footer>\n      </DictionaryProvider>\n    </SBAdmin2Provider>\n  );\n}\n\nSBAdmin2.propTypes = {\n  children: PropTypes.any,\n  copyright: PropTypes.string,\n  sidebarProps: PropTypes.shape(Sidebar.propTypes).isRequired,\n  topbar: PropTypes.elementType.isRequired,\n  user: PropTypes.shape({\n    locale: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    picture: PropTypes.string.isRequired,\n  }).isRequired,\n  logout: PropTypes.func.isRequired,\n  dictionaries: PropTypes.object,\n};\n","import React from 'react';\nimport { Form, Row, Col } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport function FormControl({ label, inline, ...props }) {\n  return (\n    <Form.Group className=\"mb-3\" as={!!inline && Row}>\n      <Form.Label column={!!inline}>{label}</Form.Label>\n      <FormControl.Input inline={inline} {...props} />\n    </Form.Group>\n  );\n}\n\nFormControl.Input = ({ inline, formData, feedback, children, ...props }) => {\n  const wrap = inline ? c => <Col sm={inline}>{c}</Col> : c => c;\n  const child = children || (\n    <Form.Control ref={formData} defaultValue={formData.default()} {...props} />\n  );\n  return wrap(\n    <>\n      {child}\n      <Form.Control.Feedback type=\"invalid\">{feedback}</Form.Control.Feedback>\n    </>\n  );\n};\n\nFormControl.propTypes = {\n  formData: PropTypes.shape({ current: PropTypes.any, init: PropTypes.any }),\n  feedback: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  inline: PropTypes.number,\n};\n\nFormControl.defaultProps = {\n  inline: 0,\n};\n","import React from 'react';\nimport SplitButton from '../components/SplitButton/SplitButton';\nimport PropTypes from 'prop-types';\nimport { useDictionary } from '../language';\nimport { Size, Variant } from '../bootstrap';\nimport Icon from '../components/Icon/Icon';\n\nexport default function SaveButton(props) {\n  const { buttons } = useDictionary();\n\n  return (\n    <SplitButton\n      icon={Icon.Save}\n      size={Size.sm}\n      variant={Variant.primary}\n      type=\"submit\"\n      {...props}\n    >\n      {buttons.save}\n    </SplitButton>\n  );\n}\n\nSaveButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport SplitButton from '../components/SplitButton/SplitButton';\nimport PropTypes from 'prop-types';\nimport { useDictionary } from '../language';\nimport Icon from '../components/Icon/Icon';\nimport { Size, Variant } from '../bootstrap';\n\nexport default function CancelButton({ onClick }) {\n  const { buttons } = useDictionary();\n  return (\n    <SplitButton\n      variant={Variant.secondary}\n      icon={Icon.Trash}\n      size={Size.sm}\n      onClick={onClick}\n      type=\"button\"\n    >\n      {buttons.cancel}\n    </SplitButton>\n  );\n}\n\nCancelButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n","import React, { useState, useRef, useEffect } from 'react';\nimport SaveButton from './SaveButton';\nimport CancelButton from './CancelButton';\nimport { Modal, Form } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport function FormInModal({ title, onHide, onSave, formData, children }) {\n  const [validated, setValidated] = useState(false);\n  const form = useRef();\n\n  useEffect(() => {\n    if (form.current) {\n      const firstInput = form.current.getElementsByTagName('input')[0];\n      if (firstInput) {\n        firstInput.focus();\n      }\n    }\n  }, []);\n\n  function handleSave(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    const isValid = form.current.checkValidity();\n    setValidated(true);\n    if (!isValid) {\n      return;\n    }\n    if (formData.changed()) {\n      const input = formData.value();\n      onSave(input);\n    }\n    onHide();\n    setValidated(false);\n  }\n\n  return (\n    <Form validated={validated} ref={form} onSubmit={handleSave}>\n      <Modal.Header\n        closeButton\n        className=\"m-0 font-weight-bold text-primary bg-light\"\n      >\n        <Modal.Title>{title}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>{children}</Modal.Body>\n      <Modal.Footer className=\" bg-light\">\n        <CancelButton onClick={onHide} />\n        <SaveButton onClick={handleSave} />\n      </Modal.Footer>\n    </Form>\n  );\n}\n\nFormInModal.propTypes = {\n  children: PropTypes.node.isRequired,\n  onHide: PropTypes.func.isRequired,\n  onSave: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  formData: PropTypes.any.isRequired,\n};\n","import React from 'react';\nimport TopbarContextSwitcher from './sbadmin2/Topbar/TopbarContextSwitcher';\nimport { useBudget } from './gql/budget';\nimport Spinner from './sbadmin2/utilities/Spinner';\nimport { useDictionary } from './sbadmin2';\n\nexport default function TopbarBudgetSwitcher() {\n  const {\n    selectedBudget,\n    setSelectedBudget,\n    budgets,\n    loading,\n    error,\n  } = useBudget();\n  const { topbar } = useDictionary();\n  const value = loading ? (\n    <Spinner size=\"sm\" variant=\"secondary\" />\n  ) : error ? (\n    <i className=\"fas fa-fw fa-exclamation-triangle text-secondary\" />\n  ) : (\n    selectedBudget && selectedBudget.name\n  );\n  const onChange = id => {\n    const budget = budgets.find(b => b.id === id);\n    setSelectedBudget(budget);\n  };\n  return (\n    <TopbarContextSwitcher\n      label={topbar.budgetLabel}\n      value={value}\n      onChange={onChange}\n      allowedValues={budgets.map(b => ({ id: b.id, label: b.name }))}\n    />\n  );\n}\n","import React, { useState, useEffect, useContext } from 'react';\nimport createAuth0Client from '@auth0/auth0-spa-js';\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n  window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext();\nexport const useAuth0 = () => useContext(Auth0Context);\nexport const Auth0Provider = ({\n  children,\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n  returnTo,\n  ...initOptions\n}) => {\n  const [isAuthenticated, setIsAuthenticated] = useState();\n  const [user, setUser] = useState();\n  const [token, setToken] = useState();\n  const [auth0Client, setAuth0] = useState();\n  const [loading, setLoading] = useState(true);\n  const [popupOpen, setPopupOpen] = useState(false);\n\n  useEffect(() => {\n    const initAuth0 = async () => {\n      const auth0FromHook = await createAuth0Client(initOptions);\n      setAuth0(auth0FromHook);\n\n      if (window.location.search.includes('code=')) {\n        const { appState } = await auth0FromHook.handleRedirectCallback();\n        onRedirectCallback(appState);\n      }\n\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\n\n      setIsAuthenticated(isAuthenticated);\n\n      if (isAuthenticated) {\n        const user = await auth0FromHook.getUser();\n        setUser(user);\n\n        const token = await auth0FromHook.getTokenSilently();\n        setToken(token);\n      }\n\n      setLoading(false);\n    };\n    initAuth0();\n    // eslint-disable-next-line\n  }, []);\n\n  const loginWithPopup = async (params = {}) => {\n    setPopupOpen(true);\n    try {\n      await auth0Client.loginWithPopup(params);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setPopupOpen(false);\n    }\n    const user = await auth0Client.getUser();\n    setUser(user);\n    setIsAuthenticated(true);\n  };\n\n  const handleRedirectCallback = async () => {\n    setLoading(true);\n    await auth0Client.handleRedirectCallback();\n    const user = await auth0Client.getUser();\n    setLoading(false);\n    setIsAuthenticated(true);\n    setUser(user);\n  };\n  return (\n    <Auth0Context.Provider\n      value={{\n        token,\n        isAuthenticated,\n        user,\n        loading,\n        popupOpen,\n        loginWithPopup,\n        handleRedirectCallback,\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\n        logout: (...p) => auth0Client.logout({ ...p, returnTo }),\n        getTokenScopes: async (...p) => {\n          const token = await auth0Client.getTokenSilently(...p);\n          const claimsString = token.split('.')[1];\n          const claims = JSON.parse(atob(claimsString));\n          const scope = claims.scope.split(' ');\n          return scope;\n        },\n      }}\n    >\n      {children}\n    </Auth0Context.Provider>\n  );\n};\n","import React from 'react';\nimport TemplateTopbar from './sbadmin2/Topbar/Topbar';\nimport { TopbarMenu } from './sbadmin2/Topbar/TopbarMenu';\nimport TopbarUser from './sbadmin2/Topbar/TopbarUser';\nimport TopbarBudgetSwitcher from './TopbarBudgetSwitcher';\nimport { useAuth0 } from '../react-auth0-spa';\nimport { useDictionary } from './sbadmin2/language';\n\nexport default function Topbar() {\n  const { user, logout } = useAuth0();\n  const { topbar } = useDictionary();\n  return (\n    <TemplateTopbar\n      faIconContextMinified=\"search\"\n      renderContext={() => <TopbarBudgetSwitcher />}\n      renderUser={() => (\n        <TopbarUser\n          name={user.name}\n          pictureUrl={user.picture}\n          logout={logout}\n        />\n      )}\n      renderMenus={() => (\n        <>\n          <TopbarMenu\n            name={topbar.alertsLabel}\n            faIcon=\"bell\"\n            counter={0}\n          ></TopbarMenu>\n          <TopbarMenu\n            name={topbar.messagesLabel}\n            faIcon=\"envelope\"\n            counter={0}\n          ></TopbarMenu>\n        </>\n      )}\n    />\n  );\n}\n","export const sidebarConfig = ({ sidebar }) => [\n  {\n    entries: [\n      {\n        name: sidebar.pages.dashboard,\n        faIcon: 'receipt',\n        to: '/',\n      },\n    ],\n  },\n  {\n    name: sidebar.sections.currentMonth,\n    entries: [\n      {\n        name: sidebar.pages.expenses,\n        faIcon: 'receipt',\n        to: '/expenses',\n      },\n      {\n        name: sidebar.pages.transfers,\n        faIcon: 'exchange-alt',\n        to: '/transfers',\n      },\n      {\n        name: sidebar.pages.plans,\n        faIcon: 'map-marked-alt',\n        to: '/plans',\n      },\n    ],\n  },\n  {\n    name: sidebar.sections.budget,\n    entries: [\n      {\n        name: sidebar.pages.accounts,\n        faIcon: 'credit-card',\n        to: '/accounts',\n      },\n      {\n        name: sidebar.pages.envelopes,\n        faIcon: 'envelope-open-text',\n        to: '/envelopes',\n      },\n    ],\n  },\n];\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nexport default function RefreshButton({ className, ...props }) {\n  const classes = classnames('btn', 'btn-sm', 'btn-secondary', className);\n  return (\n    <button type=\"button\" className={classes} {...props}>\n      <i className=\"fas fa-fw fa-sync-alt\" />\n    </button>\n  );\n}\n\nRefreshButton.propTypes = {\n  className: PropTypes.string,\n};\n","import Spinner from '../sbadmin2/utilities/Spinner';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ErrorMessageList({ errorMessage, subErrors }) {\n  return (\n    <>\n      {errorMessage}\n      <ul>\n        {subErrors.map((e, idx) => (\n          <li key={idx}>{e}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\nfunction ErrorMessage({ error }) {\n  const subErrors = error.networkError\n    ? error.networkError.result.errors\n    : error.graphQLErrors.map(e => `${e.path.join('.')}: ${e.message}`);\n  return (\n    <div className=\"text-danger\">\n      <i className=\"fas fa-fw fa-exclamation-triangle\" />\n      <ErrorMessageList errorMessage={error.message} subErrors={subErrors} />\n    </div>\n  );\n}\n\nexport function WithQuery({ query, showError, children, ...props }) {\n  const { loading, error } = query;\n  return loading ? (\n    <Spinner {...props} />\n  ) : error ? (\n    showError && <ErrorMessage error={error} />\n  ) : (\n    children(query)\n  );\n}\n\nWithQuery.propTypes = {\n  children: PropTypes.func.isRequired,\n  query: PropTypes.shape({\n    loading: PropTypes.bool.isRequired,\n    error: PropTypes.any,\n  }),\n  showError: PropTypes.bool,\n};\n\nWithQuery.defaultProps = {\n  showError: true,\n};\n","import React from 'react';\nimport RefreshButton from '../sbadmin2/utilities/RefreshButton';\nimport { WithQuery } from '../gql/WithQuery';\nimport PropTypes from 'prop-types';\nimport { TablePanel } from '../sbadmin2';\n\nexport function QueryTablePanel({ query, buttons, getData, ...props }) {\n  return (\n    <WithQuery query={query} size=\"sm\" showError={false}>\n      {({ refetch, data }) => (\n        <TablePanel\n          headerButtons={\n            <>\n              <RefreshButton onClick={() => refetch()} className=\"mr-1\" />\n              {buttons}\n            </>\n          }\n          data={getData(data)}\n          {...props}\n        />\n      )}\n    </WithQuery>\n  );\n}\n\nQueryTablePanel.propTypes = {\n  buttons: PropTypes.node,\n  getData: PropTypes.func.isRequired,\n  query: PropTypes.shape({\n    data: PropTypes.any,\n    refetch: PropTypes.func,\n  }).isRequired,\n};\n","import * as math from 'mathjs';\n\nexport default class Amount {\n  static parse(string) {\n    if (string === null || string === '') {\n      return null;\n    }\n    const number = math.evaluate(string.replace(/,/, '.'));\n    return Math.round(number * 100);\n  }\n\n  static isValid(string) {\n    if (string === null || string === '') {\n      return true;\n    }\n\n    try {\n      math.parse(string.replace(/,/, '.'));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  static zero() {\n    return 0;\n  }\n\n  static format(amount, kSeparator = true) {\n    if (amount === null) {\n      return null;\n    }\n    const fixed = (amount / 100).toFixed(2);\n    if (!kSeparator) {\n      return fixed;\n    }\n    var parts = fixed.split('.');\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\n    return parts.join('.');\n  }\n}\n","import React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport default function CreateButton({ className, ...props }) {\n  const classes = classnames('btn', 'btn-sm', 'btn-primary', className);\n  return (\n    <button type=\"button\" className={classes} {...props}>\n      <i className=\"fas fa-fw fa-plus\" />\n    </button>\n  );\n}\n\nCreateButton.propTypes = {\n  className: PropTypes.any,\n};\n","import { useState, useRef } from 'react';\n\nfunction simpleFormData({ $init, $process, $default }, getRoot) {\n  const process = $process || (v => v);\n  const formData = { current: null };\n  const _default =\n    typeof $default === 'function' ? () => $default(getRoot()) : () => $default;\n\n  formData.value = () => {\n    if (formData.current === null) {\n      return null;\n    }\n    return process(formData.current.value);\n  };\n\n  formData.changed = () => {\n    if (formData.current === null) {\n      return $init !== null;\n    }\n    return formData.current.value !== $init;\n  };\n\n  formData.default = () =>\n    $init !== null && $init !== undefined ? $init : _default();\n\n  formData.init = () => $init;\n\n  return formData;\n}\n\nfunction arrayFormData({ $model, $init }, rerender, getRoot) {\n  const formData = $init.map(v => createFormData($model(v), rerender), getRoot);\n  formData._originalPush = formData.push;\n\n  formData.value = () => {\n    return formData.map(v => v.value());\n  };\n\n  formData.changed = () => {\n    return formData.length !== $init.length || formData.some(v => v.changed());\n  };\n\n  formData.push = v => {\n    formData._originalPush(createFormData($model(v), rerender));\n    rerender();\n  };\n\n  formData.removeAt = idx => {\n    formData.splice(idx, 1);\n    rerender();\n  };\n\n  return formData;\n}\n\nfunction compositeFormData({ $includeAllValues, ...model }, rerender, getRoot) {\n  const formData = Object.keys(model).reduce(\n    (acc, key) => ({\n      ...acc,\n      [key]: createFormData(model[key], rerender, getRoot),\n    }),\n    {}\n  );\n\n  formData.changed = () => {\n    return Object.keys(model).some(k => formData[k].changed());\n  };\n\n  formData.value = () => {\n    return Object.keys(model).reduce((acc, key) => {\n      if (!formData[key].changed() && !$includeAllValues) {\n        return acc;\n      }\n      return { ...acc, [key]: formData[key].value() };\n    }, {});\n  };\n\n  return formData;\n}\n\nfunction createFormData(model, rerender, getRoot) {\n  if (Object.prototype.hasOwnProperty.call(model, '$init')) {\n    if (Object.prototype.hasOwnProperty.call(model, '$model')) {\n      return arrayFormData(model, rerender, getRoot);\n    }\n    return simpleFormData(model, getRoot);\n  }\n  return compositeFormData(model, rerender, getRoot);\n}\n\nexport function useFormData(model) {\n  const [, setValue] = useState(false);\n  const rerender = () => setValue(v => !v);\n  let formData,\n    getRoot = () => formData;\n  formData = createFormData(model, rerender, getRoot);\n  const ref = useRef(formData);\n  return ref.current;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormControl, FormInModal, useDictionary } from '../sbadmin2';\nimport { useFormData } from '../sbadmin2/utilities/useFormData';\n\nexport function AccountModal({ init, ...props }) {\n  const { accounts } = useDictionary();\n  const formData = useFormData({\n    name: { $init: init.name },\n  });\n  return (\n    <FormInModal formData={formData} {...props}>\n      <FormControl\n        label={accounts.modal.labels.name}\n        inline={10}\n        formData={formData.name}\n        feedback=\"Provide name\"\n      />\n    </FormInModal>\n  );\n}\n\nAccountModal.propTypes = {\n  init: PropTypes.shape({ name: PropTypes.string }).isRequired,\n};\n","import React from 'react';\nimport { OpenModalButton } from '../sbadmin2';\nimport CreateButton from '../sbadmin2/utilities/CreateButton';\nimport { useCreateAccount } from '../gql/accounts';\nimport { useDictionary } from '../sbadmin2';\nimport { AccountModal } from './AccountModal';\n\nexport function CreateAccountButton() {\n  const [createAccount] = useCreateAccount();\n  const { accounts } = useDictionary();\n  return (\n    <OpenModalButton\n      button={props => <CreateButton {...props} />}\n      modalContent={props => (\n        <AccountModal\n          init={{ name: '' }}\n          title={accounts.modal.createTitle}\n          onSave={createAccount}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n","import React from 'react';\nimport { ClickableIcon, Icon, OpenModalButton } from '../sbadmin2';\nimport { useUpdateAccount } from '../gql/accounts';\nimport { useDictionary } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\nimport { AccountModal } from './AccountModal';\nimport './UpdateAccountButton.css';\n\nexport function UpdateAccountButton({ account }) {\n  const [updateAccount] = useUpdateAccount();\n  const { accounts } = useDictionary();\n  return (\n    <OpenModalButton\n      button={props => (\n        <ClickableIcon\n          className=\"accounts__update-button\"\n          icon={Icon.Edit}\n          variant={Variant.primary}\n          {...props}\n        />\n      )}\n      modalContent={props => (\n        <AccountModal\n          init={account}\n          title={accounts.modal.editTitle}\n          onSave={input => updateAccount(account.id, input)}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useGetAccounts } from '../gql/accounts';\nimport { QueryTablePanel } from '../gql/QueryTablePanel';\nimport Amount from '../../model/Amount';\nimport { CreateAccountButton } from './CreateAccountButton';\nimport { UpdateAccountButton } from './UpdateAccountButton';\n\nconst columns = [\n  { dataField: 'name', sort: true },\n  {\n    dataField: 'balance',\n    align: 'right',\n    headerAlign: 'right',\n    formatter: Amount.format,\n  },\n  {\n    dataField: 'actions',\n    isDummyColumn: true,\n    formatter: (cell, row) => (\n      <span>\n        <UpdateAccountButton account={row} />\n        <span style={{ cursor: 'pointer' }}>\n          <i className=\"fas fa-archive fa-fw\" />\n        </span>\n      </span>\n    ),\n    style: {\n      whiteSpace: 'nowrap',\n      width: '1%',\n    },\n  },\n];\n\nconst defaultSorted = [\n  {\n    dataField: 'name',\n    order: 'asc',\n  },\n];\n\nexport function AccountsTablePanel({ onSelectAcount }) {\n  const query = useGetAccounts();\n\n  const selectRow = {\n    mode: 'radio',\n    clickToSelect: true,\n    hideSelectColumn: true,\n    classes: 'text-white bg-primary selected',\n    onSelect: account => onSelectAcount(account),\n  };\n\n  return (\n    <QueryTablePanel\n      query={query}\n      getData={data => data.accounts}\n      buttons={<CreateAccountButton />}\n      columns={columns}\n      keyField=\"id\"\n      readTitle={d => d.accounts.table.title}\n      readColumnNames={d => d.accounts.table.columns}\n      selectRow={selectRow}\n      defaultSorted={defaultSorted}\n    />\n  );\n}\n\nAccountsTablePanel.propTypes = {\n  onSelectAcount: PropTypes.func.isRequired,\n  selectedAccountID: PropTypes.string,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ClickableIcon, Icon } from '../sbadmin2';\nimport { useDeleteExpense } from '../gql/expenses';\nimport { Variant } from '../sbadmin2/bootstrap';\n\nexport function DeleteExpenseButton({ expense }) {\n  const [deleteExpense] = useDeleteExpense();\n  return (\n    <ClickableIcon\n      icon={Icon.Trash}\n      variant={Variant.danger}\n      onClick={() => deleteExpense(expense.id)}\n    />\n  );\n}\n\nDeleteExpenseButton.propTypes = {\n  expense: PropTypes.shape({ id: PropTypes.any }).isRequired,\n};\n","export default class Day {\n  constructor(year, month, day) {\n    this.year = year;\n    this.month = month;\n    this.day = day;\n  }\n\n  static fromDate(date) {\n    return new Date(date.getYear(), date.getMonth(), date.getDate());\n  }\n\n  format() {\n    return `${this.year}-${String(this.month).padStart(2, '0')}-${String(\n      this.day\n    ).padStart(2, '0')}`;\n  }\n}\n","import Day from './Day';\n\nconst monthNames = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nexport default class Month {\n  constructor(year, month) {\n    this.year = year;\n    this.month = month;\n  }\n  static parse(string) {\n    const [year, month] = string.split('-');\n    return new Month(Number(year), Number(month));\n  }\n\n  firstDay() {\n    return new Day(this.year, this.month, 1);\n  }\n\n  lastDay() {\n    const date = new Date(this.year, this.month, 0);\n    return new Day(this.year, this.month, date.getDate());\n  }\n\n  pretty() {\n    return `${monthNames[this.month - 1]} ${this.year}`;\n  }\n}\n","import React, { useRef, useState, useEffect } from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport './Combobox.css';\n\nexport function Combobox({\n  disabled,\n  allowedValues,\n  _ref,\n  defaultValue,\n  className,\n  required,\n}) {\n  const defaultValueObject = allowedValues.find(v => v.id === defaultValue);\n  const [show, setShow] = useState(false);\n  const [filter, setFilter] = useState(\n    defaultValueObject ? defaultValueObject.label : ''\n  );\n  const [selectedIdx, setSelectedIdx] = useState(0);\n  const menuRef = useRef();\n  const classNames = classnames('combobox', 'input-group', className);\n  const filtered = allowedValues.filter(v =>\n    v.label.toLowerCase().includes(filter.toLowerCase())\n  );\n  const wrapperRef = useRef();\n\n  useEffect(() => {\n    _ref.current = { value: defaultValue };\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    function onClickOutside(event) {\n      if (!wrapperRef.current || wrapperRef.current.contains(event.target)) {\n        return;\n      }\n\n      setShow(false);\n      const selected = allowedValues.find(v => v.label === filter);\n      if (!selected) {\n        setFilter('');\n      }\n    }\n    document.addEventListener('mousedown', onClickOutside);\n    return () => document.removeEventListener('mousedown', onClickOutside);\n  });\n\n  function onClick(id) {\n    const selectedLabel = allowedValues.find(v => v.id === id).label;\n    setShow(false);\n    setFilter(selectedLabel);\n    _ref.current = { value: id };\n  }\n\n  function onInputChange(e) {\n    const value = e.target.value;\n    setShow(true);\n    setFilter(value);\n    setSelectedIdx(0);\n    const selected = allowedValues.find(v => v.label === value);\n    if (selected) {\n      _ref.current = { value: selected.id };\n    }\n  }\n\n  function onKeyDown(e) {\n    if (e.keyCode === 40) {\n      // up\n      e.preventDefault();\n      if (selectedIdx >= filtered.length - 1) {\n        setSelectedIdx(0);\n      } else {\n        setSelectedIdx(v => v + 1);\n      }\n    } else if (e.keyCode === 38) {\n      // down\n      e.preventDefault();\n      if (selectedIdx <= 0) {\n        setSelectedIdx(filtered.length - 1);\n      } else {\n        setSelectedIdx(v => v - 1);\n      }\n    } else if (e.keyCode === 13 && show) {\n      // enter\n      e.preventDefault();\n      onClick(filtered[selectedIdx].id);\n    } else if (e.keyCode === 9 && show) {\n      // tab\n      onClick(filtered[selectedIdx].id);\n    }\n  }\n\n  return (\n    <div className={classNames} ref={wrapperRef}>\n      <input\n        className=\"form-control\"\n        value={filter}\n        type=\"text\"\n        onChange={onInputChange}\n        onKeyDown={onKeyDown}\n        disabled={disabled}\n        required={required}\n      />\n      <button\n        className=\"btn btn-secondary dropdown-toggle dropdown-toggle-split no-arrow\"\n        data-toggle=\"dropdown\"\n        data-reference=\"parent\"\n        data-flip=\"false\"\n        style={{\n          maxWidth: '2rem',\n          borderTopLeftRadius: 0,\n          borderBottomLeftRadius: 0,\n          margin: -1,\n        }}\n        tabIndex={-1}\n        disabled={disabled}\n        type=\"button\"\n      />\n      <ul\n        ref={menuRef}\n        role=\"menu\"\n        className={classnames('dropdown-menu', { show })}\n        style={{\n          maxHeight: '200px',\n          overflowY: 'auto',\n        }}\n      >\n        {filtered.map((v, idx) => (\n          <li\n            className={`dropdown-item ${idx === selectedIdx ? 'active' : ''}`}\n            onClick={() => onClick(v.id)}\n            key={v.id}\n          >\n            {v.label}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nCombobox.propTypes = {\n  _ref: PropTypes.shape({ current: PropTypes.any }),\n  allowedValues: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      label: PropTypes.string.isRequired,\n    })\n  ),\n  className: PropTypes.any,\n  defaultValue: PropTypes.string,\n  disabled: PropTypes.bool,\n  required: PropTypes.bool,\n};\n","import React from 'react';\nimport { Form, Row, Col } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport function InlineFormControl({ label, size, feedback, children }) {\n  return (\n    <Form.Group as={Row}>\n      <Form.Label column>{label}</Form.Label>\n      <Col sm={size}>\n        {children}\n        {feedback && (\n          <Form.Control.Feedback type=\"invalid\">\n            {feedback}\n          </Form.Control.Feedback>\n        )}\n      </Col>\n    </Form.Group>\n  );\n}\n\nInlineFormControl.propTypes = {\n  children: PropTypes.element,\n  feedback: PropTypes.string,\n  label: PropTypes.string.isRequired,\n  size: PropTypes.number,\n};\n\nInlineFormControl.defaultProps = {\n  inline: 0,\n};\n","import gql from 'graphql-tag';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { useBudget } from './budget';\n\nconst GET_CATEGORIES = gql`\n  query GetCategories($budgetID: ID!) {\n    categories(budgetID: $budgetID) {\n      id\n      name\n      envelope {\n        id\n        name\n      }\n      description\n    }\n  }\n`;\n\nconst CREATE_CATEGORY = gql`\n  mutation CreateCategory($budgetID: ID!, $input: CategoryInput!) {\n    createCategory(budgetID: $budgetID, in: $input) {\n      id\n      name\n      envelope {\n        id\n        name\n      }\n      description\n    }\n  }\n`;\n\nconst UPDATE_CATEGORY = gql`\n  mutation UpdateCategory($budgetID: ID!, $id: ID!, $input: CategoryUpdate!) {\n    updateCategory(budgetID: $budgetID, id: $id, in: $input) {\n      id\n      name\n      envelope {\n        id\n        name\n      }\n      description\n    }\n  }\n`;\n\nexport function useCreateCategory() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(CREATE_CATEGORY, {\n    update: (cache, { data: { createCategory } }) => {\n      const { categories } = cache.readQuery({\n        query: GET_CATEGORIES,\n        variables: { budgetID: selectedBudget.id },\n      });\n      cache.writeQuery({\n        query: GET_CATEGORIES,\n        variables: { budgetID: selectedBudget.id },\n        data: {\n          categories: categories.concat([createCategory]),\n        },\n      });\n    },\n  });\n  const wrapper = input => {\n    mutation({ variables: { budgetID: selectedBudget.id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useUpdateCategory() {\n  const { selectedBudget } = useBudget();\n  const [mutation, ...rest] = useMutation(UPDATE_CATEGORY);\n  const wrapper = (id, input) => {\n    mutation({ variables: { budgetID: selectedBudget.id, id, input } });\n  };\n  return [wrapper, ...rest];\n}\n\nexport function useGetCategories() {\n  const { selectedBudget } = useBudget();\n  return useQuery(GET_CATEGORIES, {\n    variables: { budgetID: selectedBudget.id },\n  });\n}\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from 'react-bootstrap';\nimport Amount from '../../model/Amount';\n\nexport function AmountInput({ placeholder, formData }) {\n  const [isValid, setIsValid] = useState(false);\n  const [value, setValue] = useState(formData.default() || '');\n  useEffect(() => {\n    formData.current = { value };\n  }, [formData, value]);\n  function onChange(e) {\n    const newValue = e.target.value;\n    setValue(newValue);\n    setIsValid(Amount.isValid(newValue));\n  }\n  return (\n    <Form.Control\n      required\n      type=\"text\"\n      placeholder={placeholder}\n      value={value}\n      onChange={onChange}\n      isValid={isValid}\n    />\n  );\n}\n\nAmountInput.propTypes = {\n  formData: PropTypes.shape({\n    default: PropTypes.func.isRequired,\n    current: PropTypes.shape({ value: PropTypes.string }),\n  }),\n  placeholder: PropTypes.string,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ClickableIcon, Icon } from '../sbadmin2';\nimport { useGetCategories } from '../gql/categories';\nimport { WithQuery } from '../gql/WithQuery';\nimport { Form, Row, Col } from 'react-bootstrap';\nimport { useDictionary } from '../sbadmin2';\nimport { Combobox } from '../sbadmin2/utilities/Combobox';\nimport { Variant, Size } from '../sbadmin2/bootstrap';\nimport { AmountInput } from './AmountInput';\n\nexport function CategoriesInput({ formData }) {\n  const query = useGetCategories();\n  const { expenses } = useDictionary();\n  return (\n    <WithQuery query={query}>\n      {({ data }) => (\n        <>\n          <small className=\"d-flex align-items-center mb-3\">\n            {expenses.modal.labels.categories}\n            <ClickableIcon\n              icon={Icon.Plus}\n              variant={Variant.primary}\n              size={Size.sm}\n              onClick={() =>\n                formData.push({\n                  category: { id: null },\n                  amount: null,\n                })\n              }\n              type=\"button\"\n            />\n          </small>\n          {formData.map((categoryFormData, idx) => (\n            <Form.Group\n              as={Row}\n              key={categoryFormData.categoryID.init() || idx}\n              className=\"d-flex align-items-center\"\n            >\n              <Col sm={6}>\n                <Combobox\n                  _ref={categoryFormData.categoryID}\n                  defaultValue={categoryFormData.categoryID.init()}\n                  allowedValues={data.categories.map(({ id, name }) => ({\n                    id,\n                    label: name,\n                  }))}\n                  required\n                />\n              </Col>\n              <Col className=\"pr-0\">\n                <AmountInput\n                  placeholder={expenses.modal.labels.amount}\n                  formData={categoryFormData.amount}\n                />\n              </Col>\n              <Col sm={1} className=\"px-0\">\n                <ClickableIcon\n                  icon=\"minus\"\n                  variant=\"danger\"\n                  size=\"sm\"\n                  onClick={() => formData.removeAt(idx)}\n                  type=\"button\"\n                />\n              </Col>\n            </Form.Group>\n          ))}\n        </>\n      )}\n    </WithQuery>\n  );\n}\n\nCategoriesInput.propTypes = {\n  formData: PropTypes.array.isRequired,\n};\n","import React from 'react';\nimport { FormControl } from '../sbadmin2/utilities/FormControl';\nimport { FormInModal } from '../sbadmin2/utilities/FormInModal';\nimport { useFormData } from '../sbadmin2/utilities/useFormData';\nimport Amount from '../../model/Amount';\nimport { useGetAccounts } from '../gql/accounts';\nimport { WithQuery } from '../gql/WithQuery';\nimport { useBudget } from '../gql/budget';\nimport Month from '../../model/Month';\nimport { useDictionary } from '../sbadmin2';\nimport { Combobox } from '../sbadmin2/utilities/Combobox';\nimport { InlineFormControl } from '../sbadmin2/utilities/InlineFormControl';\nimport { CategoriesInput } from './CategoriesInput';\n\nexport function ExpenseModal({ account, init, ...props }) {\n  const { selectedBudget } = useBudget();\n  const { expenses } = useDictionary();\n  const accountsQuery = useGetAccounts();\n  const formData = useFormData({\n    title: { $init: init.title },\n    date: { $init: init.date },\n    accountID: {\n      $init: init.account.id,\n      $default: account && account.id,\n    },\n    categories: {\n      $init: init.categories,\n      $model: c => ({\n        categoryID: { $init: c.category.id },\n        amount: {\n          $init: Amount.format(c.amount, false),\n          $process: Amount.parse,\n        },\n        $includeAllValues: true,\n      }),\n    },\n  });\n  const month = Month.parse(selectedBudget.currentMonth.month);\n  const first = month.firstDay();\n  const last = month.lastDay();\n\n  return (\n    <FormInModal formData={formData} {...props}>\n      <WithQuery query={accountsQuery}>\n        {({ data: accountsData }) => (\n          <>\n            <FormControl\n              label={expenses.modal.labels.title}\n              inline={10}\n              formData={formData.title}\n              feedback=\"Provide name\"\n              required\n            />\n            <FormControl\n              label={expenses.modal.labels.date}\n              inline={10}\n              formData={formData.date}\n              feedback=\"Provide date\"\n              type=\"date\"\n              required\n              min={first.format()}\n              max={last.format()}\n            />\n            <InlineFormControl label={expenses.modal.labels.account} size={9}>\n              <Combobox\n                _ref={formData.accountID}\n                defaultValue={formData.accountID.default()}\n                allowedValues={accountsData.accounts.map(({ id, name }) => ({\n                  id,\n                  label: name,\n                }))}\n                disabled={!!account}\n                required\n              />\n            </InlineFormControl>\n            <CategoriesInput formData={formData.categories} />\n          </>\n        )}\n      </WithQuery>\n    </FormInModal>\n  );\n}\n","import React from 'react';\nimport { ClickableIcon, Icon, OpenModalButton } from '../sbadmin2';\nimport { useUpdateExpense } from '../gql/expenses';\nimport { useDictionary } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\nimport { ExpenseModal } from './ExpenseModal';\nexport function UpdateExpenseButton({ expense }) {\n  const [updateExpense] = useUpdateExpense();\n  const { expenses } = useDictionary();\n  return (\n    <OpenModalButton\n      button={props => (\n        <ClickableIcon icon={Icon.Edit} variant={Variant.primary} {...props} />\n      )}\n      modalContent={props => (\n        <ExpenseModal\n          init={expense}\n          title={expenses.modal.editTitle}\n          onSave={input => updateExpense(expense.id, input)}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n","import React from 'react';\nimport { QueryTablePanel } from '../gql/QueryTablePanel';\nimport { useGetCurrentExpenses } from '../gql/expenses';\nimport Amount from '../../model/Amount';\nimport { DeleteExpenseButton } from './DeleteExpenseButton';\nimport { UpdateExpenseButton } from './UpdateExpenseButton';\n\nconst columns = [\n  { dataField: 'title' },\n  { dataField: 'date', sort: true },\n  {\n    dataField: 'account',\n    formatter: a => a.name,\n  },\n  {\n    dataField: 'totalAmount',\n    formatter: Amount.format,\n    align: 'right',\n    headerAlign: 'right',\n  },\n  {\n    dataField: 'actions',\n    isDummyColumn: true,\n    formatter: (cell, row) => (\n      <span>\n        <UpdateExpenseButton expense={row} />\n        <DeleteExpenseButton expense={row} />\n      </span>\n    ),\n    style: {\n      whiteSpace: 'nowrap',\n      width: '1%',\n    },\n  },\n];\n\nconst rowClasses = (row, rowIndex) => {\n  return rowIndex % 2 === 0 && 'table-striped';\n};\n\nconst expandRow = {\n  className: 'background-color-white',\n  renderer: row => (\n    <table className=\"table table-sm mb-0\">\n      <tbody>\n        {row.categories.map((category, idx) => (\n          <tr key={idx}>\n            <td className=\"pl-3\">{category.category.name}</td>\n            <td>{Amount.format(category.amount)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  ),\n};\n\nconst defaultSorted = [\n  {\n    dataField: 'date',\n    order: 'desc',\n  },\n];\n\nexport function ExpensesTablePanel({\n  readTitle,\n  createButton,\n  accountFilter,\n  ...props\n}) {\n  const query = useGetCurrentExpenses();\n\n  let filters = [];\n  if (accountFilter) {\n    filters.push(row => row.account.id === accountFilter);\n  }\n\n  return (\n    <QueryTablePanel\n      {...props}\n      query={query}\n      getData={d => d.budget.currentMonth.expenses}\n      buttons={createButton}\n      columns={columns}\n      keyField=\"id\"\n      expandRow={expandRow}\n      rowClasses={rowClasses}\n      striped={false}\n      readTitle={readTitle}\n      readColumnNames={d => d.expenses.table.columns}\n      defaultSorted={defaultSorted}\n      filters={filters}\n    />\n  );\n}\n","import React from 'react';\nimport { OpenModalButton } from '../sbadmin2';\nimport CreateButton from '../sbadmin2/utilities/CreateButton';\nimport { useCreateExpense } from '../gql/expenses';\nimport { useDictionary } from '../sbadmin2';\nimport { ExpenseModal } from './ExpenseModal';\n\nexport function CreateExpenseButton({ account }) {\n  const [createExpense] = useCreateExpense();\n  const { expenses } = useDictionary();\n\n  return (\n    <OpenModalButton\n      button={props => <CreateButton {...props} />}\n      modalContent={props => (\n        <ExpenseModal\n          init={{\n            name: null,\n            account: {},\n            date: null,\n            categories: [],\n          }}\n          account={account}\n          title={expenses.modal.createTitle}\n          onSave={createExpense}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n","import React, { useState, createContext, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport Panel from '../sbadmin2/components/Panel/Panel';\nimport { Collapse } from 'react-bootstrap';\nimport { Icon } from '../sbadmin2';\nimport './CollapsiblePanel.css';\n\nconst CollapsibleContext = createContext();\n\nexport function CollapsiblePanel({ initialyShown, ...props }) {\n  const [show, setShow] = useState(initialyShown);\n  return (\n    <CollapsibleContext.Provider\n      value={{ show, toggle: () => setShow(s => !s) }}\n    >\n      <Panel {...props} />\n    </CollapsibleContext.Provider>\n  );\n}\n\nCollapsiblePanel.propTypes = {\n  initialyShown: PropTypes.bool,\n};\nCollapsiblePanel.defaultProps = {\n  initialyShown: false,\n};\n\nfunction CollapsiblePanelHeader({ className, ...props }) {\n  const { toggle } = useContext(CollapsibleContext);\n  const classNames = classnames('collapsible-panel__header', className);\n  return (\n    <Panel.Header onClick={() => toggle()} className={classNames} {...props} />\n  );\n}\nCollapsiblePanelHeader.propTypes = {\n  className: PropTypes.string,\n};\nCollapsiblePanel.Header = CollapsiblePanelHeader;\n\nfunction CollapsiblePanelTitle({ children, ...props }) {\n  const { show } = useContext(CollapsibleContext);\n  return (\n    <Panel.Title {...props}>\n      <Icon\n        icon={show ? Icon.ChevronUp : Icon.ChevronDown}\n        className=\"text-secondary mr-2\"\n      />\n      {children}\n    </Panel.Title>\n  );\n}\nCollapsiblePanelTitle.propTypes = {\n  children: PropTypes.node,\n};\nCollapsiblePanel.Title = CollapsiblePanelTitle;\n\nfunction CollapsiblePanelBody(props) {\n  const { show } = useContext(CollapsibleContext);\n  return (\n    <Collapse in={show}>\n      <Panel.Body {...props} />\n    </Collapse>\n  );\n}\nCollapsiblePanel.Body = CollapsiblePanelBody;\n","import React from 'react';\nimport { FormControl } from '../sbadmin2/utilities/FormControl';\nimport { FormInModal } from '../sbadmin2/utilities/FormInModal';\nimport { useFormData } from '../sbadmin2/utilities/useFormData';\nimport Amount from '../../model/Amount';\nimport Month from '../../model/Month';\nimport { useGetAccounts } from '../gql/accounts';\nimport { useBudget } from '../gql/budget';\nimport { WithQuery } from '../gql/WithQuery';\nimport { Combobox } from '../sbadmin2/utilities/Combobox';\nimport { InlineFormControl } from '../sbadmin2/utilities/InlineFormControl';\nimport { useDictionary } from '../sbadmin2';\n\nexport function TransferModal({ toAccount, fromAccount, init, ...props }) {\n  const { selectedBudget } = useBudget();\n  const { transfers } = useDictionary();\n  const query = useGetAccounts();\n  const formData = useFormData({\n    title: { $init: init.title },\n    date: { $init: init.date },\n    amount: {\n      $init: Amount.format(init.amount, false),\n      $process: Amount.parse,\n    },\n    fromAccountID: {\n      $init: init.fromAccount && init.fromAccount.id,\n      $process: v => (v === '' ? null : v),\n      $default: fromAccount && fromAccount.id,\n    },\n    toAccountID: {\n      $init: init.toAccount.id,\n      $default: toAccount && toAccount.id,\n    },\n  });\n\n  const month = Month.parse(selectedBudget.currentMonth.month);\n  const first = month.firstDay();\n  const last = month.lastDay();\n  return (\n    <FormInModal formData={formData} {...props}>\n      <WithQuery query={query}>\n        {({ data }) => (\n          <>\n            <FormControl\n              required\n              label={transfers.modal.labels.title}\n              inline={10}\n              formData={formData.title}\n              feedback=\"Provide title\"\n            />\n            <FormControl\n              label={transfers.modal.labels.date}\n              inline={10}\n              formData={formData.date}\n              feedback=\"Provide date\"\n              type=\"date\"\n              required\n              min={first.format()}\n              max={last.format()}\n            />\n            <FormControl\n              inline={10}\n              label={transfers.modal.labels.amount}\n              feedback=\"Provide amount\"\n              type=\"number\"\n              required\n              formData={formData.amount}\n              step=\"0.01\"\n            />\n            <InlineFormControl\n              size={10}\n              label={transfers.modal.labels.fromAccount}\n            >\n              <Combobox\n                allowedValues={data.accounts.map(({ id, name }) => ({\n                  id,\n                  label: name,\n                }))}\n                _ref={formData.fromAccountID}\n                defaultValue={formData.fromAccountID.default()}\n                disabled={!!fromAccount}\n              />\n            </InlineFormControl>\n            <InlineFormControl\n              size={10}\n              label={transfers.modal.labels.toAccount}\n            >\n              <Combobox\n                allowedValues={data.accounts.map(({ id, name }) => ({\n                  id,\n                  label: name,\n                }))}\n                _ref={formData.toAccountID}\n                defaultValue={formData.toAccountID.default()}\n                disabled={!!toAccount}\n              />\n            </InlineFormControl>\n          </>\n        )}\n      </WithQuery>\n    </FormInModal>\n  );\n}\n","import React from 'react';\nimport { ClickableIcon, Icon, OpenModalButton } from '../sbadmin2';\nimport { useUpdateTransfer } from '../gql/transfers';\nimport { useDictionary } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\nimport { TransferModal } from './TransferModal';\nexport function UpdateTransferButton({ transfer }) {\n  const [updateTransfer] = useUpdateTransfer();\n  const { transfers } = useDictionary();\n  return (\n    <OpenModalButton\n      button={props => (\n        <ClickableIcon icon={Icon.Edit} variant={Variant.primary} {...props} />\n      )}\n      modalContent={props => (\n        <TransferModal\n          init={transfer}\n          title={transfers.modal.editTitle}\n          onSave={input => updateTransfer(transfer.id, input)}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { ClickableIcon, Icon } from '../sbadmin2';\nimport { useDeleteTranfer } from '../gql/transfers';\nimport { Variant } from '../sbadmin2/bootstrap';\n\nexport function DeleteTransferButton({ transfer }) {\n  const [deleteTransfer] = useDeleteTranfer();\n  return (\n    <ClickableIcon\n      icon={Icon.Trash}\n      variant={Variant.danger}\n      onClick={() => deleteTransfer(transfer.id)}\n    />\n  );\n}\n\nDeleteTransferButton.propTypes = {\n  transfer: PropTypes.shape({ id: PropTypes.any }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useGetCurrentTransfers } from '../gql/transfers';\nimport { QueryTablePanel } from '../gql/QueryTablePanel';\nimport { UpdateTransferButton } from './UpdateTransferButton';\nimport { DeleteTransferButton } from './DeleteTransferButton';\nimport Amount from '../../model/Amount';\n\nconst columns = [\n  { dataField: 'title' },\n  {\n    dataField: 'fromAccount',\n    formatter: a => a && a.name,\n  },\n  {\n    dataField: 'toAccount',\n    formatter: a => a.name,\n  },\n  {\n    dataField: 'amount',\n    align: 'right',\n    headerAlign: 'right',\n    formatter: Amount.format,\n  },\n  {\n    dataField: 'date',\n    align: 'right',\n    headerAlign: 'right',\n  },\n  {\n    dataField: 'actions',\n    isDummyColumn: true,\n    formatter: (cell, row) => (\n      <span>\n        <UpdateTransferButton transfer={row} />\n        <DeleteTransferButton transfer={row} />\n      </span>\n    ),\n    style: {\n      whiteSpace: 'nowrap',\n      width: '1%',\n    },\n  },\n];\n\nexport function TransfersTablePanel({\n  toAccountFilter,\n  fromAccountFilter,\n  createButton,\n  ...props\n}) {\n  const query = useGetCurrentTransfers();\n  let filters = [];\n  if (toAccountFilter) {\n    filters.push(row => row.toAccount.id === toAccountFilter);\n  }\n  if (fromAccountFilter) {\n    filters.push(\n      row => row.fromAccount && row.fromAccount.id === fromAccountFilter\n    );\n  }\n  return (\n    <QueryTablePanel\n      {...props}\n      query={query}\n      getData={data => data.budget.currentMonth.transfers}\n      buttons={createButton}\n      columns={columns}\n      keyField=\"id\"\n      readColumnNames={d => d.transfers.table.columns}\n      filters={filters}\n    />\n  );\n}\n\nTransfersTablePanel.propTypes = {\n  createButton: PropTypes.node.isRequired,\n  fromAccountFilter: PropTypes.string,\n  toAccountFilter: PropTypes.string,\n};\n","import React from 'react';\nimport { OpenModalButton } from '../sbadmin2';\nimport CreateButton from '../sbadmin2/utilities/CreateButton';\nimport { useCreateTransfer } from '../gql/transfers';\nimport { useDictionary } from '../sbadmin2';\nimport { TransferModal } from './TransferModal';\n\nexport function CreateTransferButton({ toAccount, fromAccount }) {\n  const [createTransfer] = useCreateTransfer();\n  const { transfers } = useDictionary();\n  return (\n    <OpenModalButton\n      button={props => <CreateButton {...props} />}\n      modalContent={props => (\n        <TransferModal\n          init={{\n            title: null,\n            fromAccount: { id: null },\n            toAccount: { id: null },\n            amount: null,\n            date: null,\n          }}\n          title={transfers.modal.createTitle}\n          onSave={createTransfer}\n          toAccount={toAccount}\n          fromAccount={fromAccount}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n","import React, { useState } from 'react';\n\nimport { Page } from '../sbadmin2';\n\nimport { Row, Col } from 'react-bootstrap';\nimport { AccountsTablePanel } from './AccountsTablePanel';\nimport { ExpensesTablePanel } from '../Expenses/ExpensesTablePanel';\nimport { CreateExpenseButton } from '../Expenses/CreateExpenseButton';\nimport { CollapsiblePanel } from './CollapsiblePanel';\nimport { TransfersTablePanel } from '../Transfers/TransfersTablePanel';\nimport { CreateTransferButton } from '../Transfers/CreateTransferButton';\n\nexport default function Accounts() {\n  const [selectedAccount, setSelectedAccount] = useState(null);\n\n  return (\n    <Page>\n      <Page.Header readTitle={d => d.sidebar.pages.accounts} />\n      <Row>\n        <Col sm={5}>\n          <AccountsTablePanel onSelectAcount={a => setSelectedAccount(a)} />\n        </Col>\n        <Col>\n          {!selectedAccount ? null : (\n            <>\n              <h3>{selectedAccount.name}</h3>\n              <TransfersTablePanel\n                readTitle={d => d.accounts.inTransfersTableTitle}\n                createButton={\n                  <CreateTransferButton toAccount={selectedAccount} />\n                }\n                accountFilter={selectedAccount.id}\n                hiddenColumns={['toAccount']}\n                wrapper={CollapsiblePanel}\n                toAccountFilter={selectedAccount.id}\n              />\n              <TransfersTablePanel\n                readTitle={d => d.accounts.outTransfersTableTitle}\n                createButton={\n                  <CreateTransferButton fromAccount={selectedAccount} />\n                }\n                accountFilter={selectedAccount.id}\n                hiddenColumns={['fromAccount']}\n                wrapper={CollapsiblePanel}\n                fromAccountFilter={selectedAccount.id}\n              />\n              <ExpensesTablePanel\n                readTitle={d => d.accounts.expensesTableTitle}\n                createButton={<CreateExpenseButton account={selectedAccount} />}\n                accountFilter={selectedAccount.id}\n                hiddenColumns={['account']}\n                wrapper={CollapsiblePanel}\n                wrapperProps={{ initialyShown: true }}\n              />\n            </>\n          )}\n        </Col>\n      </Row>\n    </Page>\n  );\n}\n","import React, { useState } from 'react';\nimport { Form, Row } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { FormControl } from './FormControl';\n\nexport function OptionalFormControl({\n  initEnabled,\n  label,\n  inline,\n  formData,\n  ...props\n}) {\n  const [enabled, setEnabled] = useState(initEnabled);\n  const toggleEnabled = () => setEnabled(v => !v);\n  return (\n    <Form.Group className=\"mb-3\" as={!!inline && Row}>\n      <Form.Label column={!!inline}>\n        <Form.Check custom type=\"switch\">\n          <Form.Check.Input checked={enabled} onChange={toggleEnabled} />\n          <Form.Check.Label onClick={toggleEnabled}>{label}</Form.Check.Label>\n        </Form.Check>\n      </Form.Label>\n      {enabled && (\n        <FormControl.Input\n          autoFocus\n          formData={formData}\n          inline={inline}\n          {...props}\n        />\n      )}\n    </Form.Group>\n  );\n}\n\nOptionalFormControl.propTypes = {\n  initEnabled: PropTypes.bool,\n  formData: PropTypes.shape({ current: PropTypes.any, init: PropTypes.any }),\n  feedback: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  inline: PropTypes.number,\n};\n\nOptionalFormControl.defaultProps = {\n  inline: 0,\n};\n","import PropTypes from 'prop-types';\n\nexport const Amount = PropTypes.number;\n\nexport const Account = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n});\n\nexport const Expense = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  date: PropTypes.string,\n  totalBalance: Amount.isRequired,\n  location: PropTypes.string,\n  account: Account,\n});\n\nexport const Envelope = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n});\n\nexport const Category = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  envelope: Envelope,\n});\n","import React from 'react';\nimport Amount from '../../model/Amount';\nimport { FormControl } from '../sbadmin2/utilities/FormControl';\nimport { OptionalFormControl } from '../sbadmin2/utilities/OptionalFormControl';\nimport { FormInModal } from '../sbadmin2/utilities/FormInModal';\nimport { useFormData } from '../sbadmin2/utilities/useFormData';\nimport PropTypes from 'prop-types';\nimport * as model from '../../model/propTypes';\nimport { useDictionary } from '../sbadmin2/language';\n\nexport function EnvelopeModal({ init, ...props }) {\n  const { envelopes } = useDictionary();\n  const formData = useFormData({\n    name: { $init: init.name },\n    limit: { $init: Amount.format(init.limit, false), $process: Amount.parse },\n  });\n  return (\n    <FormInModal formData={formData} {...props}>\n      <FormControl\n        label={envelopes.modal.labels.name}\n        inline={9}\n        feedback=\"Provide a name for the envelope\"\n        required\n        formData={formData.name}\n      />\n      <OptionalFormControl\n        initEnabled={!!init.limit}\n        inline={9}\n        label={envelopes.modal.labels.limit}\n        feedback=\"Provide a limit for the envelope\"\n        type=\"number\"\n        required\n        formData={formData.limit}\n        step=\"0.01\"\n      />\n    </FormInModal>\n  );\n}\n\nEnvelopeModal.propTypes = {\n  init: PropTypes.shape({\n    name: PropTypes.string,\n    limit: model.Amount,\n  }).isRequired,\n  onSave: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { OpenModalButton } from '../sbadmin2';\nimport CreateButton from '../sbadmin2/utilities/CreateButton';\nimport { useCreateEnvelope } from '../gql/envelopes';\nimport { EnvelopeModal } from './EnvelopeModal';\nimport { useDictionary } from '../sbadmin2/language';\nimport PropTypes from 'prop-types';\n\nexport function CreateEnvelopeButton({ onClickRef }) {\n  const [createEnvelope] = useCreateEnvelope();\n  const { envelopes } = useDictionary();\n  return (\n    <OpenModalButton\n      onClickRef={onClickRef}\n      button={props => <CreateButton {...props} />}\n      modalContent={props => (\n        <EnvelopeModal\n          title={envelopes.modal.createTitle}\n          init={{ name: '', limit: null }}\n          onSave={createEnvelope}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nCreateEnvelopeButton.propTypes = {\n  onClickRef: PropTypes.shape({ current: PropTypes.any }),\n};\n","import React from 'react';\nimport { OpenModalButton, ClickableIcon, Icon } from '../sbadmin2';\nimport { useUpdateEnvelope } from '../gql/envelopes';\nimport { EnvelopeModal } from './EnvelopeModal';\nimport PropTypes from 'prop-types';\nimport { useDictionary } from '../sbadmin2/language';\nimport { Variant } from '../sbadmin2/bootstrap';\n\nexport function UpdateEnvelopeButton({ envelope }) {\n  const [updateEnvelope] = useUpdateEnvelope();\n  const { envelopes } = useDictionary();\n\n  const onSave = input => {\n    updateEnvelope(envelope.id, input);\n  };\n  return (\n    <OpenModalButton\n      button={props => (\n        <ClickableIcon icon={Icon.Edit} variant={Variant.primary} {...props} />\n      )}\n      modalContent={props => (\n        <EnvelopeModal\n          title={envelopes.modal.editTitle}\n          init={envelope}\n          onSave={onSave}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nUpdateEnvelopeButton.propTypes = {\n  envelope: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n  }),\n};\n","import React from 'react';\nimport { useGetEnvelopes } from '../gql/envelopes';\nimport { CreateEnvelopeButton } from './CreateEnvelopeButton';\nimport Amount from '../../model/Amount';\nimport { UpdateEnvelopeButton } from './UpdateEnvelopeButton';\nimport { QueryTablePanel } from '../gql/QueryTablePanel';\nimport { Variant } from '../sbadmin2/bootstrap';\nimport { Icon, ClickableIcon } from '../sbadmin2';\n\nconst columns = [\n  { dataField: 'name', sort: true },\n  {\n    dataField: 'limit',\n    formatter: Amount.format,\n    align: 'right',\n    headerAlign: 'right',\n  },\n  {\n    dataField: 'balance',\n    formatter: Amount.format,\n    align: 'right',\n    headerAlign: 'right',\n  },\n  {\n    dataField: 'overLimit',\n    align: 'right',\n    headerAlign: 'right',\n    formatter: (cell, row) =>\n      row.limit !== null && row.limit < row.balance\n        ? Amount.format(row.balance - row.limit)\n        : '',\n  },\n  {\n    dataField: 'actions',\n    isDummyColumn: true,\n    formatter: (cell, row) => (\n      <span>\n        <UpdateEnvelopeButton envelope={row} />\n        <ClickableIcon icon={Icon.Archive} variant={Variant.secondary} />\n      </span>\n    ),\n    style: {\n      whiteSpace: 'nowrap',\n      width: '1%',\n    },\n  },\n];\n\nconst defaultSorted = [\n  {\n    dataField: 'name',\n    order: 'asc',\n  },\n];\n\nexport function EnvelopesListPanel({ createFunRef }) {\n  const query = useGetEnvelopes();\n  return (\n    <QueryTablePanel\n      query={query}\n      buttons={<CreateEnvelopeButton openRef={createFunRef} />}\n      getData={data => data.envelopes}\n      columns={columns}\n      keyField=\"id\"\n      readTitle={d => d.envelopes.table.title}\n      readColumnNames={d => d.envelopes.table.columns}\n      defaultSorted={defaultSorted}\n    />\n  );\n}\n","import React from 'react';\nimport { FormInModal } from '../sbadmin2/utilities/FormInModal';\nimport { useFormData } from '../sbadmin2/utilities/useFormData';\nimport { FormControl } from '../sbadmin2/utilities/FormControl';\nimport PropTypes from 'prop-types';\nimport { useGetEnvelopes } from '../gql/envelopes';\nimport { WithQuery } from '../gql/WithQuery';\nimport { Combobox } from '../sbadmin2/utilities/Combobox';\nimport { InlineFormControl } from '../sbadmin2/utilities/InlineFormControl';\nimport { useDictionary } from '../sbadmin2/language';\n\nexport function CategoryModal({ init, ...props }) {\n  const query = useGetEnvelopes();\n  const { categories } = useDictionary();\n  const formData = useFormData({\n    name: { $init: init.name },\n    envelopeID: {\n      $init: init.envelope.id,\n    },\n    description: { $init: init.description },\n  });\n  return (\n    <FormInModal formData={formData} {...props}>\n      <WithQuery query={query}>\n        {({ data }) => (\n          <>\n            <FormControl\n              label={categories.modal.labels.name}\n              inline={9}\n              formData={formData.name}\n              feedback=\"Provide name\"\n            />\n            <InlineFormControl\n              size={9}\n              label={categories.modal.labels.envelope}\n            >\n              <Combobox\n                allowedValues={data.envelopes.map(({ id, name }) => ({\n                  id,\n                  label: name,\n                }))}\n                _ref={formData.envelopeID}\n                defaultValue={formData.envelopeID.default()}\n              />\n            </InlineFormControl>\n            <FormControl\n              label={categories.modal.labels.description}\n              inline={9}\n              formData={formData.description}\n              feedback=\"Provide description\"\n            />\n          </>\n        )}\n      </WithQuery>\n    </FormInModal>\n  );\n}\n\nCategoryModal.propTypes = {\n  init: PropTypes.shape({\n    name: PropTypes.string,\n    envelope: PropTypes.shape({ id: PropTypes.string }).isRequired,\n  }),\n  onSave: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { OpenModalButton } from '../sbadmin2';\nimport CreateButton from '../sbadmin2/utilities/CreateButton';\nimport { useCreateCategory } from '../gql/categories';\nimport { CategoryModal } from './CategoryModal';\nimport { useDictionary } from '../sbadmin2/language';\nimport PropTypes from 'prop-types';\n\nexport function CreateCategoryButton({ onClickRef }) {\n  const [createCategory] = useCreateCategory();\n  const { categories } = useDictionary();\n  return (\n    <OpenModalButton\n      onClickRef={onClickRef}\n      button={props => <CreateButton {...props} />}\n      modalContent={props => (\n        <CategoryModal\n          title={categories.modal.createTitle}\n          init={{ name: '', envelope: { id: null }, description: '' }}\n          onSave={createCategory}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nCreateCategoryButton.propTypes = {\n  onClickRef: PropTypes.shape({ current: PropTypes.any }),\n};\n","import React from 'react';\nimport { OpenModalButton, ClickableIcon, Icon } from '../sbadmin2';\nimport { CategoryModal } from './CategoryModal';\nimport PropTypes from 'prop-types';\nimport { useUpdateCategory } from '../gql/categories';\nimport { useDictionary } from '../sbadmin2/language';\nimport { Variant } from '../sbadmin2/bootstrap';\n\nexport function UpdateCategoryButton({ category }) {\n  const [updateEnvelope] = useUpdateCategory();\n  const { categories } = useDictionary();\n  const onSave = input => {\n    updateEnvelope(category.id, input);\n  };\n  return (\n    <OpenModalButton\n      button={props => (\n        <ClickableIcon icon={Icon.Edit} variant={Variant.primary} {...props} />\n      )}\n      modalContent={props => (\n        <CategoryModal\n          title={categories.modal.editTitle}\n          init={category}\n          onSave={onSave}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nUpdateCategoryButton.propTypes = {\n  category: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n  }),\n};\n","import React from 'react';\nimport { useGetCategories } from '../gql/categories';\nimport { QueryTablePanel } from '../gql/QueryTablePanel';\nimport { CreateCategoryButton } from './CreateCategoryButton';\nimport { UpdateCategoryButton } from './UpdateCategoryButton';\nimport { ClickableIcon, Icon } from '../sbadmin2';\nimport { Variant } from '../sbadmin2/bootstrap';\n\nconst columns = [\n  { dataField: 'name', sort: true },\n  {\n    dataField: 'envelope',\n    formatter: a => a.name,\n    sort: true,\n  },\n  { dataField: 'description' },\n  {\n    dataField: 'actions',\n    isDummyColumn: true,\n    formatter: (cell, row) => (\n      <span>\n        <UpdateCategoryButton category={row} />\n        <ClickableIcon icon={Icon.Archive} variant={Variant.secondary} />\n      </span>\n    ),\n    style: {\n      whiteSpace: 'nowrap',\n      width: '1%',\n    },\n  },\n];\n\nconst defaultSorted = [\n  {\n    dataField: 'name',\n    order: 'asc',\n  },\n];\n\nexport function CategoriesListPanel({ createFunRef }) {\n  const query = useGetCategories();\n  return (\n    <QueryTablePanel\n      keyField=\"id\"\n      columns={columns}\n      buttons={<CreateCategoryButton openRef={createFunRef} />}\n      query={query}\n      getData={data => data.categories}\n      readTitle={d => d.categories.table.title}\n      readColumnNames={d => d.categories.table.columns}\n      defaultSorted={defaultSorted}\n    />\n  );\n}\n","import React, { useRef } from 'react';\nimport { Page } from '../sbadmin2';\nimport { EnvelopesListPanel } from './EnvelopesListPanel';\nimport { CategoriesListPanel } from '../Categories/CategoriesListPanel';\nimport { GlobalHotKeys } from 'react-hotkeys';\n\nconst keyMap = {\n  createEnvelope: 'e',\n  createCategory: 'c',\n};\n\nconst handlers = (createEnvelopeFunRef, createCategoryFunRef) => ({\n  createEnvelope: () => createEnvelopeFunRef.current(),\n  createCategory: () => createCategoryFunRef.current(),\n});\n\nexport default function EnvelopesPage() {\n  const createEnvelopeFunRef = useRef();\n  const createCategoryFunRef = useRef();\n  return (\n    <Page>\n      <GlobalHotKeys\n        keyMap={keyMap}\n        handlers={handlers(createEnvelopeFunRef, createCategoryFunRef)}\n      />\n      <Page.Header readTitle={d => d.sidebar.pages.envelopes} />\n      <EnvelopesListPanel createFunRef={createEnvelopeFunRef} />\n      <CategoriesListPanel createFunRef={createCategoryFunRef} />\n    </Page>\n  );\n}\n","import React from 'react';\nimport { Page } from '../sbadmin2';\nimport { CreateExpenseButton } from './CreateExpenseButton';\nimport { ExpensesTablePanel } from './ExpensesTablePanel';\n\nexport default function ExpensesPage() {\n  return (\n    <Page>\n      <Page.Header readTitle={d => d.sidebar.pages.expenses} />\n      <ExpensesTablePanel\n        readTitle={d => d.expenses.table.title}\n        createButton={<CreateExpenseButton />}\n      />\n    </Page>\n  );\n}\n","import React from 'react';\nimport { Page } from '../sbadmin2';\nimport { TransfersTablePanel } from './TransfersTablePanel';\nimport { CreateTransferButton } from './CreateTransferButton';\n\nexport function TransfersPage() {\n  return (\n    <Page>\n      <Page.Header readTitle={d => d.sidebar.pages.transfers} />\n      <TransfersTablePanel\n        readTitle={d => d.transfers.table.title}\n        createButton={<CreateTransferButton />}\n      />\n    </Page>\n  );\n}\n","import React from 'react';\nimport { Page, ClickableIcon, Icon, OpenModalButton } from './sbadmin2';\nimport CreateButton from './sbadmin2/utilities/CreateButton';\nimport { FormControl } from './sbadmin2/utilities/FormControl';\nimport { OptionalFormControl } from './sbadmin2/utilities/OptionalFormControl';\nimport { FormInModal } from './sbadmin2/utilities/FormInModal';\nimport { useFormData } from './sbadmin2/utilities/useFormData';\nimport Amount from '../model/Amount';\nimport {\n  useCreatePlan,\n  useGetCurrentPlans,\n  useUpdatePlan,\n  useDeletePlan,\n} from './gql/plans';\nimport { QueryTablePanel } from './gql/QueryTablePanel';\nimport { useGetEnvelopes } from './gql/envelopes';\nimport { WithQuery } from './gql/WithQuery';\nimport { InlineFormControl } from './sbadmin2/utilities/InlineFormControl';\nimport { Combobox } from './sbadmin2/utilities/Combobox';\nimport { useDictionary } from './sbadmin2';\nimport { Variant } from './sbadmin2/bootstrap';\nimport { AmountInput } from './Expenses/AmountInput';\n\nconst columns = [\n  { dataField: 'title', sort: true },\n  {\n    dataField: 'fromEnvelope',\n    sort: true,\n    sortValue: cell => cell.name,\n    formatter: a => a && a.name,\n  },\n  {\n    dataField: 'toEnvelope',\n    sort: true,\n    sortValue: cell => cell.name,\n    formatter: a => a.name,\n  },\n  {\n    dataField: 'currentAmount',\n    formatter: Amount.format,\n    align: 'right',\n    headerAlign: 'right',\n  },\n  {\n    dataField: 'recurringAmount',\n    formatter: a =>\n      a !== null ? <i className=\"fas fa-fw fa-sync-alt\" /> : null,\n  },\n  {\n    dataField: 'actions',\n    isDummyColumn: true,\n    formatter: (cell, row) => (\n      <span>\n        <UpdatePlanButton plan={row} />\n        <DeletePlanButton plan={row} />\n      </span>\n    ),\n    style: {\n      whiteSpace: 'nowrap',\n      width: '1%',\n    },\n  },\n];\n\nconst defaultSorted = [\n  {\n    dataField: 'title',\n    order: 'asc',\n  },\n];\n\nfunction PlanModal({ init, ...props }) {\n  const query = useGetEnvelopes();\n  const { plans } = useDictionary();\n  const formData = useFormData({\n    title: { $init: init.title },\n    currentAmount: {\n      $init: Amount.format(init.currentAmount, false),\n      $process: Amount.parse,\n    },\n    recurringAmount: {\n      $init: Amount.format(init.recurringAmount, false),\n      $default: fd => Amount.format(fd.currentAmount.value()),\n      $process: Amount.parse,\n    },\n    fromEnvelopeID: {\n      $init: init.fromEnvelope !== null ? init.fromEnvelope.id : '',\n      $process: v => (v === '' ? null : v),\n    },\n    toEnvelopeID: { $init: init.toEnvelope.id },\n  });\n  return (\n    <FormInModal formData={formData} {...props}>\n      <WithQuery query={query}>\n        {({ data }) => (\n          <>\n            <FormControl\n              required\n              label={plans.modal.labels.title}\n              inline={10}\n              formData={formData.title}\n              feedback=\"Provide title\"\n            />\n            <FormControl inline={8} label={plans.modal.labels.amount}>\n              <AmountInput formData={formData.currentAmount} />\n            </FormControl>\n            <OptionalFormControl\n              initEnabled={init.recurringAmount !== null}\n              inline={8}\n              label={plans.modal.labels.recurring}\n              feedback=\"Provide amount for recurring plans\"\n              type=\"number\"\n              required\n              formData={formData.recurringAmount}\n              step=\"0.01\"\n            />\n            <InlineFormControl size={8} label={plans.modal.labels.fromEnvelope}>\n              <Combobox\n                _ref={formData.fromEnvelopeID}\n                defaultValue={formData.fromEnvelopeID.default()}\n                allowedValues={data.envelopes.map(({ id, name }) => ({\n                  id,\n                  label: name,\n                }))}\n              />\n            </InlineFormControl>\n            <InlineFormControl size={8} label={plans.modal.labels.toEnvelope}>\n              <Combobox\n                _ref={formData.toEnvelopeID}\n                defaultValue={formData.toEnvelopeID.default()}\n                allowedValues={data.envelopes.map(({ id, name }) => ({\n                  id,\n                  label: name,\n                }))}\n              />\n            </InlineFormControl>\n          </>\n        )}\n      </WithQuery>\n    </FormInModal>\n  );\n}\n\nfunction UpdatePlanButton({ plan }) {\n  const [updatePlan] = useUpdatePlan();\n  const { plans } = useDictionary();\n\n  return (\n    <OpenModalButton\n      button={props => (\n        <ClickableIcon icon={Icon.Edit} variant={Variant.primary} {...props} />\n      )}\n      modalContent={props => (\n        <PlanModal\n          init={plan}\n          title={plans.modal.editTitle}\n          onSave={input => updatePlan(plan.id, input)}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nfunction DeletePlanButton({ plan }) {\n  const [deletePlan] = useDeletePlan();\n  return (\n    <ClickableIcon\n      icon={Icon.Trash}\n      variant={Variant.secondary}\n      onClick={() => deletePlan(plan.id)}\n    />\n  );\n}\n\nfunction CreatePlanButton() {\n  const [createPlan] = useCreatePlan();\n  const { plans } = useDictionary();\n\n  return (\n    <OpenModalButton\n      button={props => <CreateButton {...props} />}\n      modalContent={props => (\n        <PlanModal\n          init={{\n            title: null,\n            fromEnvelope: { id: null },\n            toEnvelope: { id: null },\n            currentAmount: null,\n            recurringAmount: null,\n            date: null,\n          }}\n          title={plans.modal.createTitle}\n          onSave={createPlan}\n          {...props}\n        />\n      )}\n    />\n  );\n}\n\nexport default function Plans() {\n  const query = useGetCurrentPlans();\n\n  return (\n    <Page>\n      <Page.Header readTitle={d => d.sidebar.pages.plans} />\n      <QueryTablePanel\n        query={query}\n        getData={data => data.budget.currentMonth.plans}\n        buttons={<CreatePlanButton />}\n        columns={columns}\n        keyField=\"id\"\n        readTitle={d => d.plans.table.title}\n        readColumnNames={d => d.plans.table.columns}\n        defaultSorted={defaultSorted}\n      />\n    </Page>\n  );\n}\n","import React from 'react';\n\nexport function Gauge({ className, variant, title, value, faIcon }) {\n  return (\n    <div className={className}>\n      <div className={`card border-left-${variant} shadow h-100 py-2`}>\n        <div className=\"card-body\">\n          <div className=\"row no-gutters align-items-center\">\n            <div className=\"col mr-2\">\n              <div\n                className={`text-xs font-weight-bold text-${variant} text-uppercase mb-1`}\n              >\n                {title}\n              </div>\n              <div className=\"h5 mb-0 font-weight-bold text-gray-800\">\n                {value}\n              </div>\n            </div>\n            <div className=\"col-auto\">\n              <i className={`fas fa-${faIcon} fa-2x text-gray-300`} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Page, Panel, SplitButton, useDictionary, Icon } from './sbadmin2';\nimport { Gauge } from './sbadmin2/Gauge';\nimport { useGetCurrentMonthlyReport } from './gql/monthlyReport';\nimport { WithQuery } from './gql/WithQuery';\nimport { useGetEnvelopes } from './gql/envelopes';\nimport { useGetAccounts } from './gql/accounts';\nimport Amount from '../model/Amount';\nimport { Row } from 'react-bootstrap';\nimport Month from '../model/Month';\nimport { useCloseCurrentMonth } from './gql/budget';\nimport { Variant } from './sbadmin2/bootstrap';\n\nfunction Gauges({ className, month }) {\n  const { dashboard } = useDictionary();\n  return (\n    <div className={className}>\n      <Row>\n        <Gauge\n          className=\"col-6 col-lg-12 mb-4\"\n          variant=\"primary\"\n          title={dashboard.planned}\n          value={Amount.format(month.totalPlannedAmount)}\n          faIcon=\"clipboard-list\"\n        />\n        <Gauge\n          className=\"col-6 col-lg-12 mb-4\"\n          variant=\"primary\"\n          title={dashboard.incomes}\n          value={Amount.format(month.totalIncomeAmount)}\n          faIcon=\"briefcase\"\n        />\n        <Gauge\n          className=\"col-6 col-lg-12 mb-4\"\n          variant=\"primary\"\n          title={dashboard.leftToPlan}\n          value={Amount.format(\n            month.totalIncomeAmount - month.totalPlannedAmount\n          )}\n          faIcon=\"balance-scale\"\n        />\n        <Gauge\n          className=\"col-6 col-lg-12 mb-4\"\n          variant=\"primary\"\n          title={dashboard.expenses}\n          value={Amount.format(month.totalExpenseAmount)}\n          faIcon=\"receipt\"\n        />\n      </Row>\n    </div>\n  );\n}\n\nconst severityIcon = {\n  ERROR: 'exclamation-circle',\n  WARNING: 'exclamation-triangle',\n  INFO: 'info-circle',\n};\n\nconst severityVariant = {\n  ERROR: 'danger',\n  WARNING: 'warning',\n  INFO: 'primary',\n};\n\nfunction ProblemMessage({ problem }) {\n  const envelopesQuery = useGetEnvelopes();\n  const accountsQuery = useGetAccounts();\n  const { dashboard } = useDictionary();\n\n  return (\n    <WithQuery query={envelopesQuery}>\n      {({ data: envelopesData }) => (\n        <WithQuery query={accountsQuery}>\n          {({ data: accountsData }) =>\n            problem.__typename === 'Misplanned'\n              ? problem.overplanned\n                ? dashboard.problems.overplanned\n                : dashboard.problems.underplanned\n              : problem.__typename === 'NegativeBalanceOnEnvelope'\n              ? dashboard.problems.expensesExceedPlans(\n                  envelopesData.envelopes.find(e => e.id === problem.id).name\n                )\n              : problem.__typename === 'EnvelopeOverLimit'\n              ? dashboard.problems.envelopeOverLimit(\n                  envelopesData.envelopes.find(e => e.id === problem.id).name\n                )\n              : problem.__typename === 'NegativeBalanceOnAccount'\n              ? dashboard.problems.negativeAccountBalance(\n                  accountsData.accounts.find(a => a.id === problem.id).name\n                )\n              : problem.__typename === 'MonthStillInProgress'\n              ? dashboard.problems.monthNotEnded\n              : problem.__typename\n          }\n        </WithQuery>\n      )}\n    </WithQuery>\n  );\n}\n\nfunction Problem({ problem }) {\n  return (\n    <li className={`list-group-item text-${severityVariant[problem.severity]}`}>\n      <i className={`fas fa-fw fa-${severityIcon[problem.severity]} mr-1`} />\n      <ProblemMessage problem={problem} />\n    </li>\n  );\n}\n\nfunction NoProblems() {\n  const { dashboard } = useDictionary();\n  return (\n    <li className=\"list-group-item text-success\">\n      <i className=\"fas fa-fw fa-check-circle mr-1\" />\n      {dashboard.noProblems}\n    </li>\n  );\n}\n\nfunction MonthProblems({ className, problems }) {\n  return (\n    <Panel className={className}>\n      <Panel.Header>\n        <div className=\"d-flex justify-content-between align-items-center\">\n          <Panel.Title readTitle={d => d.dashboard.problems.title} />\n        </div>\n      </Panel.Header>\n      <Panel.Body>\n        <ul className=\"list-group list-group-flush\">\n          {problems.length > 0 ? (\n            problems.map((problem, idx) => (\n              <Problem key={idx} problem={problem} />\n            ))\n          ) : (\n            <NoProblems />\n          )}\n        </ul>\n      </Panel.Body>\n    </Panel>\n  );\n}\n\nfunction StartNextMonthButton({ disabled, warn }) {\n  const [closeCurrentMonth] = useCloseCurrentMonth();\n  const { dashboard } = useDictionary();\n  return (\n    <SplitButton\n      icon={Icon.ClipboardCheck}\n      variant={\n        disabled ? Variant.secondary : warn ? Variant.warning : Variant.success\n      }\n      disabled={disabled}\n      onClick={() => closeCurrentMonth()}\n    >\n      {dashboard.buttons.closeMonth}\n    </SplitButton>\n  );\n}\n\nfunction CurrentMonth({ className, month }) {\n  const { dashboard, months } = useDictionary();\n  const parsed = Month.parse(month.month);\n\n  return (\n    <Panel className={className}>\n      <Panel.Header>\n        <div className=\"d-flex justify-content-between align-items-center\">\n          <Panel.Title\n            title={\n              <span>\n                {dashboard.currentMonth}:{' '}\n                <strong>\n                  <em>\n                    {months[parsed.month - 1]} {parsed.year}\n                  </em>\n                </strong>\n              </span>\n            }\n          />\n          <div>\n            <StartNextMonthButton\n              disabled={month.problems.some(p => p.severity === 'ERROR')}\n              warn={month.problems.length > 0}\n            />\n          </div>\n        </div>\n      </Panel.Header>\n    </Panel>\n  );\n}\n\nexport function MonthDashboardPage() {\n  const query = useGetCurrentMonthlyReport();\n  return (\n    <Page>\n      <WithQuery query={query}>\n        {({ data }) => (\n          <Row>\n            <CurrentMonth\n              className=\"col-12 d-lg-none px-0\"\n              month={data.budget.currentMonth}\n            />\n            <Gauges\n              className=\"col-12 col-lg-3\"\n              month={data.budget.currentMonth}\n            />\n            <MonthProblems\n              className=\"col-12 d-lg-none px-0\"\n              problems={data.budget.currentMonth.problems}\n            />\n            <Row className=\"col-12 col-lg-9 flex-lg-column\">\n              <CurrentMonth\n                className=\"d-none d-lg-block\"\n                month={data.budget.currentMonth}\n              />\n              <MonthProblems\n                className=\"d-none d-lg-block flex-grow-1\"\n                problems={data.budget.currentMonth.problems}\n              />\n            </Row>\n          </Row>\n        )}\n      </WithQuery>\n    </Page>\n  );\n}\n","export default {\n  buttons: {\n    create: 'Dodaj',\n    cancel: 'Anuluj',\n    save: 'Zapisz',\n  },\n  sidebar: {\n    sections: {\n      currentMonth: 'Bieżący miesiąc',\n      budget: 'Budżet',\n    },\n    pages: {\n      dashboard: 'Podsumowanie',\n      expenses: 'Wydatki',\n      transfers: 'Przelewy',\n      plans: 'Plany',\n      accounts: 'Konta',\n      envelopes: 'Koperty',\n    },\n  },\n  topbar: {\n    budgetLabel: 'Budżet',\n    alertsLabel: 'Powiadomienia',\n    messagesLabel: 'Wiadomości',\n  },\n  dashboard: {\n    planned: 'Zaplanowano',\n    incomes: 'Wpływy',\n    leftToPlan: 'Pozostało do zaplanowania',\n    expenses: 'Wydatki',\n    currentMonth: 'Bieżący miesiąc',\n    noProblems: 'Wszystko w porządku',\n    problems: {\n      title: 'Problemy',\n      overplanned: 'Plany na bieżący miesiąc przekraczają wpływy',\n      underplanned: 'Część środków jest nierozplanowana',\n      expensesExceedPlans: envelope =>\n        `Wydatki przekroczyły zaplanowany budżet na kopercie \"${envelope}\"`,\n      envelopeOverLimit: envelope =>\n        `Limit dla koperty \"${envelope}\" został przekroczony`,\n      negativeAccountBalance: account =>\n        `Bilans na koncie \"${account}\" jest ujemny`,\n      monthNotEnded: 'Miesiąc się jeszcze nie skończył',\n    },\n    buttons: {\n      closeMonth: 'Zamknij miesiąc',\n    },\n  },\n  accounts: {\n    table: {\n      title: 'Konta',\n      columns: {\n        balance: 'Bilans',\n        name: 'Nazwa',\n      },\n    },\n    expensesTableTitle: 'Wydatki',\n    inTransfersTableTitle: 'Przelewy przychodzące',\n    outTransfersTableTitle: 'Przelewy wychodzące',\n    modal: {\n      createTitle: 'Dodaj nowe konto',\n      editTitle: 'Edytuj konto',\n      labels: {\n        name: 'Nazwa',\n      },\n    },\n  },\n  envelopes: {\n    table: {\n      title: 'Koperty',\n      columns: {\n        balance: 'Bilans',\n        name: 'Nazwa',\n        limit: 'Limit',\n        overLimit: 'Ponad limit',\n      },\n    },\n    modal: {\n      createTitle: 'Dodaj nową kopertę',\n      editTitle: 'Edytuj kopertę',\n      labels: {\n        name: 'Nazwa',\n        limit: 'Limit',\n      },\n    },\n  },\n  categories: {\n    table: {\n      title: 'Kategorie',\n      columns: {\n        name: 'Nazwa',\n        envelope: 'Koperta',\n        description: 'Opis',\n      },\n    },\n    modal: {\n      createTitle: 'Dodaj nową kategorię',\n      editTitle: 'Edytuj kategorię',\n      labels: {\n        name: 'Nazwa',\n        envelope: 'Koperta',\n        description: 'Opis',\n      },\n    },\n  },\n  plans: {\n    table: {\n      title: 'Plany',\n      columns: {\n        title: 'Tytuł',\n        fromEnvelope: 'Z',\n        toEnvelope: 'Do',\n        currentAmount: 'Kwota',\n      },\n    },\n    modal: {\n      createTitle: 'Dodaj nowy plan',\n      editTitle: 'Edytuj plan',\n      labels: {\n        title: 'Tytuł',\n        fromEnvelope: 'Z',\n        toEnvelope: 'Do',\n        amount: 'Kwota',\n        recurring: 'Cyklicznie',\n      },\n    },\n  },\n  transfers: {\n    table: {\n      title: 'Przelewy',\n      columns: {\n        title: 'Tytuł',\n        fromAccount: 'Z',\n        toAccount: 'Do',\n        amount: 'Kwota',\n        date: 'Data',\n      },\n    },\n    modal: {\n      createTitle: 'Dodaj nowy przelew',\n      editTitle: 'Edytuj przelew',\n      labels: {\n        title: 'Tytuł',\n        fromAccount: 'Z',\n        toAccount: 'Do',\n        amount: 'Kwota',\n        date: 'Data',\n      },\n    },\n  },\n  expenses: {\n    table: {\n      title: 'Wydatki',\n      columns: {\n        title: 'Tytuł',\n        totalAmount: 'Kwota',\n        date: 'Data',\n        account: 'Konto',\n      },\n    },\n    modal: {\n      createTitle: 'Dodaj nowy wydatek',\n      editTitle: 'Edytuj wydatek',\n      labels: {\n        title: 'Tytuł',\n        fromAccount: 'Z',\n        toAccount: 'Do',\n        account: 'Konto',\n        date: 'Data',\n        categories: 'Kategorie',\n        amount: 'Kwota',\n        category: 'Kategoria',\n      },\n    },\n  },\n  months: [\n    'Styczeń',\n    'Luty',\n    'Marzec',\n    'Kwiecień',\n    'Maj',\n    'Czerwiec',\n    'Lipiec',\n    'Sierpień',\n    'Wrzesień',\n    'Październik',\n    'Listopad',\n    'Grudzień',\n  ],\n};\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Topbar from '../Topbar';\nimport { SBAdmin2 } from '../sbadmin2';\nimport { sidebarConfig } from './sidebarConfig';\nimport { BudgetProvider, BudgetContext } from '../gql/budget';\nimport Accounts from '../Accounts/Accounts';\nimport Envelopes from '../Envelopes/EnvelopesPage';\nimport ExpensesPage from '../Expenses/ExpensesPage';\nimport { TransfersPage } from '../Transfers/TransfersPage';\nimport Plans from '../Plans';\nimport { MonthDashboardPage } from '../MonthDashboardPage';\nimport pl from '../../lang/pl';\nimport { useAuth0 } from '../../react-auth0-spa';\n\nconst dictionaries = {\n  pl,\n};\n\nexport default function App() {\n  const { user, logout } = useAuth0();\n  return (\n    <BudgetProvider>\n      <SBAdmin2\n        sidebarProps={{\n          renderBrandName: () => 'Budget',\n          renderBrandIcon: () => <i className=\"fas fa-bold\" />,\n          config: sidebarConfig(pl),\n        }}\n        topbar={Topbar}\n        copyright={'Budget 2019'}\n        dictionaries={dictionaries}\n        user={user}\n        logout={logout}\n      >\n        <BudgetContext.Consumer>\n          {({ selectedBudget }) =>\n            selectedBudget && (\n              <Switch>\n                <Route path=\"/accounts\" component={Accounts} />\n                <Route path=\"/envelopes\" component={Envelopes} />\n                <Route path=\"/expenses\" component={ExpensesPage} />\n                <Route path=\"/transfers\" component={TransfersPage} />\n                <Route path=\"/plans\" component={Plans} />\n                <Route path=\"/\" component={MonthDashboardPage} />\n              </Switch>\n            )\n          }\n        </BudgetContext.Consumer>\n      </SBAdmin2>\n    </BudgetProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createHttpLink } from 'apollo-link-http';\nimport { ApolloLink } from 'apollo-link';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { onError } from 'apollo-link-error';\nimport { setContext } from 'apollo-link-context';\n\nimport { IntrospectionFragmentMatcher } from 'apollo-cache-inmemory';\nimport introspectionQueryResultData from './fragmentTypes.json';\nimport { useAuth0 } from './react-auth0-spa.js';\nimport React, { useEffect } from 'react';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nconst fragmentMatcher = new IntrospectionFragmentMatcher({\n  introspectionQueryResultData,\n});\n\nexport function isSubscriptionOperation({ query }) {\n  const definition = getMainDefinition(query);\n  return (\n    definition.kind === 'OperationDefinition' &&\n    definition.operation === 'subscription'\n  );\n}\n\nexport function createClient(token) {\n  const graphqlApiUrl = process.env.REACT_APP_GQL_URL;\n  // const graphqlApiUrl = 'http://localhost:8080/query';\n  const httpLink = createHttpLink({ uri: graphqlApiUrl });\n  const authLink = setContext((_, { headers }) => {\n    // get the authentication token from local storage if it exists\n    // return the headers to the context so httpLink can read them\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    };\n  });\n  const cache = new InMemoryCache({ fragmentMatcher });\n\n  const errorLink = onError(({ graphQLErrors, networkError }) => {\n    if (process.env.REACT_APP_ENV !== 'production') {\n      if (graphQLErrors) {\n        graphQLErrors.map(({ message, locations, path }) =>\n          console.log(\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n          )\n        );\n      }\n\n      if (networkError) console.log(`[Network error]: ${networkError}`);\n    }\n  });\n\n  // const link = split(isSubscriptionOperation, wsLink, httpLink);\n  const link = authLink.concat(httpLink);\n\n  return new ApolloClient({\n    uri: graphqlApiUrl,\n    cache,\n    link: ApolloLink.from([errorLink, link]),\n    connectToDevTools: true,\n  });\n}\n\nexport function AuthApolloProvider({ children }) {\n  const { isAuthenticated, loading, loginWithRedirect, token } = useAuth0();\n\n  useEffect(() => {\n    if (loading) {\n      return;\n    }\n    if (!isAuthenticated) {\n      loginWithRedirect({});\n      return;\n    }\n  }, [isAuthenticated, loginWithRedirect, loading]);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!isAuthenticated || !token) {\n    return <div />;\n  }\n\n  return (\n    <ApolloProvider client={createClient(token)}>{children}</ApolloProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sb-admin-2.css';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport { AuthApolloProvider, createClient } from './apollo';\nimport { Auth0Provider, Auth0Context } from './react-auth0-spa';\nimport config from './auth_config.json';\nimport { Beta } from './components/Beta';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = appState => {\n  window.history.replaceState(\n    {},\n    document.title,\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\nconst redirectURI = `${window.location.origin}${process.env.PUBLIC_URL}`;\n\nconst ProdAuthorizationProvider = ({ children }) => (\n  <Auth0Provider\n    domain={config.domain}\n    client_id={config.clientId}\n    redirect_uri={redirectURI}\n    onRedirectCallback={onRedirectCallback}\n    audience={config.audience}\n    scope=\"beta\"\n    returnTo={redirectURI}\n  >\n    <AuthApolloProvider>{children}</AuthApolloProvider>\n  </Auth0Provider>\n);\n\nconst DevAuthorizationProvider = ({ children }) => (\n  <Auth0Context.Provider\n    value={{\n      isAuthenticated: true,\n      loading: false,\n      loginWithRedirect: () => {},\n      user: {\n        name: 'Valerie Luna',\n        picture: 'https://source.unsplash.com/QAB-WJcbgJk/60x60',\n        locale: 'pl',\n      },\n      getTokenScopes: () => Promise.resolve(['beta']),\n      logout: () => {},\n    }}\n  >\n    <ApolloProvider client={createClient()}>{children}</ApolloProvider>\n  </Auth0Context.Provider>\n);\n\nconst authDisabled = process.env.REACT_APP_INSECURE_AUTH_DISABLED;\nconst AuthorizationProvider =\n  authDisabled !== 'true'\n    ? ProdAuthorizationProvider\n    : DevAuthorizationProvider;\n\nReactDOM.render(\n  <AuthorizationProvider>\n    <Beta>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n      </BrowserRouter>\n    </Beta>\n  </AuthorizationProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { useAuth0 } from '../react-auth0-spa';\nimport React, { useState, useEffect } from 'react';\n\nexport function Beta({ children }) {\n  const { getTokenScopes } = useAuth0();\n  const [scope, setScope] = useState();\n\n  useEffect(() => {\n    getTokenScopes().then(setScope);\n  }, [setScope, getTokenScopes]);\n\n  if (!scope) {\n    return <div></div>;\n  }\n\n  const isBetaUser = scope.some(v => v === 'beta');\n\n  if (isBetaUser) {\n    return children;\n  }\n  return <div>This conent is available only to beta users</div>;\n}\n"],"sourceRoot":""}